{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Nedir ? What Is Argo CD? Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. Why Argo CD? Application definitions, configurations, and environments should be declarative and version controlled. Application deployment and lifecycle management should be automated, auditable, and easy to understand. Getting Started Quick Start kubectl create namespace argocd kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml Follow our getting started guide . Further user oriented documentation is provided for additional features. If you are looking to upgrade ArgoCD, see the upgrade guide . Developer oriented documentation is available for people interested in building third-party integrations. How it works Argo CD follows the GitOps pattern of using Git repositories as the source of truth for defining the desired application state. Kubernetes manifests can be specified in several ways: kustomize applications helm charts ksonnet applications jsonnet files Plain directory of YAML/json manifests Any custom config management tool configured as a config management plugin Argo CD automates the deployment of the desired application states in the specified target environments. Application deployments can track updates to branches, tags, or pinned to a specific version of manifests at a Git commit. See tracking strategies for additional details about the different tracking strategies available. For a quick 10 minute overview of Argo CD, check out the demo presented to the Sig Apps community meeting: Architecture Argo CD is implemented as a kubernetes controller which continuously monitors running applications and compares the current, live state against the desired target state (as specified in the Git repo). A deployed application whose live state deviates from the target state is considered OutOfSync . Argo CD reports & visualizes the differences, while providing facilities to automatically or manually sync the live state back to the desired target state. Any modifications made to the desired target state in the Git repo can be automatically applied and reflected in the specified target environments. For additional details, see architecture overview . Features Automated deployment of applications to specified target environments Support for multiple config management/templating tools (Kustomize, Helm, Ksonnet, Jsonnet, plain-YAML) Ability to manage and deploy to multiple clusters SSO Integration (OIDC, OAuth2, LDAP, SAML 2.0, GitHub, GitLab, Microsoft, LinkedIn) Multi-tenancy and RBAC policies for authorization Rollback/Roll-anywhere to any application configuration committed in Git repository Health status analysis of application resources Automated configuration drift detection and visualization Automated or manual syncing of applications to its desired state Web UI which provides real-time view of application activity CLI for automation and CI integration Webhook integration (GitHub, BitBucket, GitLab) Access tokens for automation PreSync, Sync, PostSync hooks to support complex application rollouts (e.g.blue/green & canary upgrades) Audit trails for application events and API calls Prometheus metrics Parameter overrides for overriding ksonnet/helm parameters in Git Development Status Argo CD is being actively developed by the community. Our releases can be found here . Adoption Organizations who have officially adopted Argo CD can be found here .","title":"Nedir ?"},{"location":"#nedir","text":"","title":"Nedir ?"},{"location":"#what-is-argo-cd","text":"Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes.","title":"What Is Argo CD?"},{"location":"#why-argo-cd","text":"Application definitions, configurations, and environments should be declarative and version controlled. Application deployment and lifecycle management should be automated, auditable, and easy to understand.","title":"Why Argo CD?"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#quick-start","text":"kubectl create namespace argocd kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml Follow our getting started guide . Further user oriented documentation is provided for additional features. If you are looking to upgrade ArgoCD, see the upgrade guide . Developer oriented documentation is available for people interested in building third-party integrations.","title":"Quick Start"},{"location":"#how-it-works","text":"Argo CD follows the GitOps pattern of using Git repositories as the source of truth for defining the desired application state. Kubernetes manifests can be specified in several ways: kustomize applications helm charts ksonnet applications jsonnet files Plain directory of YAML/json manifests Any custom config management tool configured as a config management plugin Argo CD automates the deployment of the desired application states in the specified target environments. Application deployments can track updates to branches, tags, or pinned to a specific version of manifests at a Git commit. See tracking strategies for additional details about the different tracking strategies available. For a quick 10 minute overview of Argo CD, check out the demo presented to the Sig Apps community meeting:","title":"How it works"},{"location":"#architecture","text":"Argo CD is implemented as a kubernetes controller which continuously monitors running applications and compares the current, live state against the desired target state (as specified in the Git repo). A deployed application whose live state deviates from the target state is considered OutOfSync . Argo CD reports & visualizes the differences, while providing facilities to automatically or manually sync the live state back to the desired target state. Any modifications made to the desired target state in the Git repo can be automatically applied and reflected in the specified target environments. For additional details, see architecture overview .","title":"Architecture"},{"location":"#features","text":"Automated deployment of applications to specified target environments Support for multiple config management/templating tools (Kustomize, Helm, Ksonnet, Jsonnet, plain-YAML) Ability to manage and deploy to multiple clusters SSO Integration (OIDC, OAuth2, LDAP, SAML 2.0, GitHub, GitLab, Microsoft, LinkedIn) Multi-tenancy and RBAC policies for authorization Rollback/Roll-anywhere to any application configuration committed in Git repository Health status analysis of application resources Automated configuration drift detection and visualization Automated or manual syncing of applications to its desired state Web UI which provides real-time view of application activity CLI for automation and CI integration Webhook integration (GitHub, BitBucket, GitLab) Access tokens for automation PreSync, Sync, PostSync hooks to support complex application rollouts (e.g.blue/green & canary upgrades) Audit trails for application events and API calls Prometheus metrics Parameter overrides for overriding ksonnet/helm parameters in Git","title":"Features"},{"location":"#development-status","text":"Argo CD is being actively developed by the community. Our releases can be found here .","title":"Development Status"},{"location":"#adoption","text":"Organizations who have officially adopted Argo CD can be found here .","title":"Adoption"},{"location":"CONTRIBUTING/","text":"Nas\u0131l Not Eklerim ? Not eklemek i\u00e7in d\u00f6k\u00fcmana g\u00f6z at\u0131n\u0131z. the Contribution Guide","title":"Nas\u0131l Not Eklerim ?"},{"location":"CONTRIBUTING/#nasl-not-eklerim","text":"Not eklemek i\u00e7in d\u00f6k\u00fcmana g\u00f6z at\u0131n\u0131z. the Contribution Guide","title":"Nas\u0131l Not Eklerim ?"},{"location":"Kubernetes%20Notlar%C4%B1/001-proposal-template/","text":"Neat Enhancement Idea This is the title of the enhancement. Keep it simple and descriptive. A good title can help communicate what the enhancement is and should be considered as part of any review. Open Questions [optional] This is where to call out areas of the design that require closure before deciding to implement the design. Summary The Summary is required for producing accurate user-focused documentation such as release notes or a development roadmap. It should be possible to collect this information before implementation begins in order to avoid requiring implementors to split their attention between writing release notes and implementing the feature itself. Before you get started with this document, please feel free to have a conversation on this with the maintainers/community on Github that would help drive a more organized thought process for the formal proposal here. Motivation This section is for explicitly listing the motivation, goals and non-goals of this proposal. Describe why the change is important and the benefits to users. Goals List the specific goals of the proposal and their measurable results. How will we know that this has succeeded? Non-Goals What is out of scope for this proposal? Listing non-goals helps to focus discussion and make progress. Proposal This is where we get down to details of what the proposal is about. Use cases Add a list of detailed use cases this enhancement intends to take care of. Use case 1: As a user, I would like to understand the drift. (This is an example) Use case 2: As a user, I would like to take an action on the deviation/drift. (This is an example) Implementation Details/Notes/Constraints [optional] What are the caveats to the implementation? What are some important details that didn't come across above. Go in to as much detail as necessary here. This might be a good place to talk about core concepts and how they relate. You may have a work-in-progress Pull Request to demonstrate the functioning of the enhancement you are proposing. Detailed examples Security Considerations How does this proposal impact the security aspects of Argo CD workloads ? Are there any unresolved follow-ups that need to be done to make the enhancement more robust ? Risks and Mitigations What are the risks of this proposal and how do we mitigate. Think broadly. For example, consider both security and how this will impact the larger Kubernetes ecosystem. Consider including folks that also work outside your immediate sub-project. Upgrade / Downgrade Strategy If applicable, how will the component be upgraded and downgraded? Make sure this is in the test plan. Consider the following in developing an upgrade/downgrade strategy for this enhancement: What changes (in invocations, configurations, API use, etc.) is an existing cluster required to make on upgrade in order to keep previous behavior? What changes (in invocations, configurations, API use, etc.) is an existing cluster required to make on upgrade in order to make use of the enhancement? Drawbacks The idea is to find the best form of an argument why this enhancement should not be implemented. Alternatives Similar to the Drawbacks section the Alternatives section is used to highlight and record other possible approaches to delivering the value proposed by an enhancement.","title":"Neat-enhancement-idea"},{"location":"Kubernetes%20Notlar%C4%B1/001-proposal-template/#neat-enhancement-idea","text":"This is the title of the enhancement. Keep it simple and descriptive. A good title can help communicate what the enhancement is and should be considered as part of any review.","title":"Neat Enhancement Idea"},{"location":"Kubernetes%20Notlar%C4%B1/001-proposal-template/#open-questions-optional","text":"This is where to call out areas of the design that require closure before deciding to implement the design.","title":"Open Questions [optional]"},{"location":"Kubernetes%20Notlar%C4%B1/001-proposal-template/#summary","text":"The Summary is required for producing accurate user-focused documentation such as release notes or a development roadmap. It should be possible to collect this information before implementation begins in order to avoid requiring implementors to split their attention between writing release notes and implementing the feature itself. Before you get started with this document, please feel free to have a conversation on this with the maintainers/community on Github that would help drive a more organized thought process for the formal proposal here.","title":"Summary"},{"location":"Kubernetes%20Notlar%C4%B1/001-proposal-template/#motivation","text":"This section is for explicitly listing the motivation, goals and non-goals of this proposal. Describe why the change is important and the benefits to users.","title":"Motivation"},{"location":"Kubernetes%20Notlar%C4%B1/001-proposal-template/#goals","text":"List the specific goals of the proposal and their measurable results. How will we know that this has succeeded?","title":"Goals"},{"location":"Kubernetes%20Notlar%C4%B1/001-proposal-template/#non-goals","text":"What is out of scope for this proposal? Listing non-goals helps to focus discussion and make progress.","title":"Non-Goals"},{"location":"Kubernetes%20Notlar%C4%B1/001-proposal-template/#proposal","text":"This is where we get down to details of what the proposal is about.","title":"Proposal"},{"location":"Kubernetes%20Notlar%C4%B1/001-proposal-template/#use-cases","text":"Add a list of detailed use cases this enhancement intends to take care of.","title":"Use cases"},{"location":"Kubernetes%20Notlar%C4%B1/001-proposal-template/#use-case-1","text":"As a user, I would like to understand the drift. (This is an example)","title":"Use case 1:"},{"location":"Kubernetes%20Notlar%C4%B1/001-proposal-template/#use-case-2","text":"As a user, I would like to take an action on the deviation/drift. (This is an example)","title":"Use case 2:"},{"location":"Kubernetes%20Notlar%C4%B1/001-proposal-template/#implementation-detailsnotesconstraints-optional","text":"What are the caveats to the implementation? What are some important details that didn't come across above. Go in to as much detail as necessary here. This might be a good place to talk about core concepts and how they relate. You may have a work-in-progress Pull Request to demonstrate the functioning of the enhancement you are proposing.","title":"Implementation Details/Notes/Constraints [optional]"},{"location":"Kubernetes%20Notlar%C4%B1/001-proposal-template/#detailed-examples","text":"","title":"Detailed examples"},{"location":"Kubernetes%20Notlar%C4%B1/001-proposal-template/#security-considerations","text":"How does this proposal impact the security aspects of Argo CD workloads ? Are there any unresolved follow-ups that need to be done to make the enhancement more robust ?","title":"Security Considerations"},{"location":"Kubernetes%20Notlar%C4%B1/001-proposal-template/#risks-and-mitigations","text":"What are the risks of this proposal and how do we mitigate. Think broadly. For example, consider both security and how this will impact the larger Kubernetes ecosystem. Consider including folks that also work outside your immediate sub-project.","title":"Risks and Mitigations"},{"location":"Kubernetes%20Notlar%C4%B1/001-proposal-template/#upgrade-downgrade-strategy","text":"If applicable, how will the component be upgraded and downgraded? Make sure this is in the test plan. Consider the following in developing an upgrade/downgrade strategy for this enhancement: What changes (in invocations, configurations, API use, etc.) is an existing cluster required to make on upgrade in order to keep previous behavior? What changes (in invocations, configurations, API use, etc.) is an existing cluster required to make on upgrade in order to make use of the enhancement?","title":"Upgrade / Downgrade Strategy"},{"location":"Kubernetes%20Notlar%C4%B1/001-proposal-template/#drawbacks","text":"The idea is to find the best form of an argument why this enhancement should not be implemented.","title":"Drawbacks"},{"location":"Kubernetes%20Notlar%C4%B1/001-proposal-template/#alternatives","text":"Similar to the Drawbacks section the Alternatives section is used to highlight and record other possible approaches to delivering the value proposed by an enhancement.","title":"Alternatives"},{"location":"Kubernetes%20Notlar%C4%B1/002-ui-extensions/","text":"Argo CD Extensions Summary This proposal is to provide a mechanism to extend Argo CD such that it can provide resource-specific visualizations, capabilities and interactions in the following ways: Richer and context-sensitive UI components can be displayed in the user interface about custom resources. Custom health checks can be configured to assess the health of the resource. Custom actions could be performed to manipulate resources in predefined ways. Motivation Argo CD is commonly used as a dashboard to Kubernetes applications. The current UI is limited in that it only displays very general information about Kubernetes objects. Any special visualizations can currently only be done for native Kubernetes kinds. For custom resources, Argo CD does not by default have any special handling or understanding of CRs, such as how to assess the health of the object or visualizations. When examining a resource, a user can only see a YAML view of the object, which is not helpful unless they are familiar with the object's spec and status information. Note that Argo CD does currently have a resource customizations feature, which allows operators to define health checks and actions via lua scripts in the argocd-cm ConfigMap. However, the current mechanism of configuring resource customizations is difficult and highly error prone. This proposal would allow operators to more easily configure Argo CD to understand custom resources, as well as provide more powerful visualization of objects. Use cases Use case 1: As a user, I would like to see visual information about my Rollout without having to use the CLI or otherwise leave Argo CD. Use case 2: As an operator, I would like to configure Argo CD to be able to assess the health of a custom resource based on its status. Use case 3: As an operator, I would like to configure Argo CD to perform pre-defined actions (object mutations) on a custom resource, for example restarting a Rollout. Goals Enable new visualizations in the UI for resources that do not have baked-in support Extensions can be configured by operators at runtime, without a feature being built directly into Argo CD, and with no need to recompile UI code. Extensions should be easy to develop and install. Loose coupling between Argo CD and extensions. Replace current resource customizations in argocd-cm ConfigMap with extensions Proposal A new ArgoCDExtension CRD would be introduced which will allow operators configure Argo CD to understand how to handle and visualize custom resources. Visualizing a object requires javascript to render the object, and health/actions require lua scripts. Aas such, the extension CR would need to point to some location where the javascript/lua code would be hosted. It is proposed that a git repository be used to contain the javascript code, as well as the lua scripts necessary to assess health or perform actions of a resource. ArgoCDExtension CRD In the most simplest form, an Argo CD extension could simply be a pointer to a git repository at a revision: kind: ArgoCDExtension metadata: name: argo-rollouts spec: repository: https://github.com/argoproj-labs/rollout-extension revision: HEAD Git Repository Structure The git repository would have an expected structure, such that the scripts and UI component could be discovered easily by Argo CD based on resource kind. \u251c\u2500\u2500 README.md \u251c\u2500\u2500 argoproj.io \u2502 \u251c\u2500\u2500 AnalysisRun \u2502 \u2502 \u251c\u2500\u2500 actions \u2502 \u2502 \u2502 \u251c\u2500\u2500 discovery.lua \u2502 \u2502 \u2502 \u2514\u2500\u2500 terminate \u2502 \u2502 \u2502 \u2514\u2500\u2500 action.lua \u2502 \u2502 \u2514\u2500\u2500 health.lua \u2502 \u251c\u2500\u2500 Experiment \u2502 \u2502 \u2514\u2500\u2500 health.lua \u2502 \u2514\u2500\u2500 Rollout \u2502 \u251c\u2500\u2500 ui \u2502 \u2502 \u2514\u2500\u2500 extension.js # dynamically loaded by argocd-server \u2502 \u251c\u2500\u2500 actions \u2502 \u2502 \u251c\u2500\u2500 abort \u2502 \u2502 \u2502 \u2514\u2500\u2500 action.lua \u2502 \u2502 \u251c\u2500\u2500 discovery.lua \u2502 \u2502 \u251c\u2500\u2500 promote-full \u2502 \u2502 \u2502 \u2514\u2500\u2500 action.lua \u2502 \u2502 \u251c\u2500\u2500 restart \u2502 \u2502 \u2502 \u2514\u2500\u2500 action.lua \u2502 \u2502 \u251c\u2500\u2500 resume \u2502 \u2502 \u2502 \u2514\u2500\u2500 action.lua \u2502 \u2502 \u251c\u2500\u2500 retry \u2502 \u2502 \u2502 \u2514\u2500\u2500 action.lua Note that it may be necessary to support multiple versions of a resource (e.g. v1alpha1 vs. a v1 version of a custom esource), and so the path structure may need to also support incorporating the version in the path. For example: \u251c\u2500\u2500 argoproj.io \u2502 \u251c\u2500\u2500 v1alpha1 \u2502 \u2502 \u251c\u2500\u2500 AnalysisRun User Interface In the UI, a new tab in the Resource View will be made available. The contents of that tab would dynamically loaded by the Argo CD API server at the git URL specified in the extension, which would be cloned locally by the API server. Implementation Details At a high level an Argo CD extension is simply a React component, which is dynamically loaded at runtime by the Argo CD API server. In order for the component to render some visualization about a resource, it needs to be supplied at least two key peices of information: 1. The full resource object itself 2. The entire Application Resource Tree We provide the entire application tree to accomplish two things: Extensions get basic (shallow) live updates for free because the Resource Tree is already live updated Extensions may wish to display richer hierarchical structure for other related objects (e.g. the Rollout extension would want to display ReplicaSets and Pods) Further, if an Extension needs richer information than that provided by the Resource Tree, it can request additional information about a resource from the Argo CD API server. interface Extention { ResourceTab: React.Component<{resource: any}>; } The UI will dynamically import an Extension React component from the Argo CD API Server. This is accomplished by specifying the generic Extension component as a Webpack external, and including a <script> tag in the index.html template that refers to the Argo CD API Server's generic extension endpoint (i.e. /api/v1/extensions ). The API Server serves a different instantiation of the generic Extension component depending on the Resource being displayed; the generic extensions endpoint will have intelligence that reverse proxies the relevant third-party Extension API. The third-party Extension itself must conform to certain standards for this dynamic import (i.e. it must not bundle React). Installation Installing Argo CD Extensions support will be enabled with a single kubectl apply . This will: Install the ArgoCDExtension CRD Patch the Argo CD API Server with a sidecar The sidecar will be responsible for cloning repos specified in ArgoCDExtension CRs and mounting them in a well known location understood by the API server. Some changes are required in the Argo CD API server: It will serve Javascript assets mounted by the sidecar in the well known location to the UI at an endpoint (i.e. /api/v1/extensions/<resource-kind> ) It will retrieve Actions Lua scripts from the same well known location mounted by the sidecar instead of from argocd-cm UI Extention Interface TODO Detailed examples TODO Argo Rollout Extension PoC: Security Considerations Any write operations must be configured as Lua scripts defined in the ArgoCDExtension Custom Resource so that Argo CD RBAC can be enforced when a user invokes an action Risks and Mitigations We will be allowing the Argo CD UI to serve dynamically imported UI assets; while these dynamic imports will only occur from same-origin, malicious Extensions may inject hazardous code. We may also consider publishing a list of \"sanctioned\" or \"approved\" Extensions that we believe to be trustworthy (e.g. Argo Rollouts' or Workflows' Extensions). Upgrade / Downgrade Strategy Existing Argo CD instances should be unaffected by this change. Extensions are opt-in only, and ideally none should be installed by default. To opt in, operators will need to install services that comply with the Argo CD Extensions API and expose that service such that it is reachable by the Argo CD API Server. To uninstall an extension should be as simple as deleting the ArgoCDExtension CR. Drawbacks Argo CD was designed to be a GitOps tool, not a cluster visualization dashboard. Extensions open the door to increase Argo CD's scope in a way that may not be desirable. Alternatives We originally considered building native support for resources like a Rollout directly into Argo CD. However, this tightly couples the Argo CD Server to an Argo Rollouts version, which is problematic when Argo CD manages several clusters all running different Rollouts versions. We additionally considered requiring recompilation of the Argo CD UI (and by extension, the API server) to install Extensions in a similar fashion to Config Management Plugins. However, this is a headache for operators, and given that we are in the process of improving the Config Management Plugin paradigm, we should not go down this path if possible. Open Questions It will be important to allow Extensions to specify their own documentation URLs to be displayed as a button or banner to users, as to make clear that UI with support requests for third party extensions.","title":"Argo CD Extensions"},{"location":"Kubernetes%20Notlar%C4%B1/002-ui-extensions/#argo-cd-extensions","text":"","title":"Argo CD Extensions"},{"location":"Kubernetes%20Notlar%C4%B1/002-ui-extensions/#summary","text":"This proposal is to provide a mechanism to extend Argo CD such that it can provide resource-specific visualizations, capabilities and interactions in the following ways: Richer and context-sensitive UI components can be displayed in the user interface about custom resources. Custom health checks can be configured to assess the health of the resource. Custom actions could be performed to manipulate resources in predefined ways.","title":"Summary"},{"location":"Kubernetes%20Notlar%C4%B1/002-ui-extensions/#motivation","text":"Argo CD is commonly used as a dashboard to Kubernetes applications. The current UI is limited in that it only displays very general information about Kubernetes objects. Any special visualizations can currently only be done for native Kubernetes kinds. For custom resources, Argo CD does not by default have any special handling or understanding of CRs, such as how to assess the health of the object or visualizations. When examining a resource, a user can only see a YAML view of the object, which is not helpful unless they are familiar with the object's spec and status information. Note that Argo CD does currently have a resource customizations feature, which allows operators to define health checks and actions via lua scripts in the argocd-cm ConfigMap. However, the current mechanism of configuring resource customizations is difficult and highly error prone. This proposal would allow operators to more easily configure Argo CD to understand custom resources, as well as provide more powerful visualization of objects.","title":"Motivation"},{"location":"Kubernetes%20Notlar%C4%B1/002-ui-extensions/#use-cases","text":"","title":"Use cases"},{"location":"Kubernetes%20Notlar%C4%B1/002-ui-extensions/#use-case-1","text":"As a user, I would like to see visual information about my Rollout without having to use the CLI or otherwise leave Argo CD.","title":"Use case 1:"},{"location":"Kubernetes%20Notlar%C4%B1/002-ui-extensions/#use-case-2","text":"As an operator, I would like to configure Argo CD to be able to assess the health of a custom resource based on its status.","title":"Use case 2:"},{"location":"Kubernetes%20Notlar%C4%B1/002-ui-extensions/#use-case-3","text":"As an operator, I would like to configure Argo CD to perform pre-defined actions (object mutations) on a custom resource, for example restarting a Rollout.","title":"Use case 3:"},{"location":"Kubernetes%20Notlar%C4%B1/002-ui-extensions/#goals","text":"Enable new visualizations in the UI for resources that do not have baked-in support Extensions can be configured by operators at runtime, without a feature being built directly into Argo CD, and with no need to recompile UI code. Extensions should be easy to develop and install. Loose coupling between Argo CD and extensions. Replace current resource customizations in argocd-cm ConfigMap with extensions","title":"Goals"},{"location":"Kubernetes%20Notlar%C4%B1/002-ui-extensions/#proposal","text":"A new ArgoCDExtension CRD would be introduced which will allow operators configure Argo CD to understand how to handle and visualize custom resources. Visualizing a object requires javascript to render the object, and health/actions require lua scripts. Aas such, the extension CR would need to point to some location where the javascript/lua code would be hosted. It is proposed that a git repository be used to contain the javascript code, as well as the lua scripts necessary to assess health or perform actions of a resource.","title":"Proposal"},{"location":"Kubernetes%20Notlar%C4%B1/002-ui-extensions/#argocdextension-crd","text":"In the most simplest form, an Argo CD extension could simply be a pointer to a git repository at a revision: kind: ArgoCDExtension metadata: name: argo-rollouts spec: repository: https://github.com/argoproj-labs/rollout-extension revision: HEAD","title":"ArgoCDExtension CRD"},{"location":"Kubernetes%20Notlar%C4%B1/002-ui-extensions/#git-repository-structure","text":"The git repository would have an expected structure, such that the scripts and UI component could be discovered easily by Argo CD based on resource kind. \u251c\u2500\u2500 README.md \u251c\u2500\u2500 argoproj.io \u2502 \u251c\u2500\u2500 AnalysisRun \u2502 \u2502 \u251c\u2500\u2500 actions \u2502 \u2502 \u2502 \u251c\u2500\u2500 discovery.lua \u2502 \u2502 \u2502 \u2514\u2500\u2500 terminate \u2502 \u2502 \u2502 \u2514\u2500\u2500 action.lua \u2502 \u2502 \u2514\u2500\u2500 health.lua \u2502 \u251c\u2500\u2500 Experiment \u2502 \u2502 \u2514\u2500\u2500 health.lua \u2502 \u2514\u2500\u2500 Rollout \u2502 \u251c\u2500\u2500 ui \u2502 \u2502 \u2514\u2500\u2500 extension.js # dynamically loaded by argocd-server \u2502 \u251c\u2500\u2500 actions \u2502 \u2502 \u251c\u2500\u2500 abort \u2502 \u2502 \u2502 \u2514\u2500\u2500 action.lua \u2502 \u2502 \u251c\u2500\u2500 discovery.lua \u2502 \u2502 \u251c\u2500\u2500 promote-full \u2502 \u2502 \u2502 \u2514\u2500\u2500 action.lua \u2502 \u2502 \u251c\u2500\u2500 restart \u2502 \u2502 \u2502 \u2514\u2500\u2500 action.lua \u2502 \u2502 \u251c\u2500\u2500 resume \u2502 \u2502 \u2502 \u2514\u2500\u2500 action.lua \u2502 \u2502 \u251c\u2500\u2500 retry \u2502 \u2502 \u2502 \u2514\u2500\u2500 action.lua Note that it may be necessary to support multiple versions of a resource (e.g. v1alpha1 vs. a v1 version of a custom esource), and so the path structure may need to also support incorporating the version in the path. For example: \u251c\u2500\u2500 argoproj.io \u2502 \u251c\u2500\u2500 v1alpha1 \u2502 \u2502 \u251c\u2500\u2500 AnalysisRun","title":"Git Repository Structure"},{"location":"Kubernetes%20Notlar%C4%B1/002-ui-extensions/#user-interface","text":"In the UI, a new tab in the Resource View will be made available. The contents of that tab would dynamically loaded by the Argo CD API server at the git URL specified in the extension, which would be cloned locally by the API server.","title":"User Interface"},{"location":"Kubernetes%20Notlar%C4%B1/002-ui-extensions/#implementation-details","text":"At a high level an Argo CD extension is simply a React component, which is dynamically loaded at runtime by the Argo CD API server. In order for the component to render some visualization about a resource, it needs to be supplied at least two key peices of information: 1. The full resource object itself 2. The entire Application Resource Tree We provide the entire application tree to accomplish two things: Extensions get basic (shallow) live updates for free because the Resource Tree is already live updated Extensions may wish to display richer hierarchical structure for other related objects (e.g. the Rollout extension would want to display ReplicaSets and Pods) Further, if an Extension needs richer information than that provided by the Resource Tree, it can request additional information about a resource from the Argo CD API server. interface Extention { ResourceTab: React.Component<{resource: any}>; } The UI will dynamically import an Extension React component from the Argo CD API Server. This is accomplished by specifying the generic Extension component as a Webpack external, and including a <script> tag in the index.html template that refers to the Argo CD API Server's generic extension endpoint (i.e. /api/v1/extensions ). The API Server serves a different instantiation of the generic Extension component depending on the Resource being displayed; the generic extensions endpoint will have intelligence that reverse proxies the relevant third-party Extension API. The third-party Extension itself must conform to certain standards for this dynamic import (i.e. it must not bundle React).","title":"Implementation Details"},{"location":"Kubernetes%20Notlar%C4%B1/002-ui-extensions/#installation","text":"Installing Argo CD Extensions support will be enabled with a single kubectl apply . This will: Install the ArgoCDExtension CRD Patch the Argo CD API Server with a sidecar The sidecar will be responsible for cloning repos specified in ArgoCDExtension CRs and mounting them in a well known location understood by the API server. Some changes are required in the Argo CD API server: It will serve Javascript assets mounted by the sidecar in the well known location to the UI at an endpoint (i.e. /api/v1/extensions/<resource-kind> ) It will retrieve Actions Lua scripts from the same well known location mounted by the sidecar instead of from argocd-cm","title":"Installation"},{"location":"Kubernetes%20Notlar%C4%B1/002-ui-extensions/#ui-extention-interface","text":"TODO","title":"UI Extention Interface"},{"location":"Kubernetes%20Notlar%C4%B1/002-ui-extensions/#detailed-examples","text":"TODO","title":"Detailed examples"},{"location":"Kubernetes%20Notlar%C4%B1/002-ui-extensions/#argo-rollout-extension-poc","text":"","title":"Argo Rollout Extension PoC:"},{"location":"Kubernetes%20Notlar%C4%B1/002-ui-extensions/#security-considerations","text":"Any write operations must be configured as Lua scripts defined in the ArgoCDExtension Custom Resource so that Argo CD RBAC can be enforced when a user invokes an action","title":"Security Considerations"},{"location":"Kubernetes%20Notlar%C4%B1/002-ui-extensions/#risks-and-mitigations","text":"We will be allowing the Argo CD UI to serve dynamically imported UI assets; while these dynamic imports will only occur from same-origin, malicious Extensions may inject hazardous code. We may also consider publishing a list of \"sanctioned\" or \"approved\" Extensions that we believe to be trustworthy (e.g. Argo Rollouts' or Workflows' Extensions).","title":"Risks and Mitigations"},{"location":"Kubernetes%20Notlar%C4%B1/002-ui-extensions/#upgrade-downgrade-strategy","text":"Existing Argo CD instances should be unaffected by this change. Extensions are opt-in only, and ideally none should be installed by default. To opt in, operators will need to install services that comply with the Argo CD Extensions API and expose that service such that it is reachable by the Argo CD API Server. To uninstall an extension should be as simple as deleting the ArgoCDExtension CR.","title":"Upgrade / Downgrade Strategy"},{"location":"Kubernetes%20Notlar%C4%B1/002-ui-extensions/#drawbacks","text":"Argo CD was designed to be a GitOps tool, not a cluster visualization dashboard. Extensions open the door to increase Argo CD's scope in a way that may not be desirable.","title":"Drawbacks"},{"location":"Kubernetes%20Notlar%C4%B1/002-ui-extensions/#alternatives","text":"We originally considered building native support for resources like a Rollout directly into Argo CD. However, this tightly couples the Argo CD Server to an Argo Rollouts version, which is problematic when Argo CD manages several clusters all running different Rollouts versions. We additionally considered requiring recompilation of the Argo CD UI (and by extension, the API server) to install Extensions in a similar fashion to Config Management Plugins. However, this is a headache for operators, and given that we are in the process of improving the Config Management Plugin paradigm, we should not go down this path if possible.","title":"Alternatives"},{"location":"Kubernetes%20Notlar%C4%B1/002-ui-extensions/#open-questions","text":"It will be important to allow Extensions to specify their own documentation URLs to be displayed as a button or banner to users, as to make clear that UI with support requests for third party extensions.","title":"Open Questions"},{"location":"Kubernetes%20Notlar%C4%B1/application-name-identifier/","text":"Change the way application resources are identified This is a proposal to introduce the tracking method settings that allows using an annotation as the application identifier instead of the application instance label. This will allow application names longer than 63 characters and solve issues caused by copying app.kubernetes.io/instance label. As an additional goal, we propose to introduce an installation ID that will allow multiple Argo CD instances to manage resources on the same cluster. Summary Argo CD identifies resources it manages by setting the application instance label to the name of the managing Application on all resources that are managed (i.e. reconciled from Git). The default label used is the well-known label app.kubernetes.io/instance . This proposal suggests to introduce the trackingMethod setting that allows controlling how applicaton resources are identified and allows switching to using the annotation instead of app.kubernetes.io/instance label. Motivation The main motivation behind this change is to solve the following known issues: The Kubernetes label value cannot be longer than 63 characters. In large scale installations, in order to build up an easy to understand and well-formed naming schemes for applications managed by Argo CD, people often hit the 63 character limit and need to define the naming scheme around this unnecessary limit. Popular off-the-shelf Helm charts often add the app.kubernetes.io/instance label to the generated resource manifests. This label confuses Argo CD and makes it think the resource is managed by the application. Kubernetes operators often create additional resources without creating owner reference and copy the app.kubernetes.io/instance label from the application resource. This is also confusing Argo CD and makes it think the resource is managed by the application. An additional motivation - while we're at touching at application instance label - is to improve the way how multiple Argo CD instances could manage applications on the same cluster, without requiring the user to actually perform instance specific configuration. Goals Allow application names of more than 63 characters Prevent confusion caused by copied/generated app.kubernetes.io/instance label Keep having a human-readable way to identify resources that belong to a given Argo CD application As a stretch-goal, allow multiple Argo CD instances to manage resources on the same cluster without the need for configuring application instance label key (usually app.kubernetes.io/instance ) Non-Goals Change the default name of the application instance label Proposal We propose introducing a new setting trackingMethod that allows to control how application resources are identified. The trackingMethod setting takes one of the following values: label (default) - Argo CD keep using the app.kubernetes.io/instance label. annotation+label - Argo CD keep adding app.kubernetes.io/instance but only for informational purposes: label is not used for tracking, value is truncated if longer than 63 characters. The app.kubernetes.io/instance annotation is used to track application resources. annotation - Argo CD uses the app.kubernetes.io/instance annotation to track application resources. The app.kubernetes.io/instance attribute values includes the application name, resources identifier it is applied to, and optionally the Argo CD installation ID: The application name allows to identify the application that manages the resource. The resource identifier prevents confusion if an operation copies the app.kubernetes.io/instance annotation to another resource. Finally optional installation ID allows separate two Argo CD instances that manages resources in the same cluster. The trackingMethod setting should be available at the system level and the application level to allow the smooth transition from the old app.kubernetes.io/instance label to the new tracking method. Using the app leverl settings users will be able to first switch applications one by one to the new tracking method and prepare for the migration. Next system level setting can be changed to annotation or annotation+label and not-migrated applications can be configured to use labels using application level setting. Use cases Add a list of detailed use cases this enhancement intends to take care of. Use case 1: Allow for more than 63 characters in application name As a user, I would like to be able to give my applications names with arbitrary length, because I want to include identifiers like target regions and possibly availability zones, the environment and possibly other identifiers (e.g. a team name) in the application names. The current restriction of 63 characters is not sufficient for my naming requirements. Use case 2: Allow for retrieving all resources using Kubernetes As an administrator, I want to enable my users to use more than 63 characters in their application names, but I still want to be able to retrieve all of the resources managed by that particular application using Kubernetes mechanisms, e.g. a label selector as in the following example: kubectl get deployments -l app.kubernetes.io/instance=<application> --all-namespaces Use case 3: Multiple Argo CD instances managing apps on same cluster I also want to be able to see which application and Argo CD instance is the one in charge of a given resource. Implementation Details/Notes/Constraints [optional] Include resource identifies in the app.kubernetes.io/instance annotation The app.kubernetes.io/instance annotation might be accidently added or copied same as label. To prevent Argo CD confusion the annotation value should include the identifier of the resource annotation was applied to. The resource identifier includes the group, kind, namespace and name of the resource. It is proposed to use ; to separate identifier from the application name. annotations: app.kubernetes.io/instance: <application-name>;<group>/<kind>/<namespace>/<name> Example: apiVersion: apps/v1 kind: Deployment metadata: name: my-deployment namespace: default annotations: app.kubernetes.io/instance: my-application;apps/Deployment/default/my-deployment Allow multiple Argo CD instances manage applications on same cluster As of today, to allow two or more Argo CD instances with a similar set of permissions (e.g. cluster-wide read access to resources) manage applications on the same cluster, users would have to configure the application instance label key in the Argo CD configuration to a unique value. Otherwise, if an application with the same name exists in two different Argo CD installations, both would claim ownership of the resources of that application. We do see the need for preventing such scenarios out-of-the-box in Argo CD. For this, we do suggest the introduction of an installation ID in the form of a standard GUID . This GUID would be generated once by Argo CD upon startup, and is persisted in the Argo CD configuration, e.g. by storing it as installationID in the argocd-cm ConfigMap. The GUID of the installation would need to be encoded in some way in the resources managed by that Argo CD instance. We suggest using a dedicated annotation to store the GUID and modify Argo CD so that it matches both , the app instance key and the GUID to determine whether a resource is managed by this Argo CD instance. Given above mentioned GUID, this may look like the following on a resource: yaml apiVersion: v1 Kind: Secret metadata: name: some-secret namespace: some-namespace annotations: app.kubernetes.io/instance: my-application;/Secret/some-namespace/some-secret argo-cd.argoproj.io/installation-id: 61199294-412c-4e78-a237-3ebba6784fcd The user should be able to opt-out of this feature by setting the installationID to an empty string. Security Considerations We think this change will not have a direct impact on the security of Argo CD or the applications it manages. Risks and Mitigations The proposal assumes that user can keep adding app.kubernetes.io/instance label to be able to retrieve resources using kubectl get -l app.kubernetes.io/instance=<application> command. However, Argo CD is going to truncate the value of the label if it is longer than 63 characters. There is a small possibility that there are several applications with the same first 63 characters in the name. This should be clearly stated in documentation. Upgrade / Downgrade Strategy Upgrading to a version that implements this proposal should be seamless, as previously injected labels will not be removed and additional annotations will be applied to the resource. E.g. consider following resource in Git, that will be synced as part of an application named some-application . In Git, the resource looks like follows: apiVersion: v1 Kind: Secret metadata: name: some-secret namespace: some-namespace When synced with the current incarnation of Argo CD, Argo CD would inject the application instance label and once the resource is applied in the cluster, it would look like follows: apiVersion: v1 Kind: Secret metadata: name: some-secret namespace: some-namespace labels: app.kubernetes.io/instance: some-application Once Argo CD is updated to a version implementing this proposal, the resource would be rewritten to look like the following: apiVersion: v1 Kind: Secret metadata: name: some-secret namespace: some-namespace labels: app.kubernetes.io/instance: some-application annotations: app.kubernetes.io/instance: my-application;/Secret/some-namespace/some-secret argo-cd.argoproj.io/installation-id: 61199294-412c-4e78-a237-3ebba6784fcd On a rollback to a previous Argo CD version, this change would be reverted and the resource would look like the first shown example above. Drawbacks We do see some drawbacks to this implementation: This change would trigger a re-sync of each and every managed resource, which may result in unexpected heavy load on Argo CD and the cluster at upgrade time. The workaround is an ability to opt-out of this as a default and enable it on application basis. Alternatives Enabling application names longer than 63 characters could also be done by using the hashed value of the application name and additional metadata as a label. The disadvantage of this approach is that hash value is not human friendly. In particular, it is difficult to retrieve application manifests using kubectl get -l app.kubernetes.io/instance=<application> .","title":"Change the way application resources are identified"},{"location":"Kubernetes%20Notlar%C4%B1/application-name-identifier/#change-the-way-application-resources-are-identified","text":"This is a proposal to introduce the tracking method settings that allows using an annotation as the application identifier instead of the application instance label. This will allow application names longer than 63 characters and solve issues caused by copying app.kubernetes.io/instance label. As an additional goal, we propose to introduce an installation ID that will allow multiple Argo CD instances to manage resources on the same cluster.","title":"Change the way application resources are identified"},{"location":"Kubernetes%20Notlar%C4%B1/application-name-identifier/#summary","text":"Argo CD identifies resources it manages by setting the application instance label to the name of the managing Application on all resources that are managed (i.e. reconciled from Git). The default label used is the well-known label app.kubernetes.io/instance . This proposal suggests to introduce the trackingMethod setting that allows controlling how applicaton resources are identified and allows switching to using the annotation instead of app.kubernetes.io/instance label.","title":"Summary"},{"location":"Kubernetes%20Notlar%C4%B1/application-name-identifier/#motivation","text":"The main motivation behind this change is to solve the following known issues: The Kubernetes label value cannot be longer than 63 characters. In large scale installations, in order to build up an easy to understand and well-formed naming schemes for applications managed by Argo CD, people often hit the 63 character limit and need to define the naming scheme around this unnecessary limit. Popular off-the-shelf Helm charts often add the app.kubernetes.io/instance label to the generated resource manifests. This label confuses Argo CD and makes it think the resource is managed by the application. Kubernetes operators often create additional resources without creating owner reference and copy the app.kubernetes.io/instance label from the application resource. This is also confusing Argo CD and makes it think the resource is managed by the application. An additional motivation - while we're at touching at application instance label - is to improve the way how multiple Argo CD instances could manage applications on the same cluster, without requiring the user to actually perform instance specific configuration.","title":"Motivation"},{"location":"Kubernetes%20Notlar%C4%B1/application-name-identifier/#goals","text":"Allow application names of more than 63 characters Prevent confusion caused by copied/generated app.kubernetes.io/instance label Keep having a human-readable way to identify resources that belong to a given Argo CD application As a stretch-goal, allow multiple Argo CD instances to manage resources on the same cluster without the need for configuring application instance label key (usually app.kubernetes.io/instance )","title":"Goals"},{"location":"Kubernetes%20Notlar%C4%B1/application-name-identifier/#non-goals","text":"Change the default name of the application instance label","title":"Non-Goals"},{"location":"Kubernetes%20Notlar%C4%B1/application-name-identifier/#proposal","text":"We propose introducing a new setting trackingMethod that allows to control how application resources are identified. The trackingMethod setting takes one of the following values: label (default) - Argo CD keep using the app.kubernetes.io/instance label. annotation+label - Argo CD keep adding app.kubernetes.io/instance but only for informational purposes: label is not used for tracking, value is truncated if longer than 63 characters. The app.kubernetes.io/instance annotation is used to track application resources. annotation - Argo CD uses the app.kubernetes.io/instance annotation to track application resources. The app.kubernetes.io/instance attribute values includes the application name, resources identifier it is applied to, and optionally the Argo CD installation ID: The application name allows to identify the application that manages the resource. The resource identifier prevents confusion if an operation copies the app.kubernetes.io/instance annotation to another resource. Finally optional installation ID allows separate two Argo CD instances that manages resources in the same cluster. The trackingMethod setting should be available at the system level and the application level to allow the smooth transition from the old app.kubernetes.io/instance label to the new tracking method. Using the app leverl settings users will be able to first switch applications one by one to the new tracking method and prepare for the migration. Next system level setting can be changed to annotation or annotation+label and not-migrated applications can be configured to use labels using application level setting.","title":"Proposal"},{"location":"Kubernetes%20Notlar%C4%B1/application-name-identifier/#use-cases","text":"Add a list of detailed use cases this enhancement intends to take care of.","title":"Use cases"},{"location":"Kubernetes%20Notlar%C4%B1/application-name-identifier/#use-case-1-allow-for-more-than-63-characters-in-application-name","text":"As a user, I would like to be able to give my applications names with arbitrary length, because I want to include identifiers like target regions and possibly availability zones, the environment and possibly other identifiers (e.g. a team name) in the application names. The current restriction of 63 characters is not sufficient for my naming requirements.","title":"Use case 1: Allow for more than 63 characters in application name"},{"location":"Kubernetes%20Notlar%C4%B1/application-name-identifier/#use-case-2-allow-for-retrieving-all-resources-using-kubernetes","text":"As an administrator, I want to enable my users to use more than 63 characters in their application names, but I still want to be able to retrieve all of the resources managed by that particular application using Kubernetes mechanisms, e.g. a label selector as in the following example: kubectl get deployments -l app.kubernetes.io/instance=<application> --all-namespaces","title":"Use case 2: Allow for retrieving all resources using Kubernetes"},{"location":"Kubernetes%20Notlar%C4%B1/application-name-identifier/#use-case-3-multiple-argo-cd-instances-managing-apps-on-same-cluster","text":"I also want to be able to see which application and Argo CD instance is the one in charge of a given resource.","title":"Use case 3: Multiple Argo CD instances managing apps on same cluster"},{"location":"Kubernetes%20Notlar%C4%B1/application-name-identifier/#implementation-detailsnotesconstraints-optional","text":"","title":"Implementation Details/Notes/Constraints [optional]"},{"location":"Kubernetes%20Notlar%C4%B1/application-name-identifier/#include-resource-identifies-in-the-appkubernetesioinstance-annotation","text":"The app.kubernetes.io/instance annotation might be accidently added or copied same as label. To prevent Argo CD confusion the annotation value should include the identifier of the resource annotation was applied to. The resource identifier includes the group, kind, namespace and name of the resource. It is proposed to use ; to separate identifier from the application name. annotations: app.kubernetes.io/instance: <application-name>;<group>/<kind>/<namespace>/<name> Example: apiVersion: apps/v1 kind: Deployment metadata: name: my-deployment namespace: default annotations: app.kubernetes.io/instance: my-application;apps/Deployment/default/my-deployment","title":"Include resource identifies in the app.kubernetes.io/instance annotation"},{"location":"Kubernetes%20Notlar%C4%B1/application-name-identifier/#allow-multiple-argo-cd-instances-manage-applications-on-same-cluster","text":"As of today, to allow two or more Argo CD instances with a similar set of permissions (e.g. cluster-wide read access to resources) manage applications on the same cluster, users would have to configure the application instance label key in the Argo CD configuration to a unique value. Otherwise, if an application with the same name exists in two different Argo CD installations, both would claim ownership of the resources of that application. We do see the need for preventing such scenarios out-of-the-box in Argo CD. For this, we do suggest the introduction of an installation ID in the form of a standard GUID . This GUID would be generated once by Argo CD upon startup, and is persisted in the Argo CD configuration, e.g. by storing it as installationID in the argocd-cm ConfigMap. The GUID of the installation would need to be encoded in some way in the resources managed by that Argo CD instance. We suggest using a dedicated annotation to store the GUID and modify Argo CD so that it matches both , the app instance key and the GUID to determine whether a resource is managed by this Argo CD instance. Given above mentioned GUID, this may look like the following on a resource: yaml apiVersion: v1 Kind: Secret metadata: name: some-secret namespace: some-namespace annotations: app.kubernetes.io/instance: my-application;/Secret/some-namespace/some-secret argo-cd.argoproj.io/installation-id: 61199294-412c-4e78-a237-3ebba6784fcd The user should be able to opt-out of this feature by setting the installationID to an empty string.","title":"Allow multiple Argo CD instances manage applications on same cluster"},{"location":"Kubernetes%20Notlar%C4%B1/application-name-identifier/#security-considerations","text":"We think this change will not have a direct impact on the security of Argo CD or the applications it manages.","title":"Security Considerations"},{"location":"Kubernetes%20Notlar%C4%B1/application-name-identifier/#risks-and-mitigations","text":"The proposal assumes that user can keep adding app.kubernetes.io/instance label to be able to retrieve resources using kubectl get -l app.kubernetes.io/instance=<application> command. However, Argo CD is going to truncate the value of the label if it is longer than 63 characters. There is a small possibility that there are several applications with the same first 63 characters in the name. This should be clearly stated in documentation.","title":"Risks and Mitigations"},{"location":"Kubernetes%20Notlar%C4%B1/application-name-identifier/#upgrade-downgrade-strategy","text":"Upgrading to a version that implements this proposal should be seamless, as previously injected labels will not be removed and additional annotations will be applied to the resource. E.g. consider following resource in Git, that will be synced as part of an application named some-application . In Git, the resource looks like follows: apiVersion: v1 Kind: Secret metadata: name: some-secret namespace: some-namespace When synced with the current incarnation of Argo CD, Argo CD would inject the application instance label and once the resource is applied in the cluster, it would look like follows: apiVersion: v1 Kind: Secret metadata: name: some-secret namespace: some-namespace labels: app.kubernetes.io/instance: some-application Once Argo CD is updated to a version implementing this proposal, the resource would be rewritten to look like the following: apiVersion: v1 Kind: Secret metadata: name: some-secret namespace: some-namespace labels: app.kubernetes.io/instance: some-application annotations: app.kubernetes.io/instance: my-application;/Secret/some-namespace/some-secret argo-cd.argoproj.io/installation-id: 61199294-412c-4e78-a237-3ebba6784fcd On a rollback to a previous Argo CD version, this change would be reverted and the resource would look like the first shown example above.","title":"Upgrade / Downgrade Strategy"},{"location":"Kubernetes%20Notlar%C4%B1/application-name-identifier/#drawbacks","text":"We do see some drawbacks to this implementation: This change would trigger a re-sync of each and every managed resource, which may result in unexpected heavy load on Argo CD and the cluster at upgrade time. The workaround is an ability to opt-out of this as a default and enable it on application basis.","title":"Drawbacks"},{"location":"Kubernetes%20Notlar%C4%B1/application-name-identifier/#alternatives","text":"Enabling application names longer than 63 characters could also be done by using the hashed value of the application name and additional metadata as a label. The disadvantage of this approach is that hash value is not human friendly. In particular, it is difficult to retrieve application manifests using kubectl get -l app.kubernetes.io/instance=<application> .","title":"Alternatives"},{"location":"Kubernetes%20Notlar%C4%B1/config-management-plugin-v2/","text":"Config Management Plugin Enhancement We want to enhance config management plugin in order to improve Argo CD operator and end-user experience for using additional tools such as cdk8s, Tanka, jkcfg, QBEC, Dhall, pulumi, etc. Summary Currently, Argo CD provides first-class support for Helm, Kustomize, Jsonnet/YAML, and Ksonnet. The support includes: - Bundled binaries (maintainers periodically upgrade binaries) - An ability to override parameters using UI/CLI - The applications are discovered in Git repository and auto-suggested during application creation in UI - Performance optimizations. Argo CD \"knows\" when it is safe to generate manifests concurrently and takes advantage of it. We want to enhance the configuration management plugin so that it can provide similar first-class support for additional tools such as cdk8s, Tanka, jkcfg, QBEC, Dhall, pulumi, etc. Motivation The config management plugin feature should be improved to provide the same level of user experience as for the natively supported tools to the additional tools such as cdk8s, Tanka, jkcfg, QBEC, Dhall, pulumi, etc., including Argo CD operators as well as end-user experience. Goals The goals for config management plugin enhancement are, Improve Installation Experience The current Config Management plugin installation experience requires two changes: - An entry in configManagementPlugins in the Argo CD configmap (i.e. argocd-cm) - Either an init container with a volume mount that adds a new binary into Argo CD repo server pod, or a rebuild of the argocd image, which contains the necessary tooling The problem with this approach is that the process is error-prone, manual, and requires learning from each and every Argo CD administrator. The goal is to make additional tools easily accessible for installation to Argo CD operators. Provide Discovery (Auto-selection of Tool) For Argo CD\u2019s natively supported config management plugins (Helm, Kustomize, Ksonnet, Jsonnet), Argo CD auto-detects and selects the appropriate tool given only the path in the Git repository. This selection is based on the recognition of well-known files in the directory (e.g. Chart.yaml, kustomization.yaml, etc...). Currently, unlike natively supported tools, when a plugin is used, a user needs to explicitly specify the plugin that should be used to render the manifests. As part of the improvements to config management plugins, We want to provide the same ability to auto-select the plugin based on recognized files in the path of the git repository. Parameters support in UI/CLI Currently, configuration management plugins allow specifying only a list of environment variables via UI/CLI. We want to extend its functionality to provide a similar experience as for existing natively supported tools to additional config management tools. Non-Goals We aren't planning on changing the existing support for native plugins as of now. Proposal We have drafted the solution to the problem statement as running configuration management plugin tools as sidecar in the argocd-repo-server . All it means that Argo CD Config Management Plugin 2.0 will be, - A user-supplied container image with all the necessary tooling installed in it. - It will run as a sidecar in the repo server deployment and will have shared access to the git repositories. - It will contain a CMP YAML specification file describing how to render manifests. - Its entrypoint will be a lightweight CMP API server that receives requests by the main repo-server to render manifests, based on the CMP specification file. This mechanism will provide the following benefits over the existing solution, - Plugin owners control their execution environment, packaging whatever dependent binaries required. - An Argo CD user who wants to use additional config management tools does not have to go through the hassle of building a customized argocd-repo-server in order to install required dependencies. - The plugin image will be running in a container separate from the main repo-server. Use cases UC1: As an Argo CD user, I would like to use first-class support provided for additional tools to generate and manage deployable kubernetes manifests UC2: As an Argo CD operator, I want to have smooth experience while installing additional tools such as cdk8s, Tanka, jkcfg, QBEC, Dhall, pulumi, etc. UC3: As a plugin owner, I want to have some control over the execution environment as I want to package whatever dependent binaries required. Implementation Details Config Management Plugin v2.0 implementation and experience will be as, Installation To install a plugin, an operator will simply patch argocd-repo-server to run config management plugin container as a sidecar, with argocd-cmp-server as it\u2019s entrypoint. Operator can use either off-the-shelf or custom built plugin image as sidecar image. # A plugin is a container image which runs as a sidecar, with the execution environment # necessary to render manifests. To install a plugin, containers: - name: cdk8s command: [/var/run/argocd/argocd-cmp-server] image: docker.ui/cdk8s/cdk8s:latest volumeMounts: - mountPath: /var/run/argocd name: var-files The argocd-cmp-server binary will be populated inside the plugin container via an init container in the argocd-repo-server, which will pre-populate a volume shared between plugins and the repo-server. # An init container will copy the argocd static binary into the shared volume # so that the CMP server can become the entrypoint initContainers: - command: - cp - -n - /usr/local/bin/argocd - /var/run/argocd/argocd-cmp-server image: quay.io/argoproj/argocd:latest name: copyutil volumeMounts: - mountPath: /var/run/argocd name: var-files # var-files is a shared volume between repo-server and cmp-server which holds: # 1) socket files that repo-server uses to communicate to each plugin # 2) git repositories cloned by repo-server volumes: - emptyDir: {} name: var-files Configuration Plugins will be configured via a ConfigManagementPlugin manifest located inside the plugin container, placed at a well-known location (e.g. /home/argocd/plugins/plugin.yaml). Argo CD is agnostic to the mechanism of how the plugin.yaml would be placed, but various options can be used on how to place this file, including: - Baking the file into the plugin image as part of docker build - Volume mapping the file through a configmap. Note that, while the ConfigManagementPlugin looks like a Kubernetes object, it is not actually a custom resource. It only follows kubernetes-style spec conventions. # metadata file is in the root and shell executor knows about it apiVersion: argoproj.io/v1alpha1 kind: ConfigManagementPlugin metadata: name: cdk8s spec: version: v1.0 init: command: [cdk8s, init] generate: command: [sh, -c, \"cdk8s synth && cat dist/*.yaml\"] discovery: find: - command: [find . -name main.ts] glob: \"**/*/main.ts\" check: - command: [-f ./main.ts] glob: \"main.ts\" allowConcurrency: true # enables generating multiple manifests in parallel. Config Management Plugin API Server (cmp-server) The Config Management Plugin API Server (cmp-server) will be a new Argo CD component whose sole responsibility will be to execute generate commands inside the plugin environment (the sidecar container), at the request of the repo-server. The cmp-server will expose the following APIs to the repo-server, GenerateManifests(path) - returns YAML output using plugin tooling IsSupported(path) - returns whether or not the given path is supported by the plugin At startup, cmp-server looks at the /home/argocd/cmp-server/plugin.yaml ConfigManagementPlugin specification file to understand how to perform the requests. Registration & Communication The repo-server needs to understand what all plugins are available to render manifests. To do this, the cmp-server sidecars will register themselves as available plugins to the argocd-repo-server by populating named socket files in the shared volume between repo-server and cmp-server. e.g.: /home/argocd/plugins/ cdk8s.sock jkcfg.sock pulumi.sock The name of the socket file will indicate the plugin name. To discover the available plugins, the repo-server will list the shared plugins directory to discover the available plugins. To communicate with a plugin, the repo-server will simply need to connect to the socket and make gRPC calls against the cmp-server listening on the other side. Discovery (Auto-selection of Tool) The plugin discovery will run in the main repo-server container. Argo CD repo-server lists the shared plugins directory and runs discover command from the specification file, whichever plugin provides a positive response first will be selected. Versioning There will be one sidecar container per version. Hence, for two different versions users will have to configure two different sidecars. Security Considerations The use of the plugin as sidecars separate from the repo-server is already a security improvement over the current v1.8 config management plugin mechanism, since the plugin tooling will no longer have access to the files of the argocd-repo-server image. However additional improvements can be made to increase security. Risks and Mitigations One issue is that currently when repositories are cloned, the repo is cloned using the same UID of the repo-server user, and so all repository files are created using that UID. This means that a command which executes in the git repository path, could traverse upwards and see/write files which are outside of the repository tree. One proposal to prevent out-of-tree access to files, is that each git repository could be cloned with unique UIDs, different from the repo-server\u2019s UID. When the cmp-server executes the tooling command to generate manifests, the command could be executed using the UID of the git repository files. e.g.: cmd := exec.Command(command, args...) cmd.SysProcAttr = &syscall.SysProcAttr{} cmd.SysProcAttr.Credential = &syscall.Credential{Uid: uid, Gid: gid} This would ensure that the command could not read or write anything out-of-tree from the repository directory. Upgrade / Downgrade Strategy The argocd-repo-server manifest will change in order to populate the argocd-cmp-server binary inside the plugin container via an init container. # An init container will copy the argocd static binary into the shared volume # so that the CMP server can become the entrypoint initContainers: - command: - cp - -n - /usr/local/bin/argocd - /var/run/argocd/argocd-cmp-server image: quay.io/argoproj/argocd:latest name: copyutil volumeMounts: - mountPath: /var/run/argocd name: var-files # var-files is a shared volume between repo-server and cmp-server which holds: # 1) socket files that repo-server uses to communicate to each plugin # 2) git repositories cloned by repo-server volumes: - emptyDir: {} name: var-files After upgrading to CMP v2, an Argo CD operator will have to make following changes, In order to install a plugin, an Argo CD operator will simply have to patch argocd-repo-server to run config management plugin container as a sidecar, with argocd-cmp-server as it\u2019s entrypoint: # A plugin is a container image which runs as a sidecar, with the execution environment # necessary to render manifests. To install a plugin, containers: - name: cdk8s command: [/var/run/argocd/argocd-cmp-server] image: docker.ui/cdk8s/cdk8s:latest volumeMounts: - mountPath: /var/run/argocd name: var-files Plugins will be configured via a ConfigManagementPlugin manifest located inside the plugin container, placed at a well-known location (e.g. /plugin.yaml). Argo CD is agnostic to the mechanism of how the plugin.yaml would be placed, but various options can be used on how to place this file, including: Baking the file into the plugin image as part of docker build Volume mapping the file through a configmap. (For more details please refer to implementation details ) Drawbacks There aren't any major drawbacks to this proposal. Also, the advantages supersede the minor learning curve of the new way of managing plugins. However following are few minor drawbacks, With addition of plugin.yaml, there will be more yamls to manage Operators need to be aware of the modified kubernetes manifests in the subsequent version. The format of the CMP manifest is a new \"contract\" that would need to adhere the usual Argo CD compatibility promises in future. Alternatives ConfigManagementPlugin as CRD. Have a CR which the human operator creates: apiVersion: argoproj.io/v1alpha1 kind: ConfigManagementPlugin metadata: name: cdk8s spec: name: cdk8s image: docker.ui/cdk8s/cdk8s:latest version: v1.0 init: command: [cdk8s, init] generate: command: [sh, -c, \"cdk8s synth && cat dist/*.yaml\"] discovery: find: - command: [find . -name main.ts] glob: \"**/*/main.ts\" check: - command: [-f ./main.ts] glob: \"main.ts\" allowConcurrency: true # enables generating multiple manifests in parallel. Something magically patches the relevant manifest to add the sidecar.","title":"Config-Management-Plugin-Enhancement"},{"location":"Kubernetes%20Notlar%C4%B1/config-management-plugin-v2/#config-management-plugin-enhancement","text":"We want to enhance config management plugin in order to improve Argo CD operator and end-user experience for using additional tools such as cdk8s, Tanka, jkcfg, QBEC, Dhall, pulumi, etc.","title":"Config Management Plugin Enhancement"},{"location":"Kubernetes%20Notlar%C4%B1/config-management-plugin-v2/#summary","text":"Currently, Argo CD provides first-class support for Helm, Kustomize, Jsonnet/YAML, and Ksonnet. The support includes: - Bundled binaries (maintainers periodically upgrade binaries) - An ability to override parameters using UI/CLI - The applications are discovered in Git repository and auto-suggested during application creation in UI - Performance optimizations. Argo CD \"knows\" when it is safe to generate manifests concurrently and takes advantage of it. We want to enhance the configuration management plugin so that it can provide similar first-class support for additional tools such as cdk8s, Tanka, jkcfg, QBEC, Dhall, pulumi, etc.","title":"Summary"},{"location":"Kubernetes%20Notlar%C4%B1/config-management-plugin-v2/#motivation","text":"The config management plugin feature should be improved to provide the same level of user experience as for the natively supported tools to the additional tools such as cdk8s, Tanka, jkcfg, QBEC, Dhall, pulumi, etc., including Argo CD operators as well as end-user experience.","title":"Motivation"},{"location":"Kubernetes%20Notlar%C4%B1/config-management-plugin-v2/#goals","text":"The goals for config management plugin enhancement are,","title":"Goals"},{"location":"Kubernetes%20Notlar%C4%B1/config-management-plugin-v2/#improve-installation-experience","text":"The current Config Management plugin installation experience requires two changes: - An entry in configManagementPlugins in the Argo CD configmap (i.e. argocd-cm) - Either an init container with a volume mount that adds a new binary into Argo CD repo server pod, or a rebuild of the argocd image, which contains the necessary tooling The problem with this approach is that the process is error-prone, manual, and requires learning from each and every Argo CD administrator. The goal is to make additional tools easily accessible for installation to Argo CD operators.","title":"Improve Installation Experience"},{"location":"Kubernetes%20Notlar%C4%B1/config-management-plugin-v2/#provide-discovery-auto-selection-of-tool","text":"For Argo CD\u2019s natively supported config management plugins (Helm, Kustomize, Ksonnet, Jsonnet), Argo CD auto-detects and selects the appropriate tool given only the path in the Git repository. This selection is based on the recognition of well-known files in the directory (e.g. Chart.yaml, kustomization.yaml, etc...). Currently, unlike natively supported tools, when a plugin is used, a user needs to explicitly specify the plugin that should be used to render the manifests. As part of the improvements to config management plugins, We want to provide the same ability to auto-select the plugin based on recognized files in the path of the git repository.","title":"Provide Discovery (Auto-selection of Tool)"},{"location":"Kubernetes%20Notlar%C4%B1/config-management-plugin-v2/#parameters-support-in-uicli","text":"Currently, configuration management plugins allow specifying only a list of environment variables via UI/CLI. We want to extend its functionality to provide a similar experience as for existing natively supported tools to additional config management tools.","title":"Parameters support in UI/CLI"},{"location":"Kubernetes%20Notlar%C4%B1/config-management-plugin-v2/#non-goals","text":"We aren't planning on changing the existing support for native plugins as of now.","title":"Non-Goals"},{"location":"Kubernetes%20Notlar%C4%B1/config-management-plugin-v2/#proposal","text":"We have drafted the solution to the problem statement as running configuration management plugin tools as sidecar in the argocd-repo-server . All it means that Argo CD Config Management Plugin 2.0 will be, - A user-supplied container image with all the necessary tooling installed in it. - It will run as a sidecar in the repo server deployment and will have shared access to the git repositories. - It will contain a CMP YAML specification file describing how to render manifests. - Its entrypoint will be a lightweight CMP API server that receives requests by the main repo-server to render manifests, based on the CMP specification file. This mechanism will provide the following benefits over the existing solution, - Plugin owners control their execution environment, packaging whatever dependent binaries required. - An Argo CD user who wants to use additional config management tools does not have to go through the hassle of building a customized argocd-repo-server in order to install required dependencies. - The plugin image will be running in a container separate from the main repo-server.","title":"Proposal"},{"location":"Kubernetes%20Notlar%C4%B1/config-management-plugin-v2/#use-cases","text":"UC1: As an Argo CD user, I would like to use first-class support provided for additional tools to generate and manage deployable kubernetes manifests UC2: As an Argo CD operator, I want to have smooth experience while installing additional tools such as cdk8s, Tanka, jkcfg, QBEC, Dhall, pulumi, etc. UC3: As a plugin owner, I want to have some control over the execution environment as I want to package whatever dependent binaries required.","title":"Use cases"},{"location":"Kubernetes%20Notlar%C4%B1/config-management-plugin-v2/#implementation-details","text":"Config Management Plugin v2.0 implementation and experience will be as,","title":"Implementation Details"},{"location":"Kubernetes%20Notlar%C4%B1/config-management-plugin-v2/#installation","text":"To install a plugin, an operator will simply patch argocd-repo-server to run config management plugin container as a sidecar, with argocd-cmp-server as it\u2019s entrypoint. Operator can use either off-the-shelf or custom built plugin image as sidecar image. # A plugin is a container image which runs as a sidecar, with the execution environment # necessary to render manifests. To install a plugin, containers: - name: cdk8s command: [/var/run/argocd/argocd-cmp-server] image: docker.ui/cdk8s/cdk8s:latest volumeMounts: - mountPath: /var/run/argocd name: var-files The argocd-cmp-server binary will be populated inside the plugin container via an init container in the argocd-repo-server, which will pre-populate a volume shared between plugins and the repo-server. # An init container will copy the argocd static binary into the shared volume # so that the CMP server can become the entrypoint initContainers: - command: - cp - -n - /usr/local/bin/argocd - /var/run/argocd/argocd-cmp-server image: quay.io/argoproj/argocd:latest name: copyutil volumeMounts: - mountPath: /var/run/argocd name: var-files # var-files is a shared volume between repo-server and cmp-server which holds: # 1) socket files that repo-server uses to communicate to each plugin # 2) git repositories cloned by repo-server volumes: - emptyDir: {} name: var-files","title":"Installation"},{"location":"Kubernetes%20Notlar%C4%B1/config-management-plugin-v2/#configuration","text":"Plugins will be configured via a ConfigManagementPlugin manifest located inside the plugin container, placed at a well-known location (e.g. /home/argocd/plugins/plugin.yaml). Argo CD is agnostic to the mechanism of how the plugin.yaml would be placed, but various options can be used on how to place this file, including: - Baking the file into the plugin image as part of docker build - Volume mapping the file through a configmap. Note that, while the ConfigManagementPlugin looks like a Kubernetes object, it is not actually a custom resource. It only follows kubernetes-style spec conventions. # metadata file is in the root and shell executor knows about it apiVersion: argoproj.io/v1alpha1 kind: ConfigManagementPlugin metadata: name: cdk8s spec: version: v1.0 init: command: [cdk8s, init] generate: command: [sh, -c, \"cdk8s synth && cat dist/*.yaml\"] discovery: find: - command: [find . -name main.ts] glob: \"**/*/main.ts\" check: - command: [-f ./main.ts] glob: \"main.ts\" allowConcurrency: true # enables generating multiple manifests in parallel.","title":"Configuration"},{"location":"Kubernetes%20Notlar%C4%B1/config-management-plugin-v2/#config-management-plugin-api-server-cmp-server","text":"The Config Management Plugin API Server (cmp-server) will be a new Argo CD component whose sole responsibility will be to execute generate commands inside the plugin environment (the sidecar container), at the request of the repo-server. The cmp-server will expose the following APIs to the repo-server, GenerateManifests(path) - returns YAML output using plugin tooling IsSupported(path) - returns whether or not the given path is supported by the plugin At startup, cmp-server looks at the /home/argocd/cmp-server/plugin.yaml ConfigManagementPlugin specification file to understand how to perform the requests.","title":"Config Management Plugin API Server (cmp-server)"},{"location":"Kubernetes%20Notlar%C4%B1/config-management-plugin-v2/#registration-communication","text":"The repo-server needs to understand what all plugins are available to render manifests. To do this, the cmp-server sidecars will register themselves as available plugins to the argocd-repo-server by populating named socket files in the shared volume between repo-server and cmp-server. e.g.: /home/argocd/plugins/ cdk8s.sock jkcfg.sock pulumi.sock The name of the socket file will indicate the plugin name. To discover the available plugins, the repo-server will list the shared plugins directory to discover the available plugins. To communicate with a plugin, the repo-server will simply need to connect to the socket and make gRPC calls against the cmp-server listening on the other side.","title":"Registration &amp; Communication"},{"location":"Kubernetes%20Notlar%C4%B1/config-management-plugin-v2/#discovery-auto-selection-of-tool","text":"The plugin discovery will run in the main repo-server container. Argo CD repo-server lists the shared plugins directory and runs discover command from the specification file, whichever plugin provides a positive response first will be selected.","title":"Discovery (Auto-selection of Tool)"},{"location":"Kubernetes%20Notlar%C4%B1/config-management-plugin-v2/#versioning","text":"There will be one sidecar container per version. Hence, for two different versions users will have to configure two different sidecars.","title":"Versioning"},{"location":"Kubernetes%20Notlar%C4%B1/config-management-plugin-v2/#security-considerations","text":"The use of the plugin as sidecars separate from the repo-server is already a security improvement over the current v1.8 config management plugin mechanism, since the plugin tooling will no longer have access to the files of the argocd-repo-server image. However additional improvements can be made to increase security.","title":"Security Considerations"},{"location":"Kubernetes%20Notlar%C4%B1/config-management-plugin-v2/#risks-and-mitigations","text":"One issue is that currently when repositories are cloned, the repo is cloned using the same UID of the repo-server user, and so all repository files are created using that UID. This means that a command which executes in the git repository path, could traverse upwards and see/write files which are outside of the repository tree. One proposal to prevent out-of-tree access to files, is that each git repository could be cloned with unique UIDs, different from the repo-server\u2019s UID. When the cmp-server executes the tooling command to generate manifests, the command could be executed using the UID of the git repository files. e.g.: cmd := exec.Command(command, args...) cmd.SysProcAttr = &syscall.SysProcAttr{} cmd.SysProcAttr.Credential = &syscall.Credential{Uid: uid, Gid: gid} This would ensure that the command could not read or write anything out-of-tree from the repository directory.","title":"Risks and Mitigations"},{"location":"Kubernetes%20Notlar%C4%B1/config-management-plugin-v2/#upgrade-downgrade-strategy","text":"The argocd-repo-server manifest will change in order to populate the argocd-cmp-server binary inside the plugin container via an init container. # An init container will copy the argocd static binary into the shared volume # so that the CMP server can become the entrypoint initContainers: - command: - cp - -n - /usr/local/bin/argocd - /var/run/argocd/argocd-cmp-server image: quay.io/argoproj/argocd:latest name: copyutil volumeMounts: - mountPath: /var/run/argocd name: var-files # var-files is a shared volume between repo-server and cmp-server which holds: # 1) socket files that repo-server uses to communicate to each plugin # 2) git repositories cloned by repo-server volumes: - emptyDir: {} name: var-files After upgrading to CMP v2, an Argo CD operator will have to make following changes, In order to install a plugin, an Argo CD operator will simply have to patch argocd-repo-server to run config management plugin container as a sidecar, with argocd-cmp-server as it\u2019s entrypoint: # A plugin is a container image which runs as a sidecar, with the execution environment # necessary to render manifests. To install a plugin, containers: - name: cdk8s command: [/var/run/argocd/argocd-cmp-server] image: docker.ui/cdk8s/cdk8s:latest volumeMounts: - mountPath: /var/run/argocd name: var-files Plugins will be configured via a ConfigManagementPlugin manifest located inside the plugin container, placed at a well-known location (e.g. /plugin.yaml). Argo CD is agnostic to the mechanism of how the plugin.yaml would be placed, but various options can be used on how to place this file, including: Baking the file into the plugin image as part of docker build Volume mapping the file through a configmap. (For more details please refer to implementation details )","title":"Upgrade / Downgrade Strategy"},{"location":"Kubernetes%20Notlar%C4%B1/config-management-plugin-v2/#drawbacks","text":"There aren't any major drawbacks to this proposal. Also, the advantages supersede the minor learning curve of the new way of managing plugins. However following are few minor drawbacks, With addition of plugin.yaml, there will be more yamls to manage Operators need to be aware of the modified kubernetes manifests in the subsequent version. The format of the CMP manifest is a new \"contract\" that would need to adhere the usual Argo CD compatibility promises in future.","title":"Drawbacks"},{"location":"Kubernetes%20Notlar%C4%B1/config-management-plugin-v2/#alternatives","text":"ConfigManagementPlugin as CRD. Have a CR which the human operator creates: apiVersion: argoproj.io/v1alpha1 kind: ConfigManagementPlugin metadata: name: cdk8s spec: name: cdk8s image: docker.ui/cdk8s/cdk8s:latest version: v1.0 init: command: [cdk8s, init] generate: command: [sh, -c, \"cdk8s synth && cat dist/*.yaml\"] discovery: find: - command: [find . -name main.ts] glob: \"**/*/main.ts\" check: - command: [-f ./main.ts] glob: \"main.ts\" allowConcurrency: true # enables generating multiple manifests in parallel. Something magically patches the relevant manifest to add the sidecar.","title":"Alternatives"},{"location":"Kubernetes%20Notlar%C4%B1/headless-argocd/","text":"title: Neat-enhancement-idea authors: - \"@alexmt\" sponsors: - TBD reviewers: - \"@jessesuen\" - TBD approvers: - \"@jessesuen\" - TBD creation-date: 2020-05-01 last-updated: 2020-05-01 Neat Enhancement Idea Support \"disabling\" multi-tenancy features by introducing Headless Argo CD. Summary There are two main group of GitOps users: Application developers - engineers who leverages Kubernetes to run applications. Cluster administrators - engineers who manage and support Kubernetes clusters for the organization. Argo CD is a perfect fit for application developers thanks to its multi-tenancy features. Instead of running a separate Argo CD instance for each team, it is possible to run on the instance and leverage features like SSO, RBAC, and Web user interface. However, this is not the case for cluster administrators. Administrators prefer to rely on Kubernetes RBAC and view SSO and Argo CD RBAC as an obstacle and security threat. SSO, RBAC, and UI/API are totally optional and can be disabled but it requires additional configuration and learning. Motivation It is proposed to introduce officially supported Headless Argo CD that encapsulates changes required to disable multi-tenancy features and provide a seamless experience for cluster administrators (or any other user who don't need multi-tenancy). Goals The goals of \"Headless Argo CD\" are: Provide an easy way to deploy Argo CD without API/UI The end-user should be able to install required components using a single kubectl apply command without following any additional instructions. Provide an easy way to use and manage Headless Argo CD The Headless Argo CD should provide a simple way to view and manage Argo CD applications using CLI/UI. The access control should be enforced by Kubernetes RBAC only. Easy transition from Headless to non-Headless Argo CD It is a common case when the Argo CD adopter wants to start small and then expand Argo CD to the whole organization. It should be easy to \"upgrade\" headless to full Argo CD installation. Non-Goals Not modified Argo CD The Headless Argo CD is not modified Argo CD. It is Argo CD distribution that missing UI/API and CLI that provides commands for Argo CD admin. Not deprecating existing operational methods The Headless Argo CD is not intended to deprecate any of the existing operational methods. Proposal Headless Installation Manifests In order to simplify installation of Argo CD without API we need introduce headless/install.yaml in manifests directory. The installation manifests should include only non HA controller, repo-server, Redis components, and RBAC. Headless CLI Without the API server, users won't be able to take advantage of Argo CD UI and argocd CLI so the user experience won't be complete. To fill that gap we need to change the argocd CLI that and support talking directly to Kubernetes without requiring Argo CD API Server. The argo-cd#6361 demonstrates required changes: Adds --headless flag to argocd commands If the --headless flag is set to true then pre-run function that starts \"local\" Argo CD API server and points CLI to locally running instance Finally on-demand port-forwards to Redis and repo server. The user should be able to store --headless flag in config in order to avoid specifying the flag for every command. It is proposed to use argocd login --headless to generate \"headless\" config. Local UI In addition to exposing CLI commands the PR introduces argocd admin dashboard command. The new command starts API server locally and exposes Argo CD UI locally. In order to make this possible the static assets have been embedded into Argo CD binary. Merge Argo CD Util The potential users of \"headless\" mode will benefit from argocd-util commands. The experience won't be smooth since they will need to switch back and forth between argocd and argocd-util . Given that we still have not finalized how users are supposed to get argocd-util binary (https://github.com/argoproj/argo-cd/issues/5307) it is proposed to deprecate argocd-util and merge in into argocd CLI under admin subcommand: argocd admin app generate-spec guestbook --repo https://github.com/argoproj/argocd-example-apps Use cases Add a list of detailed use cases this enhancement intends to take care of. Use case 1: As an Argo CD administrator, I would like to manage cluster resources using Argo CD without exposing API/UI outside of the cluster. Use case 2: As an Argo CD administrator, I would like to use Argo CD CLI commands and user interface to manage Argo CD applications/settings using only kubeconf file and without Argo CD API access. Security Considerations The Headless CLI/UI disables built-in Argo CD authentication and relies only on Kubernetes RBAC. So if the user will be able to make the same change using Headless CLI as using kubectl. Risks and Mitigations TBD Upgrade / Downgrade Strategy Switching to and from Argo CD Headless does not modify any persistent data or settings. So upgrade/downgrade should be seamless by just applying the right manifest file. Drawbacks Embedding static resources into the binary increases it's size by ~20 mb. The image size is the same. Alternatives Re-invent GitOps Agent CLI experience and don't re-use Argo CD.","title":"Headless argocd"},{"location":"Kubernetes%20Notlar%C4%B1/headless-argocd/#neat-enhancement-idea","text":"Support \"disabling\" multi-tenancy features by introducing Headless Argo CD.","title":"Neat Enhancement Idea"},{"location":"Kubernetes%20Notlar%C4%B1/headless-argocd/#summary","text":"There are two main group of GitOps users: Application developers - engineers who leverages Kubernetes to run applications. Cluster administrators - engineers who manage and support Kubernetes clusters for the organization. Argo CD is a perfect fit for application developers thanks to its multi-tenancy features. Instead of running a separate Argo CD instance for each team, it is possible to run on the instance and leverage features like SSO, RBAC, and Web user interface. However, this is not the case for cluster administrators. Administrators prefer to rely on Kubernetes RBAC and view SSO and Argo CD RBAC as an obstacle and security threat. SSO, RBAC, and UI/API are totally optional and can be disabled but it requires additional configuration and learning.","title":"Summary"},{"location":"Kubernetes%20Notlar%C4%B1/headless-argocd/#motivation","text":"It is proposed to introduce officially supported Headless Argo CD that encapsulates changes required to disable multi-tenancy features and provide a seamless experience for cluster administrators (or any other user who don't need multi-tenancy).","title":"Motivation"},{"location":"Kubernetes%20Notlar%C4%B1/headless-argocd/#goals","text":"The goals of \"Headless Argo CD\" are:","title":"Goals"},{"location":"Kubernetes%20Notlar%C4%B1/headless-argocd/#provide-an-easy-way-to-deploy-argo-cd-without-apiui","text":"The end-user should be able to install required components using a single kubectl apply command without following any additional instructions.","title":"Provide an easy way to deploy Argo CD without API/UI"},{"location":"Kubernetes%20Notlar%C4%B1/headless-argocd/#provide-an-easy-way-to-use-and-manage-headless-argo-cd","text":"The Headless Argo CD should provide a simple way to view and manage Argo CD applications using CLI/UI. The access control should be enforced by Kubernetes RBAC only.","title":"Provide an easy way to use and manage Headless Argo CD"},{"location":"Kubernetes%20Notlar%C4%B1/headless-argocd/#easy-transition-from-headless-to-non-headless-argo-cd","text":"It is a common case when the Argo CD adopter wants to start small and then expand Argo CD to the whole organization. It should be easy to \"upgrade\" headless to full Argo CD installation.","title":"Easy transition from Headless to non-Headless Argo CD"},{"location":"Kubernetes%20Notlar%C4%B1/headless-argocd/#non-goals","text":"","title":"Non-Goals"},{"location":"Kubernetes%20Notlar%C4%B1/headless-argocd/#not-modified-argo-cd","text":"The Headless Argo CD is not modified Argo CD. It is Argo CD distribution that missing UI/API and CLI that provides commands for Argo CD admin.","title":"Not modified Argo CD"},{"location":"Kubernetes%20Notlar%C4%B1/headless-argocd/#not-deprecating-existing-operational-methods","text":"The Headless Argo CD is not intended to deprecate any of the existing operational methods.","title":"Not deprecating existing operational methods"},{"location":"Kubernetes%20Notlar%C4%B1/headless-argocd/#proposal","text":"","title":"Proposal"},{"location":"Kubernetes%20Notlar%C4%B1/headless-argocd/#headless-installation-manifests","text":"In order to simplify installation of Argo CD without API we need introduce headless/install.yaml in manifests directory. The installation manifests should include only non HA controller, repo-server, Redis components, and RBAC.","title":"Headless Installation Manifests"},{"location":"Kubernetes%20Notlar%C4%B1/headless-argocd/#headless-cli","text":"Without the API server, users won't be able to take advantage of Argo CD UI and argocd CLI so the user experience won't be complete. To fill that gap we need to change the argocd CLI that and support talking directly to Kubernetes without requiring Argo CD API Server. The argo-cd#6361 demonstrates required changes: Adds --headless flag to argocd commands If the --headless flag is set to true then pre-run function that starts \"local\" Argo CD API server and points CLI to locally running instance Finally on-demand port-forwards to Redis and repo server. The user should be able to store --headless flag in config in order to avoid specifying the flag for every command. It is proposed to use argocd login --headless to generate \"headless\" config.","title":"Headless CLI"},{"location":"Kubernetes%20Notlar%C4%B1/headless-argocd/#local-ui","text":"In addition to exposing CLI commands the PR introduces argocd admin dashboard command. The new command starts API server locally and exposes Argo CD UI locally. In order to make this possible the static assets have been embedded into Argo CD binary.","title":"Local UI"},{"location":"Kubernetes%20Notlar%C4%B1/headless-argocd/#merge-argo-cd-util","text":"The potential users of \"headless\" mode will benefit from argocd-util commands. The experience won't be smooth since they will need to switch back and forth between argocd and argocd-util . Given that we still have not finalized how users are supposed to get argocd-util binary (https://github.com/argoproj/argo-cd/issues/5307) it is proposed to deprecate argocd-util and merge in into argocd CLI under admin subcommand: argocd admin app generate-spec guestbook --repo https://github.com/argoproj/argocd-example-apps","title":"Merge Argo CD Util"},{"location":"Kubernetes%20Notlar%C4%B1/headless-argocd/#use-cases","text":"Add a list of detailed use cases this enhancement intends to take care of.","title":"Use cases"},{"location":"Kubernetes%20Notlar%C4%B1/headless-argocd/#use-case-1","text":"As an Argo CD administrator, I would like to manage cluster resources using Argo CD without exposing API/UI outside of the cluster.","title":"Use case 1:"},{"location":"Kubernetes%20Notlar%C4%B1/headless-argocd/#use-case-2","text":"As an Argo CD administrator, I would like to use Argo CD CLI commands and user interface to manage Argo CD applications/settings using only kubeconf file and without Argo CD API access.","title":"Use case 2:"},{"location":"Kubernetes%20Notlar%C4%B1/headless-argocd/#security-considerations","text":"The Headless CLI/UI disables built-in Argo CD authentication and relies only on Kubernetes RBAC. So if the user will be able to make the same change using Headless CLI as using kubectl.","title":"Security Considerations"},{"location":"Kubernetes%20Notlar%C4%B1/headless-argocd/#risks-and-mitigations","text":"TBD","title":"Risks and Mitigations"},{"location":"Kubernetes%20Notlar%C4%B1/headless-argocd/#upgrade-downgrade-strategy","text":"Switching to and from Argo CD Headless does not modify any persistent data or settings. So upgrade/downgrade should be seamless by just applying the right manifest file.","title":"Upgrade / Downgrade Strategy"},{"location":"Kubernetes%20Notlar%C4%B1/headless-argocd/#drawbacks","text":"Embedding static resources into the binary increases it's size by ~20 mb. The image size is the same.","title":"Drawbacks"},{"location":"Kubernetes%20Notlar%C4%B1/headless-argocd/#alternatives","text":"Re-invent GitOps Agent CLI experience and don't re-use Argo CD.","title":"Alternatives"},{"location":"Kubernetes%20Notlar%C4%B1/project-repos-and-clusters/","text":"title: Neat-enhancement-idea authors: - \"@alexmt\" sponsors: - TBD reviewers: - \"@jessesuen\" - TBD approvers: - \"@jessesuen\" - TBD creation-date: 2020-04-19 last-updated: 2020-04-19 Neat Enhancement Idea Support project scoped Repositories and Clusters to enable self-service end-users onboarding. Summary The Argo CD has two type of users: Administrators who configure the Argo CD and manage the Argo CD projects. Developers who use Argo CD to manage resources in the Kubernetes clusters. These two roles enable sharing on the Argo CD instance in a multi-tenant environment. Typically the developer requests a new project from an administrator. The administrator creates the project, defines which repositories can and clusters can be used within the project which concludes the onboarding. The problem is that list of repositories and clusters are often not known during the onboarding process. Developers get it later and have to again contact an administrator, somehow share repo/cluster credentials. This back and forth process takes time and creates friction. We want to streamline the process of adding repositories and clusters to the project and make it self-service. The Argo CD admins should be able to optionally enable self onboarding of repositories/clusters for some projects. Motivation As long as the developer has the required credentials he/she should be able to add repository/cluster to the project without involving the administrator. To archive it, we are proposing to introduce project scoped repositories and clusters. Goals The goals of project scoped repositories and clusters are: Allow Self-Registering Repositories/Clusters in a Project Developer should be able to add a repository/cluster into the project without asking help from Argo CD administrator. Non-Goals Simplify Management of Shared Repositories/Clusters in a Project The repositories and clusters that can be used across multiple projects still have to be managed by Argo CD administrator. Proposal Project scoped repository/cluster The proposal is to introduce project scoped clusters and repositories that can be managed by a developer who has access to the project. The only difference of project scoped repository/cluster is that it has project field with the project name it belongs to. Both repositories and clusters are stored as Kubernetes Secrets, so a new field could be stored as a Secret data key: apiVersion: v1 kind: Secret metadata: name: argocd-example-apps labels: argocd.argoproj.io/secret-type: repository type: Opaque stringData: project: my-project1 # new project field name: argocd-example-apps url: https://github.com/argoproj/argocd-example-apps.git username: **** password: **** The project scoped repository/cluster is automatically allowed in the project. This enables developers to allow new cluster/repository without modifying the project. The project scoped repository/cluster still can be used in other project but it has to be allowed by admin (as normal repository/cluster). If another team wants to add the same repository/cluster into a different project they would have to ask admin. Project RBAC Changes The organization still might want to enforce certain rules so developers won't get permission to add a project-specific repository/cluster by default. The administrator might use RBAC to control access to the project scoped repositories cluster. The access to project scope actions will be checked using <projectName>/<name> pattern. For example, to allow users to add project scoped repositories admin would have to add the following RBAC rules: p, proj:my-project:admin, repositories, create, my-project/*, allow p, proj:my-project:admin, repositories, delete, my-project/*, allow p, proj:my-project:admin, repositories, update, my-project/*, allow This provides extra flexibility so that admin can have stricter rules. e.g.: p, proj:my-project:admin, repositories, update, my-project/\"https://github.my-company.com/*\", allow UI/CLI Changes Both User interface and CLI should get ability to optionally specify project. If project is specified than cluster/repository is considered project scoped: argocd repo add --name stable https://charts.helm.sh/stable --type helm --project my-project Use cases Add a list of detailed use cases this enhancement intends to take care of. Use case 1: As a developer, I would like to register credentials of a Git repository I own so I can deploy manifests stored in that repository. Use case 2: As a developer, I would like to register credentials of a Kubernetes cluster so I can manage resources in that cluster. Implementation Details/Notes/Constraints [optional] As of v2.0.1 Argo CD stores Repository non-sensitive metadata in argocd-cm ConfigMap. This is going to change in https://github.com/argoproj/argo-cd/issues/5436. So we would have to wait for #5436 implementation. Detailed examples Security Considerations The security considerations are explained in Project RBAC Changes section. Risks and Mitigations Deverlopers Might Overload Argo CD The developers are typically not responsible for Argo CD health and don't have access to Argo CD metrics. So adding too many clusters might overload Argo CD. Two improvements are proposed to mitigate that risk: Improved Cluster Metrics The existing metrics should be improved so that administrators could quickly discover if the project \"has\" too many clusters and easily discover who added the cluster: Add project tag to existing cluster metrics: clustercollector.go . Document how administrator can leverage metrics to configure limits per project and get notifications when the limit is exceeded. Add owner field to the cluster (and repository for consistency ) and use it to store username of the user who added cluster/repository. The administrator can use the owner field to contact the person who added the cluster and exceeded the limit. Project Sharding It should be possible to automatically assign project scoped clusters to the specific clusters shard. This way admin can isolate large projects from each other and limit the blast radius. Upgrade / Downgrade Strategy In case of rollback to the previous version, the project scoped clusters/repositories will be treated as normal (non-scoped) clusters/repositories. So it is safe to rollback and then roll forward. Open Issues If the same cluster or repository required in multiple projects that there is no way to configure it without involving Argo CD admin. The end-user would still have to reach out to the administrator and request Argo CD config changes. Alternatives Don't introduce first-class support for this feature and instead create optional CRD that manages clusters and repositories. In this case, the first-class support seems like a very natural fit into the existing design.","title":"Project repos and clusters"},{"location":"Kubernetes%20Notlar%C4%B1/project-repos-and-clusters/#neat-enhancement-idea","text":"Support project scoped Repositories and Clusters to enable self-service end-users onboarding.","title":"Neat Enhancement Idea"},{"location":"Kubernetes%20Notlar%C4%B1/project-repos-and-clusters/#summary","text":"The Argo CD has two type of users: Administrators who configure the Argo CD and manage the Argo CD projects. Developers who use Argo CD to manage resources in the Kubernetes clusters. These two roles enable sharing on the Argo CD instance in a multi-tenant environment. Typically the developer requests a new project from an administrator. The administrator creates the project, defines which repositories can and clusters can be used within the project which concludes the onboarding. The problem is that list of repositories and clusters are often not known during the onboarding process. Developers get it later and have to again contact an administrator, somehow share repo/cluster credentials. This back and forth process takes time and creates friction. We want to streamline the process of adding repositories and clusters to the project and make it self-service. The Argo CD admins should be able to optionally enable self onboarding of repositories/clusters for some projects.","title":"Summary"},{"location":"Kubernetes%20Notlar%C4%B1/project-repos-and-clusters/#motivation","text":"As long as the developer has the required credentials he/she should be able to add repository/cluster to the project without involving the administrator. To archive it, we are proposing to introduce project scoped repositories and clusters.","title":"Motivation"},{"location":"Kubernetes%20Notlar%C4%B1/project-repos-and-clusters/#goals","text":"The goals of project scoped repositories and clusters are:","title":"Goals"},{"location":"Kubernetes%20Notlar%C4%B1/project-repos-and-clusters/#allow-self-registering-repositoriesclusters-in-a-project","text":"Developer should be able to add a repository/cluster into the project without asking help from Argo CD administrator.","title":"Allow Self-Registering Repositories/Clusters in a Project"},{"location":"Kubernetes%20Notlar%C4%B1/project-repos-and-clusters/#non-goals","text":"","title":"Non-Goals"},{"location":"Kubernetes%20Notlar%C4%B1/project-repos-and-clusters/#simplify-management-of-shared-repositoriesclusters-in-a-project","text":"The repositories and clusters that can be used across multiple projects still have to be managed by Argo CD administrator.","title":"Simplify Management of Shared Repositories/Clusters in a Project"},{"location":"Kubernetes%20Notlar%C4%B1/project-repos-and-clusters/#proposal","text":"","title":"Proposal"},{"location":"Kubernetes%20Notlar%C4%B1/project-repos-and-clusters/#project-scoped-repositorycluster","text":"The proposal is to introduce project scoped clusters and repositories that can be managed by a developer who has access to the project. The only difference of project scoped repository/cluster is that it has project field with the project name it belongs to. Both repositories and clusters are stored as Kubernetes Secrets, so a new field could be stored as a Secret data key: apiVersion: v1 kind: Secret metadata: name: argocd-example-apps labels: argocd.argoproj.io/secret-type: repository type: Opaque stringData: project: my-project1 # new project field name: argocd-example-apps url: https://github.com/argoproj/argocd-example-apps.git username: **** password: **** The project scoped repository/cluster is automatically allowed in the project. This enables developers to allow new cluster/repository without modifying the project. The project scoped repository/cluster still can be used in other project but it has to be allowed by admin (as normal repository/cluster). If another team wants to add the same repository/cluster into a different project they would have to ask admin.","title":"Project scoped repository/cluster"},{"location":"Kubernetes%20Notlar%C4%B1/project-repos-and-clusters/#project-rbac-changes","text":"The organization still might want to enforce certain rules so developers won't get permission to add a project-specific repository/cluster by default. The administrator might use RBAC to control access to the project scoped repositories cluster. The access to project scope actions will be checked using <projectName>/<name> pattern. For example, to allow users to add project scoped repositories admin would have to add the following RBAC rules: p, proj:my-project:admin, repositories, create, my-project/*, allow p, proj:my-project:admin, repositories, delete, my-project/*, allow p, proj:my-project:admin, repositories, update, my-project/*, allow This provides extra flexibility so that admin can have stricter rules. e.g.: p, proj:my-project:admin, repositories, update, my-project/\"https://github.my-company.com/*\", allow","title":"Project RBAC Changes"},{"location":"Kubernetes%20Notlar%C4%B1/project-repos-and-clusters/#uicli-changes","text":"Both User interface and CLI should get ability to optionally specify project. If project is specified than cluster/repository is considered project scoped: argocd repo add --name stable https://charts.helm.sh/stable --type helm --project my-project","title":"UI/CLI Changes"},{"location":"Kubernetes%20Notlar%C4%B1/project-repos-and-clusters/#use-cases","text":"Add a list of detailed use cases this enhancement intends to take care of.","title":"Use cases"},{"location":"Kubernetes%20Notlar%C4%B1/project-repos-and-clusters/#use-case-1","text":"As a developer, I would like to register credentials of a Git repository I own so I can deploy manifests stored in that repository.","title":"Use case 1:"},{"location":"Kubernetes%20Notlar%C4%B1/project-repos-and-clusters/#use-case-2","text":"As a developer, I would like to register credentials of a Kubernetes cluster so I can manage resources in that cluster.","title":"Use case 2:"},{"location":"Kubernetes%20Notlar%C4%B1/project-repos-and-clusters/#implementation-detailsnotesconstraints-optional","text":"As of v2.0.1 Argo CD stores Repository non-sensitive metadata in argocd-cm ConfigMap. This is going to change in https://github.com/argoproj/argo-cd/issues/5436. So we would have to wait for #5436 implementation.","title":"Implementation Details/Notes/Constraints [optional]"},{"location":"Kubernetes%20Notlar%C4%B1/project-repos-and-clusters/#detailed-examples","text":"","title":"Detailed examples"},{"location":"Kubernetes%20Notlar%C4%B1/project-repos-and-clusters/#security-considerations","text":"The security considerations are explained in Project RBAC Changes section.","title":"Security Considerations"},{"location":"Kubernetes%20Notlar%C4%B1/project-repos-and-clusters/#risks-and-mitigations","text":"","title":"Risks and Mitigations"},{"location":"Kubernetes%20Notlar%C4%B1/project-repos-and-clusters/#deverlopers-might-overload-argo-cd","text":"The developers are typically not responsible for Argo CD health and don't have access to Argo CD metrics. So adding too many clusters might overload Argo CD. Two improvements are proposed to mitigate that risk: Improved Cluster Metrics The existing metrics should be improved so that administrators could quickly discover if the project \"has\" too many clusters and easily discover who added the cluster: Add project tag to existing cluster metrics: clustercollector.go . Document how administrator can leverage metrics to configure limits per project and get notifications when the limit is exceeded. Add owner field to the cluster (and repository for consistency ) and use it to store username of the user who added cluster/repository. The administrator can use the owner field to contact the person who added the cluster and exceeded the limit. Project Sharding It should be possible to automatically assign project scoped clusters to the specific clusters shard. This way admin can isolate large projects from each other and limit the blast radius.","title":"Deverlopers Might Overload Argo CD"},{"location":"Kubernetes%20Notlar%C4%B1/project-repos-and-clusters/#upgrade-downgrade-strategy","text":"In case of rollback to the previous version, the project scoped clusters/repositories will be treated as normal (non-scoped) clusters/repositories. So it is safe to rollback and then roll forward.","title":"Upgrade / Downgrade Strategy"},{"location":"Kubernetes%20Notlar%C4%B1/project-repos-and-clusters/#open-issues","text":"If the same cluster or repository required in multiple projects that there is no way to configure it without involving Argo CD admin. The end-user would still have to reach out to the administrator and request Argo CD config changes.","title":"Open Issues"},{"location":"Kubernetes%20Notlar%C4%B1/project-repos-and-clusters/#alternatives","text":"Don't introduce first-class support for this feature and instead create optional CRD that manages clusters and repositories. In this case, the first-class support seems like a very natural fit into the existing design.","title":"Alternatives"},{"location":"Linux%20Notlar%C4%B1/001-proposal-template/","text":"Linux Server Kurulumu This is the title of the enhancement. Keep it simple and descriptive. A good title can help communicate what the enhancement is and should be considered as part of any review. Open Questions [optional] This is where to call out areas of the design that require closure before deciding to implement the design. Summary The Summary is required for producing accurate user-focused documentation such as release notes or a development roadmap. It should be possible to collect this information before implementation begins in order to avoid requiring implementors to split their attention between writing release notes and implementing the feature itself. Before you get started with this document, please feel free to have a conversation on this with the maintainers/community on Github that would help drive a more organized thought process for the formal proposal here. Motivation This section is for explicitly listing the motivation, goals and non-goals of this proposal. Describe why the change is important and the benefits to users. Goals List the specific goals of the proposal and their measurable results. How will we know that this has succeeded? Non-Goals What is out of scope for this proposal? Listing non-goals helps to focus discussion and make progress. Proposal This is where we get down to details of what the proposal is about. Use cases Add a list of detailed use cases this enhancement intends to take care of. Use case 1: As a user, I would like to understand the drift. (This is an example) Use case 2: As a user, I would like to take an action on the deviation/drift. (This is an example) Implementation Details/Notes/Constraints [optional] What are the caveats to the implementation? What are some important details that didn't come across above. Go in to as much detail as necessary here. This might be a good place to talk about core concepts and how they relate. You may have a work-in-progress Pull Request to demonstrate the functioning of the enhancement you are proposing. Detailed examples Security Considerations How does this proposal impact the security aspects of Argo CD workloads ? Are there any unresolved follow-ups that need to be done to make the enhancement more robust ? Risks and Mitigations What are the risks of this proposal and how do we mitigate. Think broadly. For example, consider both security and how this will impact the larger Kubernetes ecosystem. Consider including folks that also work outside your immediate sub-project. Upgrade / Downgrade Strategy If applicable, how will the component be upgraded and downgraded? Make sure this is in the test plan. Consider the following in developing an upgrade/downgrade strategy for this enhancement: What changes (in invocations, configurations, API use, etc.) is an existing cluster required to make on upgrade in order to keep previous behavior? What changes (in invocations, configurations, API use, etc.) is an existing cluster required to make on upgrade in order to make use of the enhancement? Drawbacks The idea is to find the best form of an argument why this enhancement should not be implemented. Alternatives Similar to the Drawbacks section the Alternatives section is used to highlight and record other possible approaches to delivering the value proposed by an enhancement.","title":"Neat-enhancement-idea"},{"location":"Linux%20Notlar%C4%B1/001-proposal-template/#linux-server-kurulumu","text":"This is the title of the enhancement. Keep it simple and descriptive. A good title can help communicate what the enhancement is and should be considered as part of any review.","title":"Linux Server Kurulumu"},{"location":"Linux%20Notlar%C4%B1/001-proposal-template/#open-questions-optional","text":"This is where to call out areas of the design that require closure before deciding to implement the design.","title":"Open Questions [optional]"},{"location":"Linux%20Notlar%C4%B1/001-proposal-template/#summary","text":"The Summary is required for producing accurate user-focused documentation such as release notes or a development roadmap. It should be possible to collect this information before implementation begins in order to avoid requiring implementors to split their attention between writing release notes and implementing the feature itself. Before you get started with this document, please feel free to have a conversation on this with the maintainers/community on Github that would help drive a more organized thought process for the formal proposal here.","title":"Summary"},{"location":"Linux%20Notlar%C4%B1/001-proposal-template/#motivation","text":"This section is for explicitly listing the motivation, goals and non-goals of this proposal. Describe why the change is important and the benefits to users.","title":"Motivation"},{"location":"Linux%20Notlar%C4%B1/001-proposal-template/#goals","text":"List the specific goals of the proposal and their measurable results. How will we know that this has succeeded?","title":"Goals"},{"location":"Linux%20Notlar%C4%B1/001-proposal-template/#non-goals","text":"What is out of scope for this proposal? Listing non-goals helps to focus discussion and make progress.","title":"Non-Goals"},{"location":"Linux%20Notlar%C4%B1/001-proposal-template/#proposal","text":"This is where we get down to details of what the proposal is about.","title":"Proposal"},{"location":"Linux%20Notlar%C4%B1/001-proposal-template/#use-cases","text":"Add a list of detailed use cases this enhancement intends to take care of.","title":"Use cases"},{"location":"Linux%20Notlar%C4%B1/001-proposal-template/#use-case-1","text":"As a user, I would like to understand the drift. (This is an example)","title":"Use case 1:"},{"location":"Linux%20Notlar%C4%B1/001-proposal-template/#use-case-2","text":"As a user, I would like to take an action on the deviation/drift. (This is an example)","title":"Use case 2:"},{"location":"Linux%20Notlar%C4%B1/001-proposal-template/#implementation-detailsnotesconstraints-optional","text":"What are the caveats to the implementation? What are some important details that didn't come across above. Go in to as much detail as necessary here. This might be a good place to talk about core concepts and how they relate. You may have a work-in-progress Pull Request to demonstrate the functioning of the enhancement you are proposing.","title":"Implementation Details/Notes/Constraints [optional]"},{"location":"Linux%20Notlar%C4%B1/001-proposal-template/#detailed-examples","text":"","title":"Detailed examples"},{"location":"Linux%20Notlar%C4%B1/001-proposal-template/#security-considerations","text":"How does this proposal impact the security aspects of Argo CD workloads ? Are there any unresolved follow-ups that need to be done to make the enhancement more robust ?","title":"Security Considerations"},{"location":"Linux%20Notlar%C4%B1/001-proposal-template/#risks-and-mitigations","text":"What are the risks of this proposal and how do we mitigate. Think broadly. For example, consider both security and how this will impact the larger Kubernetes ecosystem. Consider including folks that also work outside your immediate sub-project.","title":"Risks and Mitigations"},{"location":"Linux%20Notlar%C4%B1/001-proposal-template/#upgrade-downgrade-strategy","text":"If applicable, how will the component be upgraded and downgraded? Make sure this is in the test plan. Consider the following in developing an upgrade/downgrade strategy for this enhancement: What changes (in invocations, configurations, API use, etc.) is an existing cluster required to make on upgrade in order to keep previous behavior? What changes (in invocations, configurations, API use, etc.) is an existing cluster required to make on upgrade in order to make use of the enhancement?","title":"Upgrade / Downgrade Strategy"},{"location":"Linux%20Notlar%C4%B1/001-proposal-template/#drawbacks","text":"The idea is to find the best form of an argument why this enhancement should not be implemented.","title":"Drawbacks"},{"location":"Linux%20Notlar%C4%B1/001-proposal-template/#alternatives","text":"Similar to the Drawbacks section the Alternatives section is used to highlight and record other possible approaches to delivering the value proposed by an enhancement.","title":"Alternatives"},{"location":"Linux%20Notlar%C4%B1/002-ui-extensions/","text":"Argo CD Extensions Summary This proposal is to provide a mechanism to extend Argo CD such that it can provide resource-specific visualizations, capabilities and interactions in the following ways: Richer and context-sensitive UI components can be displayed in the user interface about custom resources. Custom health checks can be configured to assess the health of the resource. Custom actions could be performed to manipulate resources in predefined ways. Motivation Argo CD is commonly used as a dashboard to Kubernetes applications. The current UI is limited in that it only displays very general information about Kubernetes objects. Any special visualizations can currently only be done for native Kubernetes kinds. For custom resources, Argo CD does not by default have any special handling or understanding of CRs, such as how to assess the health of the object or visualizations. When examining a resource, a user can only see a YAML view of the object, which is not helpful unless they are familiar with the object's spec and status information. Note that Argo CD does currently have a resource customizations feature, which allows operators to define health checks and actions via lua scripts in the argocd-cm ConfigMap. However, the current mechanism of configuring resource customizations is difficult and highly error prone. This proposal would allow operators to more easily configure Argo CD to understand custom resources, as well as provide more powerful visualization of objects. Use cases Use case 1: As a user, I would like to see visual information about my Rollout without having to use the CLI or otherwise leave Argo CD. Use case 2: As an operator, I would like to configure Argo CD to be able to assess the health of a custom resource based on its status. Use case 3: As an operator, I would like to configure Argo CD to perform pre-defined actions (object mutations) on a custom resource, for example restarting a Rollout. Goals Enable new visualizations in the UI for resources that do not have baked-in support Extensions can be configured by operators at runtime, without a feature being built directly into Argo CD, and with no need to recompile UI code. Extensions should be easy to develop and install. Loose coupling between Argo CD and extensions. Replace current resource customizations in argocd-cm ConfigMap with extensions Proposal A new ArgoCDExtension CRD would be introduced which will allow operators configure Argo CD to understand how to handle and visualize custom resources. Visualizing a object requires javascript to render the object, and health/actions require lua scripts. Aas such, the extension CR would need to point to some location where the javascript/lua code would be hosted. It is proposed that a git repository be used to contain the javascript code, as well as the lua scripts necessary to assess health or perform actions of a resource. ArgoCDExtension CRD In the most simplest form, an Argo CD extension could simply be a pointer to a git repository at a revision: kind: ArgoCDExtension metadata: name: argo-rollouts spec: repository: https://github.com/argoproj-labs/rollout-extension revision: HEAD Git Repository Structure The git repository would have an expected structure, such that the scripts and UI component could be discovered easily by Argo CD based on resource kind. \u251c\u2500\u2500 README.md \u251c\u2500\u2500 argoproj.io \u2502 \u251c\u2500\u2500 AnalysisRun \u2502 \u2502 \u251c\u2500\u2500 actions \u2502 \u2502 \u2502 \u251c\u2500\u2500 discovery.lua \u2502 \u2502 \u2502 \u2514\u2500\u2500 terminate \u2502 \u2502 \u2502 \u2514\u2500\u2500 action.lua \u2502 \u2502 \u2514\u2500\u2500 health.lua \u2502 \u251c\u2500\u2500 Experiment \u2502 \u2502 \u2514\u2500\u2500 health.lua \u2502 \u2514\u2500\u2500 Rollout \u2502 \u251c\u2500\u2500 ui \u2502 \u2502 \u2514\u2500\u2500 extension.js # dynamically loaded by argocd-server \u2502 \u251c\u2500\u2500 actions \u2502 \u2502 \u251c\u2500\u2500 abort \u2502 \u2502 \u2502 \u2514\u2500\u2500 action.lua \u2502 \u2502 \u251c\u2500\u2500 discovery.lua \u2502 \u2502 \u251c\u2500\u2500 promote-full \u2502 \u2502 \u2502 \u2514\u2500\u2500 action.lua \u2502 \u2502 \u251c\u2500\u2500 restart \u2502 \u2502 \u2502 \u2514\u2500\u2500 action.lua \u2502 \u2502 \u251c\u2500\u2500 resume \u2502 \u2502 \u2502 \u2514\u2500\u2500 action.lua \u2502 \u2502 \u251c\u2500\u2500 retry \u2502 \u2502 \u2502 \u2514\u2500\u2500 action.lua Note that it may be necessary to support multiple versions of a resource (e.g. v1alpha1 vs. a v1 version of a custom esource), and so the path structure may need to also support incorporating the version in the path. For example: \u251c\u2500\u2500 argoproj.io \u2502 \u251c\u2500\u2500 v1alpha1 \u2502 \u2502 \u251c\u2500\u2500 AnalysisRun User Interface In the UI, a new tab in the Resource View will be made available. The contents of that tab would dynamically loaded by the Argo CD API server at the git URL specified in the extension, which would be cloned locally by the API server. Implementation Details At a high level an Argo CD extension is simply a React component, which is dynamically loaded at runtime by the Argo CD API server. In order for the component to render some visualization about a resource, it needs to be supplied at least two key peices of information: 1. The full resource object itself 2. The entire Application Resource Tree We provide the entire application tree to accomplish two things: Extensions get basic (shallow) live updates for free because the Resource Tree is already live updated Extensions may wish to display richer hierarchical structure for other related objects (e.g. the Rollout extension would want to display ReplicaSets and Pods) Further, if an Extension needs richer information than that provided by the Resource Tree, it can request additional information about a resource from the Argo CD API server. interface Extention { ResourceTab: React.Component<{resource: any}>; } The UI will dynamically import an Extension React component from the Argo CD API Server. This is accomplished by specifying the generic Extension component as a Webpack external, and including a <script> tag in the index.html template that refers to the Argo CD API Server's generic extension endpoint (i.e. /api/v1/extensions ). The API Server serves a different instantiation of the generic Extension component depending on the Resource being displayed; the generic extensions endpoint will have intelligence that reverse proxies the relevant third-party Extension API. The third-party Extension itself must conform to certain standards for this dynamic import (i.e. it must not bundle React). Installation Installing Argo CD Extensions support will be enabled with a single kubectl apply . This will: Install the ArgoCDExtension CRD Patch the Argo CD API Server with a sidecar The sidecar will be responsible for cloning repos specified in ArgoCDExtension CRs and mounting them in a well known location understood by the API server. Some changes are required in the Argo CD API server: It will serve Javascript assets mounted by the sidecar in the well known location to the UI at an endpoint (i.e. /api/v1/extensions/<resource-kind> ) It will retrieve Actions Lua scripts from the same well known location mounted by the sidecar instead of from argocd-cm UI Extention Interface TODO Detailed examples TODO Argo Rollout Extension PoC: Security Considerations Any write operations must be configured as Lua scripts defined in the ArgoCDExtension Custom Resource so that Argo CD RBAC can be enforced when a user invokes an action Risks and Mitigations We will be allowing the Argo CD UI to serve dynamically imported UI assets; while these dynamic imports will only occur from same-origin, malicious Extensions may inject hazardous code. We may also consider publishing a list of \"sanctioned\" or \"approved\" Extensions that we believe to be trustworthy (e.g. Argo Rollouts' or Workflows' Extensions). Upgrade / Downgrade Strategy Existing Argo CD instances should be unaffected by this change. Extensions are opt-in only, and ideally none should be installed by default. To opt in, operators will need to install services that comply with the Argo CD Extensions API and expose that service such that it is reachable by the Argo CD API Server. To uninstall an extension should be as simple as deleting the ArgoCDExtension CR. Drawbacks Argo CD was designed to be a GitOps tool, not a cluster visualization dashboard. Extensions open the door to increase Argo CD's scope in a way that may not be desirable. Alternatives We originally considered building native support for resources like a Rollout directly into Argo CD. However, this tightly couples the Argo CD Server to an Argo Rollouts version, which is problematic when Argo CD manages several clusters all running different Rollouts versions. We additionally considered requiring recompilation of the Argo CD UI (and by extension, the API server) to install Extensions in a similar fashion to Config Management Plugins. However, this is a headache for operators, and given that we are in the process of improving the Config Management Plugin paradigm, we should not go down this path if possible. Open Questions It will be important to allow Extensions to specify their own documentation URLs to be displayed as a button or banner to users, as to make clear that UI with support requests for third party extensions.","title":"Argo CD Extensions"},{"location":"Linux%20Notlar%C4%B1/002-ui-extensions/#argo-cd-extensions","text":"","title":"Argo CD Extensions"},{"location":"Linux%20Notlar%C4%B1/002-ui-extensions/#summary","text":"This proposal is to provide a mechanism to extend Argo CD such that it can provide resource-specific visualizations, capabilities and interactions in the following ways: Richer and context-sensitive UI components can be displayed in the user interface about custom resources. Custom health checks can be configured to assess the health of the resource. Custom actions could be performed to manipulate resources in predefined ways.","title":"Summary"},{"location":"Linux%20Notlar%C4%B1/002-ui-extensions/#motivation","text":"Argo CD is commonly used as a dashboard to Kubernetes applications. The current UI is limited in that it only displays very general information about Kubernetes objects. Any special visualizations can currently only be done for native Kubernetes kinds. For custom resources, Argo CD does not by default have any special handling or understanding of CRs, such as how to assess the health of the object or visualizations. When examining a resource, a user can only see a YAML view of the object, which is not helpful unless they are familiar with the object's spec and status information. Note that Argo CD does currently have a resource customizations feature, which allows operators to define health checks and actions via lua scripts in the argocd-cm ConfigMap. However, the current mechanism of configuring resource customizations is difficult and highly error prone. This proposal would allow operators to more easily configure Argo CD to understand custom resources, as well as provide more powerful visualization of objects.","title":"Motivation"},{"location":"Linux%20Notlar%C4%B1/002-ui-extensions/#use-cases","text":"","title":"Use cases"},{"location":"Linux%20Notlar%C4%B1/002-ui-extensions/#use-case-1","text":"As a user, I would like to see visual information about my Rollout without having to use the CLI or otherwise leave Argo CD.","title":"Use case 1:"},{"location":"Linux%20Notlar%C4%B1/002-ui-extensions/#use-case-2","text":"As an operator, I would like to configure Argo CD to be able to assess the health of a custom resource based on its status.","title":"Use case 2:"},{"location":"Linux%20Notlar%C4%B1/002-ui-extensions/#use-case-3","text":"As an operator, I would like to configure Argo CD to perform pre-defined actions (object mutations) on a custom resource, for example restarting a Rollout.","title":"Use case 3:"},{"location":"Linux%20Notlar%C4%B1/002-ui-extensions/#goals","text":"Enable new visualizations in the UI for resources that do not have baked-in support Extensions can be configured by operators at runtime, without a feature being built directly into Argo CD, and with no need to recompile UI code. Extensions should be easy to develop and install. Loose coupling between Argo CD and extensions. Replace current resource customizations in argocd-cm ConfigMap with extensions","title":"Goals"},{"location":"Linux%20Notlar%C4%B1/002-ui-extensions/#proposal","text":"A new ArgoCDExtension CRD would be introduced which will allow operators configure Argo CD to understand how to handle and visualize custom resources. Visualizing a object requires javascript to render the object, and health/actions require lua scripts. Aas such, the extension CR would need to point to some location where the javascript/lua code would be hosted. It is proposed that a git repository be used to contain the javascript code, as well as the lua scripts necessary to assess health or perform actions of a resource.","title":"Proposal"},{"location":"Linux%20Notlar%C4%B1/002-ui-extensions/#argocdextension-crd","text":"In the most simplest form, an Argo CD extension could simply be a pointer to a git repository at a revision: kind: ArgoCDExtension metadata: name: argo-rollouts spec: repository: https://github.com/argoproj-labs/rollout-extension revision: HEAD","title":"ArgoCDExtension CRD"},{"location":"Linux%20Notlar%C4%B1/002-ui-extensions/#git-repository-structure","text":"The git repository would have an expected structure, such that the scripts and UI component could be discovered easily by Argo CD based on resource kind. \u251c\u2500\u2500 README.md \u251c\u2500\u2500 argoproj.io \u2502 \u251c\u2500\u2500 AnalysisRun \u2502 \u2502 \u251c\u2500\u2500 actions \u2502 \u2502 \u2502 \u251c\u2500\u2500 discovery.lua \u2502 \u2502 \u2502 \u2514\u2500\u2500 terminate \u2502 \u2502 \u2502 \u2514\u2500\u2500 action.lua \u2502 \u2502 \u2514\u2500\u2500 health.lua \u2502 \u251c\u2500\u2500 Experiment \u2502 \u2502 \u2514\u2500\u2500 health.lua \u2502 \u2514\u2500\u2500 Rollout \u2502 \u251c\u2500\u2500 ui \u2502 \u2502 \u2514\u2500\u2500 extension.js # dynamically loaded by argocd-server \u2502 \u251c\u2500\u2500 actions \u2502 \u2502 \u251c\u2500\u2500 abort \u2502 \u2502 \u2502 \u2514\u2500\u2500 action.lua \u2502 \u2502 \u251c\u2500\u2500 discovery.lua \u2502 \u2502 \u251c\u2500\u2500 promote-full \u2502 \u2502 \u2502 \u2514\u2500\u2500 action.lua \u2502 \u2502 \u251c\u2500\u2500 restart \u2502 \u2502 \u2502 \u2514\u2500\u2500 action.lua \u2502 \u2502 \u251c\u2500\u2500 resume \u2502 \u2502 \u2502 \u2514\u2500\u2500 action.lua \u2502 \u2502 \u251c\u2500\u2500 retry \u2502 \u2502 \u2502 \u2514\u2500\u2500 action.lua Note that it may be necessary to support multiple versions of a resource (e.g. v1alpha1 vs. a v1 version of a custom esource), and so the path structure may need to also support incorporating the version in the path. For example: \u251c\u2500\u2500 argoproj.io \u2502 \u251c\u2500\u2500 v1alpha1 \u2502 \u2502 \u251c\u2500\u2500 AnalysisRun","title":"Git Repository Structure"},{"location":"Linux%20Notlar%C4%B1/002-ui-extensions/#user-interface","text":"In the UI, a new tab in the Resource View will be made available. The contents of that tab would dynamically loaded by the Argo CD API server at the git URL specified in the extension, which would be cloned locally by the API server.","title":"User Interface"},{"location":"Linux%20Notlar%C4%B1/002-ui-extensions/#implementation-details","text":"At a high level an Argo CD extension is simply a React component, which is dynamically loaded at runtime by the Argo CD API server. In order for the component to render some visualization about a resource, it needs to be supplied at least two key peices of information: 1. The full resource object itself 2. The entire Application Resource Tree We provide the entire application tree to accomplish two things: Extensions get basic (shallow) live updates for free because the Resource Tree is already live updated Extensions may wish to display richer hierarchical structure for other related objects (e.g. the Rollout extension would want to display ReplicaSets and Pods) Further, if an Extension needs richer information than that provided by the Resource Tree, it can request additional information about a resource from the Argo CD API server. interface Extention { ResourceTab: React.Component<{resource: any}>; } The UI will dynamically import an Extension React component from the Argo CD API Server. This is accomplished by specifying the generic Extension component as a Webpack external, and including a <script> tag in the index.html template that refers to the Argo CD API Server's generic extension endpoint (i.e. /api/v1/extensions ). The API Server serves a different instantiation of the generic Extension component depending on the Resource being displayed; the generic extensions endpoint will have intelligence that reverse proxies the relevant third-party Extension API. The third-party Extension itself must conform to certain standards for this dynamic import (i.e. it must not bundle React).","title":"Implementation Details"},{"location":"Linux%20Notlar%C4%B1/002-ui-extensions/#installation","text":"Installing Argo CD Extensions support will be enabled with a single kubectl apply . This will: Install the ArgoCDExtension CRD Patch the Argo CD API Server with a sidecar The sidecar will be responsible for cloning repos specified in ArgoCDExtension CRs and mounting them in a well known location understood by the API server. Some changes are required in the Argo CD API server: It will serve Javascript assets mounted by the sidecar in the well known location to the UI at an endpoint (i.e. /api/v1/extensions/<resource-kind> ) It will retrieve Actions Lua scripts from the same well known location mounted by the sidecar instead of from argocd-cm","title":"Installation"},{"location":"Linux%20Notlar%C4%B1/002-ui-extensions/#ui-extention-interface","text":"TODO","title":"UI Extention Interface"},{"location":"Linux%20Notlar%C4%B1/002-ui-extensions/#detailed-examples","text":"TODO","title":"Detailed examples"},{"location":"Linux%20Notlar%C4%B1/002-ui-extensions/#argo-rollout-extension-poc","text":"","title":"Argo Rollout Extension PoC:"},{"location":"Linux%20Notlar%C4%B1/002-ui-extensions/#security-considerations","text":"Any write operations must be configured as Lua scripts defined in the ArgoCDExtension Custom Resource so that Argo CD RBAC can be enforced when a user invokes an action","title":"Security Considerations"},{"location":"Linux%20Notlar%C4%B1/002-ui-extensions/#risks-and-mitigations","text":"We will be allowing the Argo CD UI to serve dynamically imported UI assets; while these dynamic imports will only occur from same-origin, malicious Extensions may inject hazardous code. We may also consider publishing a list of \"sanctioned\" or \"approved\" Extensions that we believe to be trustworthy (e.g. Argo Rollouts' or Workflows' Extensions).","title":"Risks and Mitigations"},{"location":"Linux%20Notlar%C4%B1/002-ui-extensions/#upgrade-downgrade-strategy","text":"Existing Argo CD instances should be unaffected by this change. Extensions are opt-in only, and ideally none should be installed by default. To opt in, operators will need to install services that comply with the Argo CD Extensions API and expose that service such that it is reachable by the Argo CD API Server. To uninstall an extension should be as simple as deleting the ArgoCDExtension CR.","title":"Upgrade / Downgrade Strategy"},{"location":"Linux%20Notlar%C4%B1/002-ui-extensions/#drawbacks","text":"Argo CD was designed to be a GitOps tool, not a cluster visualization dashboard. Extensions open the door to increase Argo CD's scope in a way that may not be desirable.","title":"Drawbacks"},{"location":"Linux%20Notlar%C4%B1/002-ui-extensions/#alternatives","text":"We originally considered building native support for resources like a Rollout directly into Argo CD. However, this tightly couples the Argo CD Server to an Argo Rollouts version, which is problematic when Argo CD manages several clusters all running different Rollouts versions. We additionally considered requiring recompilation of the Argo CD UI (and by extension, the API server) to install Extensions in a similar fashion to Config Management Plugins. However, this is a headache for operators, and given that we are in the process of improving the Config Management Plugin paradigm, we should not go down this path if possible.","title":"Alternatives"},{"location":"Linux%20Notlar%C4%B1/002-ui-extensions/#open-questions","text":"It will be important to allow Extensions to specify their own documentation URLs to be displayed as a button or banner to users, as to make clear that UI with support requests for third party extensions.","title":"Open Questions"},{"location":"Linux%20Notlar%C4%B1/application-name-identifier/","text":"Change the way application resources are identified This is a proposal to introduce the tracking method settings that allows using an annotation as the application identifier instead of the application instance label. This will allow application names longer than 63 characters and solve issues caused by copying app.kubernetes.io/instance label. As an additional goal, we propose to introduce an installation ID that will allow multiple Argo CD instances to manage resources on the same cluster. Summary Argo CD identifies resources it manages by setting the application instance label to the name of the managing Application on all resources that are managed (i.e. reconciled from Git). The default label used is the well-known label app.kubernetes.io/instance . This proposal suggests to introduce the trackingMethod setting that allows controlling how applicaton resources are identified and allows switching to using the annotation instead of app.kubernetes.io/instance label. Motivation The main motivation behind this change is to solve the following known issues: The Kubernetes label value cannot be longer than 63 characters. In large scale installations, in order to build up an easy to understand and well-formed naming schemes for applications managed by Argo CD, people often hit the 63 character limit and need to define the naming scheme around this unnecessary limit. Popular off-the-shelf Helm charts often add the app.kubernetes.io/instance label to the generated resource manifests. This label confuses Argo CD and makes it think the resource is managed by the application. Kubernetes operators often create additional resources without creating owner reference and copy the app.kubernetes.io/instance label from the application resource. This is also confusing Argo CD and makes it think the resource is managed by the application. An additional motivation - while we're at touching at application instance label - is to improve the way how multiple Argo CD instances could manage applications on the same cluster, without requiring the user to actually perform instance specific configuration. Goals Allow application names of more than 63 characters Prevent confusion caused by copied/generated app.kubernetes.io/instance label Keep having a human-readable way to identify resources that belong to a given Argo CD application As a stretch-goal, allow multiple Argo CD instances to manage resources on the same cluster without the need for configuring application instance label key (usually app.kubernetes.io/instance ) Non-Goals Change the default name of the application instance label Proposal We propose introducing a new setting trackingMethod that allows to control how application resources are identified. The trackingMethod setting takes one of the following values: label (default) - Argo CD keep using the app.kubernetes.io/instance label. annotation+label - Argo CD keep adding app.kubernetes.io/instance but only for informational purposes: label is not used for tracking, value is truncated if longer than 63 characters. The app.kubernetes.io/instance annotation is used to track application resources. annotation - Argo CD uses the app.kubernetes.io/instance annotation to track application resources. The app.kubernetes.io/instance attribute values includes the application name, resources identifier it is applied to, and optionally the Argo CD installation ID: The application name allows to identify the application that manages the resource. The resource identifier prevents confusion if an operation copies the app.kubernetes.io/instance annotation to another resource. Finally optional installation ID allows separate two Argo CD instances that manages resources in the same cluster. The trackingMethod setting should be available at the system level and the application level to allow the smooth transition from the old app.kubernetes.io/instance label to the new tracking method. Using the app leverl settings users will be able to first switch applications one by one to the new tracking method and prepare for the migration. Next system level setting can be changed to annotation or annotation+label and not-migrated applications can be configured to use labels using application level setting. Use cases Add a list of detailed use cases this enhancement intends to take care of. Use case 1: Allow for more than 63 characters in application name As a user, I would like to be able to give my applications names with arbitrary length, because I want to include identifiers like target regions and possibly availability zones, the environment and possibly other identifiers (e.g. a team name) in the application names. The current restriction of 63 characters is not sufficient for my naming requirements. Use case 2: Allow for retrieving all resources using Kubernetes As an administrator, I want to enable my users to use more than 63 characters in their application names, but I still want to be able to retrieve all of the resources managed by that particular application using Kubernetes mechanisms, e.g. a label selector as in the following example: kubectl get deployments -l app.kubernetes.io/instance=<application> --all-namespaces Use case 3: Multiple Argo CD instances managing apps on same cluster I also want to be able to see which application and Argo CD instance is the one in charge of a given resource. Implementation Details/Notes/Constraints [optional] Include resource identifies in the app.kubernetes.io/instance annotation The app.kubernetes.io/instance annotation might be accidently added or copied same as label. To prevent Argo CD confusion the annotation value should include the identifier of the resource annotation was applied to. The resource identifier includes the group, kind, namespace and name of the resource. It is proposed to use ; to separate identifier from the application name. annotations: app.kubernetes.io/instance: <application-name>;<group>/<kind>/<namespace>/<name> Example: apiVersion: apps/v1 kind: Deployment metadata: name: my-deployment namespace: default annotations: app.kubernetes.io/instance: my-application;apps/Deployment/default/my-deployment Allow multiple Argo CD instances manage applications on same cluster As of today, to allow two or more Argo CD instances with a similar set of permissions (e.g. cluster-wide read access to resources) manage applications on the same cluster, users would have to configure the application instance label key in the Argo CD configuration to a unique value. Otherwise, if an application with the same name exists in two different Argo CD installations, both would claim ownership of the resources of that application. We do see the need for preventing such scenarios out-of-the-box in Argo CD. For this, we do suggest the introduction of an installation ID in the form of a standard GUID . This GUID would be generated once by Argo CD upon startup, and is persisted in the Argo CD configuration, e.g. by storing it as installationID in the argocd-cm ConfigMap. The GUID of the installation would need to be encoded in some way in the resources managed by that Argo CD instance. We suggest using a dedicated annotation to store the GUID and modify Argo CD so that it matches both , the app instance key and the GUID to determine whether a resource is managed by this Argo CD instance. Given above mentioned GUID, this may look like the following on a resource: yaml apiVersion: v1 Kind: Secret metadata: name: some-secret namespace: some-namespace annotations: app.kubernetes.io/instance: my-application;/Secret/some-namespace/some-secret argo-cd.argoproj.io/installation-id: 61199294-412c-4e78-a237-3ebba6784fcd The user should be able to opt-out of this feature by setting the installationID to an empty string. Security Considerations We think this change will not have a direct impact on the security of Argo CD or the applications it manages. Risks and Mitigations The proposal assumes that user can keep adding app.kubernetes.io/instance label to be able to retrieve resources using kubectl get -l app.kubernetes.io/instance=<application> command. However, Argo CD is going to truncate the value of the label if it is longer than 63 characters. There is a small possibility that there are several applications with the same first 63 characters in the name. This should be clearly stated in documentation. Upgrade / Downgrade Strategy Upgrading to a version that implements this proposal should be seamless, as previously injected labels will not be removed and additional annotations will be applied to the resource. E.g. consider following resource in Git, that will be synced as part of an application named some-application . In Git, the resource looks like follows: apiVersion: v1 Kind: Secret metadata: name: some-secret namespace: some-namespace When synced with the current incarnation of Argo CD, Argo CD would inject the application instance label and once the resource is applied in the cluster, it would look like follows: apiVersion: v1 Kind: Secret metadata: name: some-secret namespace: some-namespace labels: app.kubernetes.io/instance: some-application Once Argo CD is updated to a version implementing this proposal, the resource would be rewritten to look like the following: apiVersion: v1 Kind: Secret metadata: name: some-secret namespace: some-namespace labels: app.kubernetes.io/instance: some-application annotations: app.kubernetes.io/instance: my-application;/Secret/some-namespace/some-secret argo-cd.argoproj.io/installation-id: 61199294-412c-4e78-a237-3ebba6784fcd On a rollback to a previous Argo CD version, this change would be reverted and the resource would look like the first shown example above. Drawbacks We do see some drawbacks to this implementation: This change would trigger a re-sync of each and every managed resource, which may result in unexpected heavy load on Argo CD and the cluster at upgrade time. The workaround is an ability to opt-out of this as a default and enable it on application basis. Alternatives Enabling application names longer than 63 characters could also be done by using the hashed value of the application name and additional metadata as a label. The disadvantage of this approach is that hash value is not human friendly. In particular, it is difficult to retrieve application manifests using kubectl get -l app.kubernetes.io/instance=<application> .","title":"Change the way application resources are identified"},{"location":"Linux%20Notlar%C4%B1/application-name-identifier/#change-the-way-application-resources-are-identified","text":"This is a proposal to introduce the tracking method settings that allows using an annotation as the application identifier instead of the application instance label. This will allow application names longer than 63 characters and solve issues caused by copying app.kubernetes.io/instance label. As an additional goal, we propose to introduce an installation ID that will allow multiple Argo CD instances to manage resources on the same cluster.","title":"Change the way application resources are identified"},{"location":"Linux%20Notlar%C4%B1/application-name-identifier/#summary","text":"Argo CD identifies resources it manages by setting the application instance label to the name of the managing Application on all resources that are managed (i.e. reconciled from Git). The default label used is the well-known label app.kubernetes.io/instance . This proposal suggests to introduce the trackingMethod setting that allows controlling how applicaton resources are identified and allows switching to using the annotation instead of app.kubernetes.io/instance label.","title":"Summary"},{"location":"Linux%20Notlar%C4%B1/application-name-identifier/#motivation","text":"The main motivation behind this change is to solve the following known issues: The Kubernetes label value cannot be longer than 63 characters. In large scale installations, in order to build up an easy to understand and well-formed naming schemes for applications managed by Argo CD, people often hit the 63 character limit and need to define the naming scheme around this unnecessary limit. Popular off-the-shelf Helm charts often add the app.kubernetes.io/instance label to the generated resource manifests. This label confuses Argo CD and makes it think the resource is managed by the application. Kubernetes operators often create additional resources without creating owner reference and copy the app.kubernetes.io/instance label from the application resource. This is also confusing Argo CD and makes it think the resource is managed by the application. An additional motivation - while we're at touching at application instance label - is to improve the way how multiple Argo CD instances could manage applications on the same cluster, without requiring the user to actually perform instance specific configuration.","title":"Motivation"},{"location":"Linux%20Notlar%C4%B1/application-name-identifier/#goals","text":"Allow application names of more than 63 characters Prevent confusion caused by copied/generated app.kubernetes.io/instance label Keep having a human-readable way to identify resources that belong to a given Argo CD application As a stretch-goal, allow multiple Argo CD instances to manage resources on the same cluster without the need for configuring application instance label key (usually app.kubernetes.io/instance )","title":"Goals"},{"location":"Linux%20Notlar%C4%B1/application-name-identifier/#non-goals","text":"Change the default name of the application instance label","title":"Non-Goals"},{"location":"Linux%20Notlar%C4%B1/application-name-identifier/#proposal","text":"We propose introducing a new setting trackingMethod that allows to control how application resources are identified. The trackingMethod setting takes one of the following values: label (default) - Argo CD keep using the app.kubernetes.io/instance label. annotation+label - Argo CD keep adding app.kubernetes.io/instance but only for informational purposes: label is not used for tracking, value is truncated if longer than 63 characters. The app.kubernetes.io/instance annotation is used to track application resources. annotation - Argo CD uses the app.kubernetes.io/instance annotation to track application resources. The app.kubernetes.io/instance attribute values includes the application name, resources identifier it is applied to, and optionally the Argo CD installation ID: The application name allows to identify the application that manages the resource. The resource identifier prevents confusion if an operation copies the app.kubernetes.io/instance annotation to another resource. Finally optional installation ID allows separate two Argo CD instances that manages resources in the same cluster. The trackingMethod setting should be available at the system level and the application level to allow the smooth transition from the old app.kubernetes.io/instance label to the new tracking method. Using the app leverl settings users will be able to first switch applications one by one to the new tracking method and prepare for the migration. Next system level setting can be changed to annotation or annotation+label and not-migrated applications can be configured to use labels using application level setting.","title":"Proposal"},{"location":"Linux%20Notlar%C4%B1/application-name-identifier/#use-cases","text":"Add a list of detailed use cases this enhancement intends to take care of.","title":"Use cases"},{"location":"Linux%20Notlar%C4%B1/application-name-identifier/#use-case-1-allow-for-more-than-63-characters-in-application-name","text":"As a user, I would like to be able to give my applications names with arbitrary length, because I want to include identifiers like target regions and possibly availability zones, the environment and possibly other identifiers (e.g. a team name) in the application names. The current restriction of 63 characters is not sufficient for my naming requirements.","title":"Use case 1: Allow for more than 63 characters in application name"},{"location":"Linux%20Notlar%C4%B1/application-name-identifier/#use-case-2-allow-for-retrieving-all-resources-using-kubernetes","text":"As an administrator, I want to enable my users to use more than 63 characters in their application names, but I still want to be able to retrieve all of the resources managed by that particular application using Kubernetes mechanisms, e.g. a label selector as in the following example: kubectl get deployments -l app.kubernetes.io/instance=<application> --all-namespaces","title":"Use case 2: Allow for retrieving all resources using Kubernetes"},{"location":"Linux%20Notlar%C4%B1/application-name-identifier/#use-case-3-multiple-argo-cd-instances-managing-apps-on-same-cluster","text":"I also want to be able to see which application and Argo CD instance is the one in charge of a given resource.","title":"Use case 3: Multiple Argo CD instances managing apps on same cluster"},{"location":"Linux%20Notlar%C4%B1/application-name-identifier/#implementation-detailsnotesconstraints-optional","text":"","title":"Implementation Details/Notes/Constraints [optional]"},{"location":"Linux%20Notlar%C4%B1/application-name-identifier/#include-resource-identifies-in-the-appkubernetesioinstance-annotation","text":"The app.kubernetes.io/instance annotation might be accidently added or copied same as label. To prevent Argo CD confusion the annotation value should include the identifier of the resource annotation was applied to. The resource identifier includes the group, kind, namespace and name of the resource. It is proposed to use ; to separate identifier from the application name. annotations: app.kubernetes.io/instance: <application-name>;<group>/<kind>/<namespace>/<name> Example: apiVersion: apps/v1 kind: Deployment metadata: name: my-deployment namespace: default annotations: app.kubernetes.io/instance: my-application;apps/Deployment/default/my-deployment","title":"Include resource identifies in the app.kubernetes.io/instance annotation"},{"location":"Linux%20Notlar%C4%B1/application-name-identifier/#allow-multiple-argo-cd-instances-manage-applications-on-same-cluster","text":"As of today, to allow two or more Argo CD instances with a similar set of permissions (e.g. cluster-wide read access to resources) manage applications on the same cluster, users would have to configure the application instance label key in the Argo CD configuration to a unique value. Otherwise, if an application with the same name exists in two different Argo CD installations, both would claim ownership of the resources of that application. We do see the need for preventing such scenarios out-of-the-box in Argo CD. For this, we do suggest the introduction of an installation ID in the form of a standard GUID . This GUID would be generated once by Argo CD upon startup, and is persisted in the Argo CD configuration, e.g. by storing it as installationID in the argocd-cm ConfigMap. The GUID of the installation would need to be encoded in some way in the resources managed by that Argo CD instance. We suggest using a dedicated annotation to store the GUID and modify Argo CD so that it matches both , the app instance key and the GUID to determine whether a resource is managed by this Argo CD instance. Given above mentioned GUID, this may look like the following on a resource: yaml apiVersion: v1 Kind: Secret metadata: name: some-secret namespace: some-namespace annotations: app.kubernetes.io/instance: my-application;/Secret/some-namespace/some-secret argo-cd.argoproj.io/installation-id: 61199294-412c-4e78-a237-3ebba6784fcd The user should be able to opt-out of this feature by setting the installationID to an empty string.","title":"Allow multiple Argo CD instances manage applications on same cluster"},{"location":"Linux%20Notlar%C4%B1/application-name-identifier/#security-considerations","text":"We think this change will not have a direct impact on the security of Argo CD or the applications it manages.","title":"Security Considerations"},{"location":"Linux%20Notlar%C4%B1/application-name-identifier/#risks-and-mitigations","text":"The proposal assumes that user can keep adding app.kubernetes.io/instance label to be able to retrieve resources using kubectl get -l app.kubernetes.io/instance=<application> command. However, Argo CD is going to truncate the value of the label if it is longer than 63 characters. There is a small possibility that there are several applications with the same first 63 characters in the name. This should be clearly stated in documentation.","title":"Risks and Mitigations"},{"location":"Linux%20Notlar%C4%B1/application-name-identifier/#upgrade-downgrade-strategy","text":"Upgrading to a version that implements this proposal should be seamless, as previously injected labels will not be removed and additional annotations will be applied to the resource. E.g. consider following resource in Git, that will be synced as part of an application named some-application . In Git, the resource looks like follows: apiVersion: v1 Kind: Secret metadata: name: some-secret namespace: some-namespace When synced with the current incarnation of Argo CD, Argo CD would inject the application instance label and once the resource is applied in the cluster, it would look like follows: apiVersion: v1 Kind: Secret metadata: name: some-secret namespace: some-namespace labels: app.kubernetes.io/instance: some-application Once Argo CD is updated to a version implementing this proposal, the resource would be rewritten to look like the following: apiVersion: v1 Kind: Secret metadata: name: some-secret namespace: some-namespace labels: app.kubernetes.io/instance: some-application annotations: app.kubernetes.io/instance: my-application;/Secret/some-namespace/some-secret argo-cd.argoproj.io/installation-id: 61199294-412c-4e78-a237-3ebba6784fcd On a rollback to a previous Argo CD version, this change would be reverted and the resource would look like the first shown example above.","title":"Upgrade / Downgrade Strategy"},{"location":"Linux%20Notlar%C4%B1/application-name-identifier/#drawbacks","text":"We do see some drawbacks to this implementation: This change would trigger a re-sync of each and every managed resource, which may result in unexpected heavy load on Argo CD and the cluster at upgrade time. The workaround is an ability to opt-out of this as a default and enable it on application basis.","title":"Drawbacks"},{"location":"Linux%20Notlar%C4%B1/application-name-identifier/#alternatives","text":"Enabling application names longer than 63 characters could also be done by using the hashed value of the application name and additional metadata as a label. The disadvantage of this approach is that hash value is not human friendly. In particular, it is difficult to retrieve application manifests using kubectl get -l app.kubernetes.io/instance=<application> .","title":"Alternatives"},{"location":"Linux%20Notlar%C4%B1/config-management-plugin-v2/","text":"Config Management Plugin Enhancement We want to enhance config management plugin in order to improve Argo CD operator and end-user experience for using additional tools such as cdk8s, Tanka, jkcfg, QBEC, Dhall, pulumi, etc. Summary Currently, Argo CD provides first-class support for Helm, Kustomize, Jsonnet/YAML, and Ksonnet. The support includes: - Bundled binaries (maintainers periodically upgrade binaries) - An ability to override parameters using UI/CLI - The applications are discovered in Git repository and auto-suggested during application creation in UI - Performance optimizations. Argo CD \"knows\" when it is safe to generate manifests concurrently and takes advantage of it. We want to enhance the configuration management plugin so that it can provide similar first-class support for additional tools such as cdk8s, Tanka, jkcfg, QBEC, Dhall, pulumi, etc. Motivation The config management plugin feature should be improved to provide the same level of user experience as for the natively supported tools to the additional tools such as cdk8s, Tanka, jkcfg, QBEC, Dhall, pulumi, etc., including Argo CD operators as well as end-user experience. Goals The goals for config management plugin enhancement are, Improve Installation Experience The current Config Management plugin installation experience requires two changes: - An entry in configManagementPlugins in the Argo CD configmap (i.e. argocd-cm) - Either an init container with a volume mount that adds a new binary into Argo CD repo server pod, or a rebuild of the argocd image, which contains the necessary tooling The problem with this approach is that the process is error-prone, manual, and requires learning from each and every Argo CD administrator. The goal is to make additional tools easily accessible for installation to Argo CD operators. Provide Discovery (Auto-selection of Tool) For Argo CD\u2019s natively supported config management plugins (Helm, Kustomize, Ksonnet, Jsonnet), Argo CD auto-detects and selects the appropriate tool given only the path in the Git repository. This selection is based on the recognition of well-known files in the directory (e.g. Chart.yaml, kustomization.yaml, etc...). Currently, unlike natively supported tools, when a plugin is used, a user needs to explicitly specify the plugin that should be used to render the manifests. As part of the improvements to config management plugins, We want to provide the same ability to auto-select the plugin based on recognized files in the path of the git repository. Parameters support in UI/CLI Currently, configuration management plugins allow specifying only a list of environment variables via UI/CLI. We want to extend its functionality to provide a similar experience as for existing natively supported tools to additional config management tools. Non-Goals We aren't planning on changing the existing support for native plugins as of now. Proposal We have drafted the solution to the problem statement as running configuration management plugin tools as sidecar in the argocd-repo-server . All it means that Argo CD Config Management Plugin 2.0 will be, - A user-supplied container image with all the necessary tooling installed in it. - It will run as a sidecar in the repo server deployment and will have shared access to the git repositories. - It will contain a CMP YAML specification file describing how to render manifests. - Its entrypoint will be a lightweight CMP API server that receives requests by the main repo-server to render manifests, based on the CMP specification file. This mechanism will provide the following benefits over the existing solution, - Plugin owners control their execution environment, packaging whatever dependent binaries required. - An Argo CD user who wants to use additional config management tools does not have to go through the hassle of building a customized argocd-repo-server in order to install required dependencies. - The plugin image will be running in a container separate from the main repo-server. Use cases UC1: As an Argo CD user, I would like to use first-class support provided for additional tools to generate and manage deployable kubernetes manifests UC2: As an Argo CD operator, I want to have smooth experience while installing additional tools such as cdk8s, Tanka, jkcfg, QBEC, Dhall, pulumi, etc. UC3: As a plugin owner, I want to have some control over the execution environment as I want to package whatever dependent binaries required. Implementation Details Config Management Plugin v2.0 implementation and experience will be as, Installation To install a plugin, an operator will simply patch argocd-repo-server to run config management plugin container as a sidecar, with argocd-cmp-server as it\u2019s entrypoint. Operator can use either off-the-shelf or custom built plugin image as sidecar image. # A plugin is a container image which runs as a sidecar, with the execution environment # necessary to render manifests. To install a plugin, containers: - name: cdk8s command: [/var/run/argocd/argocd-cmp-server] image: docker.ui/cdk8s/cdk8s:latest volumeMounts: - mountPath: /var/run/argocd name: var-files The argocd-cmp-server binary will be populated inside the plugin container via an init container in the argocd-repo-server, which will pre-populate a volume shared between plugins and the repo-server. # An init container will copy the argocd static binary into the shared volume # so that the CMP server can become the entrypoint initContainers: - command: - cp - -n - /usr/local/bin/argocd - /var/run/argocd/argocd-cmp-server image: quay.io/argoproj/argocd:latest name: copyutil volumeMounts: - mountPath: /var/run/argocd name: var-files # var-files is a shared volume between repo-server and cmp-server which holds: # 1) socket files that repo-server uses to communicate to each plugin # 2) git repositories cloned by repo-server volumes: - emptyDir: {} name: var-files Configuration Plugins will be configured via a ConfigManagementPlugin manifest located inside the plugin container, placed at a well-known location (e.g. /home/argocd/plugins/plugin.yaml). Argo CD is agnostic to the mechanism of how the plugin.yaml would be placed, but various options can be used on how to place this file, including: - Baking the file into the plugin image as part of docker build - Volume mapping the file through a configmap. Note that, while the ConfigManagementPlugin looks like a Kubernetes object, it is not actually a custom resource. It only follows kubernetes-style spec conventions. # metadata file is in the root and shell executor knows about it apiVersion: argoproj.io/v1alpha1 kind: ConfigManagementPlugin metadata: name: cdk8s spec: version: v1.0 init: command: [cdk8s, init] generate: command: [sh, -c, \"cdk8s synth && cat dist/*.yaml\"] discovery: find: - command: [find . -name main.ts] glob: \"**/*/main.ts\" check: - command: [-f ./main.ts] glob: \"main.ts\" allowConcurrency: true # enables generating multiple manifests in parallel. Config Management Plugin API Server (cmp-server) The Config Management Plugin API Server (cmp-server) will be a new Argo CD component whose sole responsibility will be to execute generate commands inside the plugin environment (the sidecar container), at the request of the repo-server. The cmp-server will expose the following APIs to the repo-server, GenerateManifests(path) - returns YAML output using plugin tooling IsSupported(path) - returns whether or not the given path is supported by the plugin At startup, cmp-server looks at the /home/argocd/cmp-server/plugin.yaml ConfigManagementPlugin specification file to understand how to perform the requests. Registration & Communication The repo-server needs to understand what all plugins are available to render manifests. To do this, the cmp-server sidecars will register themselves as available plugins to the argocd-repo-server by populating named socket files in the shared volume between repo-server and cmp-server. e.g.: /home/argocd/plugins/ cdk8s.sock jkcfg.sock pulumi.sock The name of the socket file will indicate the plugin name. To discover the available plugins, the repo-server will list the shared plugins directory to discover the available plugins. To communicate with a plugin, the repo-server will simply need to connect to the socket and make gRPC calls against the cmp-server listening on the other side. Discovery (Auto-selection of Tool) The plugin discovery will run in the main repo-server container. Argo CD repo-server lists the shared plugins directory and runs discover command from the specification file, whichever plugin provides a positive response first will be selected. Versioning There will be one sidecar container per version. Hence, for two different versions users will have to configure two different sidecars. Security Considerations The use of the plugin as sidecars separate from the repo-server is already a security improvement over the current v1.8 config management plugin mechanism, since the plugin tooling will no longer have access to the files of the argocd-repo-server image. However additional improvements can be made to increase security. Risks and Mitigations One issue is that currently when repositories are cloned, the repo is cloned using the same UID of the repo-server user, and so all repository files are created using that UID. This means that a command which executes in the git repository path, could traverse upwards and see/write files which are outside of the repository tree. One proposal to prevent out-of-tree access to files, is that each git repository could be cloned with unique UIDs, different from the repo-server\u2019s UID. When the cmp-server executes the tooling command to generate manifests, the command could be executed using the UID of the git repository files. e.g.: cmd := exec.Command(command, args...) cmd.SysProcAttr = &syscall.SysProcAttr{} cmd.SysProcAttr.Credential = &syscall.Credential{Uid: uid, Gid: gid} This would ensure that the command could not read or write anything out-of-tree from the repository directory. Upgrade / Downgrade Strategy The argocd-repo-server manifest will change in order to populate the argocd-cmp-server binary inside the plugin container via an init container. # An init container will copy the argocd static binary into the shared volume # so that the CMP server can become the entrypoint initContainers: - command: - cp - -n - /usr/local/bin/argocd - /var/run/argocd/argocd-cmp-server image: quay.io/argoproj/argocd:latest name: copyutil volumeMounts: - mountPath: /var/run/argocd name: var-files # var-files is a shared volume between repo-server and cmp-server which holds: # 1) socket files that repo-server uses to communicate to each plugin # 2) git repositories cloned by repo-server volumes: - emptyDir: {} name: var-files After upgrading to CMP v2, an Argo CD operator will have to make following changes, In order to install a plugin, an Argo CD operator will simply have to patch argocd-repo-server to run config management plugin container as a sidecar, with argocd-cmp-server as it\u2019s entrypoint: # A plugin is a container image which runs as a sidecar, with the execution environment # necessary to render manifests. To install a plugin, containers: - name: cdk8s command: [/var/run/argocd/argocd-cmp-server] image: docker.ui/cdk8s/cdk8s:latest volumeMounts: - mountPath: /var/run/argocd name: var-files Plugins will be configured via a ConfigManagementPlugin manifest located inside the plugin container, placed at a well-known location (e.g. /plugin.yaml). Argo CD is agnostic to the mechanism of how the plugin.yaml would be placed, but various options can be used on how to place this file, including: Baking the file into the plugin image as part of docker build Volume mapping the file through a configmap. (For more details please refer to implementation details ) Drawbacks There aren't any major drawbacks to this proposal. Also, the advantages supersede the minor learning curve of the new way of managing plugins. However following are few minor drawbacks, With addition of plugin.yaml, there will be more yamls to manage Operators need to be aware of the modified kubernetes manifests in the subsequent version. The format of the CMP manifest is a new \"contract\" that would need to adhere the usual Argo CD compatibility promises in future. Alternatives ConfigManagementPlugin as CRD. Have a CR which the human operator creates: apiVersion: argoproj.io/v1alpha1 kind: ConfigManagementPlugin metadata: name: cdk8s spec: name: cdk8s image: docker.ui/cdk8s/cdk8s:latest version: v1.0 init: command: [cdk8s, init] generate: command: [sh, -c, \"cdk8s synth && cat dist/*.yaml\"] discovery: find: - command: [find . -name main.ts] glob: \"**/*/main.ts\" check: - command: [-f ./main.ts] glob: \"main.ts\" allowConcurrency: true # enables generating multiple manifests in parallel. Something magically patches the relevant manifest to add the sidecar.","title":"Config-Management-Plugin-Enhancement"},{"location":"Linux%20Notlar%C4%B1/config-management-plugin-v2/#config-management-plugin-enhancement","text":"We want to enhance config management plugin in order to improve Argo CD operator and end-user experience for using additional tools such as cdk8s, Tanka, jkcfg, QBEC, Dhall, pulumi, etc.","title":"Config Management Plugin Enhancement"},{"location":"Linux%20Notlar%C4%B1/config-management-plugin-v2/#summary","text":"Currently, Argo CD provides first-class support for Helm, Kustomize, Jsonnet/YAML, and Ksonnet. The support includes: - Bundled binaries (maintainers periodically upgrade binaries) - An ability to override parameters using UI/CLI - The applications are discovered in Git repository and auto-suggested during application creation in UI - Performance optimizations. Argo CD \"knows\" when it is safe to generate manifests concurrently and takes advantage of it. We want to enhance the configuration management plugin so that it can provide similar first-class support for additional tools such as cdk8s, Tanka, jkcfg, QBEC, Dhall, pulumi, etc.","title":"Summary"},{"location":"Linux%20Notlar%C4%B1/config-management-plugin-v2/#motivation","text":"The config management plugin feature should be improved to provide the same level of user experience as for the natively supported tools to the additional tools such as cdk8s, Tanka, jkcfg, QBEC, Dhall, pulumi, etc., including Argo CD operators as well as end-user experience.","title":"Motivation"},{"location":"Linux%20Notlar%C4%B1/config-management-plugin-v2/#goals","text":"The goals for config management plugin enhancement are,","title":"Goals"},{"location":"Linux%20Notlar%C4%B1/config-management-plugin-v2/#improve-installation-experience","text":"The current Config Management plugin installation experience requires two changes: - An entry in configManagementPlugins in the Argo CD configmap (i.e. argocd-cm) - Either an init container with a volume mount that adds a new binary into Argo CD repo server pod, or a rebuild of the argocd image, which contains the necessary tooling The problem with this approach is that the process is error-prone, manual, and requires learning from each and every Argo CD administrator. The goal is to make additional tools easily accessible for installation to Argo CD operators.","title":"Improve Installation Experience"},{"location":"Linux%20Notlar%C4%B1/config-management-plugin-v2/#provide-discovery-auto-selection-of-tool","text":"For Argo CD\u2019s natively supported config management plugins (Helm, Kustomize, Ksonnet, Jsonnet), Argo CD auto-detects and selects the appropriate tool given only the path in the Git repository. This selection is based on the recognition of well-known files in the directory (e.g. Chart.yaml, kustomization.yaml, etc...). Currently, unlike natively supported tools, when a plugin is used, a user needs to explicitly specify the plugin that should be used to render the manifests. As part of the improvements to config management plugins, We want to provide the same ability to auto-select the plugin based on recognized files in the path of the git repository.","title":"Provide Discovery (Auto-selection of Tool)"},{"location":"Linux%20Notlar%C4%B1/config-management-plugin-v2/#parameters-support-in-uicli","text":"Currently, configuration management plugins allow specifying only a list of environment variables via UI/CLI. We want to extend its functionality to provide a similar experience as for existing natively supported tools to additional config management tools.","title":"Parameters support in UI/CLI"},{"location":"Linux%20Notlar%C4%B1/config-management-plugin-v2/#non-goals","text":"We aren't planning on changing the existing support for native plugins as of now.","title":"Non-Goals"},{"location":"Linux%20Notlar%C4%B1/config-management-plugin-v2/#proposal","text":"We have drafted the solution to the problem statement as running configuration management plugin tools as sidecar in the argocd-repo-server . All it means that Argo CD Config Management Plugin 2.0 will be, - A user-supplied container image with all the necessary tooling installed in it. - It will run as a sidecar in the repo server deployment and will have shared access to the git repositories. - It will contain a CMP YAML specification file describing how to render manifests. - Its entrypoint will be a lightweight CMP API server that receives requests by the main repo-server to render manifests, based on the CMP specification file. This mechanism will provide the following benefits over the existing solution, - Plugin owners control their execution environment, packaging whatever dependent binaries required. - An Argo CD user who wants to use additional config management tools does not have to go through the hassle of building a customized argocd-repo-server in order to install required dependencies. - The plugin image will be running in a container separate from the main repo-server.","title":"Proposal"},{"location":"Linux%20Notlar%C4%B1/config-management-plugin-v2/#use-cases","text":"UC1: As an Argo CD user, I would like to use first-class support provided for additional tools to generate and manage deployable kubernetes manifests UC2: As an Argo CD operator, I want to have smooth experience while installing additional tools such as cdk8s, Tanka, jkcfg, QBEC, Dhall, pulumi, etc. UC3: As a plugin owner, I want to have some control over the execution environment as I want to package whatever dependent binaries required.","title":"Use cases"},{"location":"Linux%20Notlar%C4%B1/config-management-plugin-v2/#implementation-details","text":"Config Management Plugin v2.0 implementation and experience will be as,","title":"Implementation Details"},{"location":"Linux%20Notlar%C4%B1/config-management-plugin-v2/#installation","text":"To install a plugin, an operator will simply patch argocd-repo-server to run config management plugin container as a sidecar, with argocd-cmp-server as it\u2019s entrypoint. Operator can use either off-the-shelf or custom built plugin image as sidecar image. # A plugin is a container image which runs as a sidecar, with the execution environment # necessary to render manifests. To install a plugin, containers: - name: cdk8s command: [/var/run/argocd/argocd-cmp-server] image: docker.ui/cdk8s/cdk8s:latest volumeMounts: - mountPath: /var/run/argocd name: var-files The argocd-cmp-server binary will be populated inside the plugin container via an init container in the argocd-repo-server, which will pre-populate a volume shared between plugins and the repo-server. # An init container will copy the argocd static binary into the shared volume # so that the CMP server can become the entrypoint initContainers: - command: - cp - -n - /usr/local/bin/argocd - /var/run/argocd/argocd-cmp-server image: quay.io/argoproj/argocd:latest name: copyutil volumeMounts: - mountPath: /var/run/argocd name: var-files # var-files is a shared volume between repo-server and cmp-server which holds: # 1) socket files that repo-server uses to communicate to each plugin # 2) git repositories cloned by repo-server volumes: - emptyDir: {} name: var-files","title":"Installation"},{"location":"Linux%20Notlar%C4%B1/config-management-plugin-v2/#configuration","text":"Plugins will be configured via a ConfigManagementPlugin manifest located inside the plugin container, placed at a well-known location (e.g. /home/argocd/plugins/plugin.yaml). Argo CD is agnostic to the mechanism of how the plugin.yaml would be placed, but various options can be used on how to place this file, including: - Baking the file into the plugin image as part of docker build - Volume mapping the file through a configmap. Note that, while the ConfigManagementPlugin looks like a Kubernetes object, it is not actually a custom resource. It only follows kubernetes-style spec conventions. # metadata file is in the root and shell executor knows about it apiVersion: argoproj.io/v1alpha1 kind: ConfigManagementPlugin metadata: name: cdk8s spec: version: v1.0 init: command: [cdk8s, init] generate: command: [sh, -c, \"cdk8s synth && cat dist/*.yaml\"] discovery: find: - command: [find . -name main.ts] glob: \"**/*/main.ts\" check: - command: [-f ./main.ts] glob: \"main.ts\" allowConcurrency: true # enables generating multiple manifests in parallel.","title":"Configuration"},{"location":"Linux%20Notlar%C4%B1/config-management-plugin-v2/#config-management-plugin-api-server-cmp-server","text":"The Config Management Plugin API Server (cmp-server) will be a new Argo CD component whose sole responsibility will be to execute generate commands inside the plugin environment (the sidecar container), at the request of the repo-server. The cmp-server will expose the following APIs to the repo-server, GenerateManifests(path) - returns YAML output using plugin tooling IsSupported(path) - returns whether or not the given path is supported by the plugin At startup, cmp-server looks at the /home/argocd/cmp-server/plugin.yaml ConfigManagementPlugin specification file to understand how to perform the requests.","title":"Config Management Plugin API Server (cmp-server)"},{"location":"Linux%20Notlar%C4%B1/config-management-plugin-v2/#registration-communication","text":"The repo-server needs to understand what all plugins are available to render manifests. To do this, the cmp-server sidecars will register themselves as available plugins to the argocd-repo-server by populating named socket files in the shared volume between repo-server and cmp-server. e.g.: /home/argocd/plugins/ cdk8s.sock jkcfg.sock pulumi.sock The name of the socket file will indicate the plugin name. To discover the available plugins, the repo-server will list the shared plugins directory to discover the available plugins. To communicate with a plugin, the repo-server will simply need to connect to the socket and make gRPC calls against the cmp-server listening on the other side.","title":"Registration &amp; Communication"},{"location":"Linux%20Notlar%C4%B1/config-management-plugin-v2/#discovery-auto-selection-of-tool","text":"The plugin discovery will run in the main repo-server container. Argo CD repo-server lists the shared plugins directory and runs discover command from the specification file, whichever plugin provides a positive response first will be selected.","title":"Discovery (Auto-selection of Tool)"},{"location":"Linux%20Notlar%C4%B1/config-management-plugin-v2/#versioning","text":"There will be one sidecar container per version. Hence, for two different versions users will have to configure two different sidecars.","title":"Versioning"},{"location":"Linux%20Notlar%C4%B1/config-management-plugin-v2/#security-considerations","text":"The use of the plugin as sidecars separate from the repo-server is already a security improvement over the current v1.8 config management plugin mechanism, since the plugin tooling will no longer have access to the files of the argocd-repo-server image. However additional improvements can be made to increase security.","title":"Security Considerations"},{"location":"Linux%20Notlar%C4%B1/config-management-plugin-v2/#risks-and-mitigations","text":"One issue is that currently when repositories are cloned, the repo is cloned using the same UID of the repo-server user, and so all repository files are created using that UID. This means that a command which executes in the git repository path, could traverse upwards and see/write files which are outside of the repository tree. One proposal to prevent out-of-tree access to files, is that each git repository could be cloned with unique UIDs, different from the repo-server\u2019s UID. When the cmp-server executes the tooling command to generate manifests, the command could be executed using the UID of the git repository files. e.g.: cmd := exec.Command(command, args...) cmd.SysProcAttr = &syscall.SysProcAttr{} cmd.SysProcAttr.Credential = &syscall.Credential{Uid: uid, Gid: gid} This would ensure that the command could not read or write anything out-of-tree from the repository directory.","title":"Risks and Mitigations"},{"location":"Linux%20Notlar%C4%B1/config-management-plugin-v2/#upgrade-downgrade-strategy","text":"The argocd-repo-server manifest will change in order to populate the argocd-cmp-server binary inside the plugin container via an init container. # An init container will copy the argocd static binary into the shared volume # so that the CMP server can become the entrypoint initContainers: - command: - cp - -n - /usr/local/bin/argocd - /var/run/argocd/argocd-cmp-server image: quay.io/argoproj/argocd:latest name: copyutil volumeMounts: - mountPath: /var/run/argocd name: var-files # var-files is a shared volume between repo-server and cmp-server which holds: # 1) socket files that repo-server uses to communicate to each plugin # 2) git repositories cloned by repo-server volumes: - emptyDir: {} name: var-files After upgrading to CMP v2, an Argo CD operator will have to make following changes, In order to install a plugin, an Argo CD operator will simply have to patch argocd-repo-server to run config management plugin container as a sidecar, with argocd-cmp-server as it\u2019s entrypoint: # A plugin is a container image which runs as a sidecar, with the execution environment # necessary to render manifests. To install a plugin, containers: - name: cdk8s command: [/var/run/argocd/argocd-cmp-server] image: docker.ui/cdk8s/cdk8s:latest volumeMounts: - mountPath: /var/run/argocd name: var-files Plugins will be configured via a ConfigManagementPlugin manifest located inside the plugin container, placed at a well-known location (e.g. /plugin.yaml). Argo CD is agnostic to the mechanism of how the plugin.yaml would be placed, but various options can be used on how to place this file, including: Baking the file into the plugin image as part of docker build Volume mapping the file through a configmap. (For more details please refer to implementation details )","title":"Upgrade / Downgrade Strategy"},{"location":"Linux%20Notlar%C4%B1/config-management-plugin-v2/#drawbacks","text":"There aren't any major drawbacks to this proposal. Also, the advantages supersede the minor learning curve of the new way of managing plugins. However following are few minor drawbacks, With addition of plugin.yaml, there will be more yamls to manage Operators need to be aware of the modified kubernetes manifests in the subsequent version. The format of the CMP manifest is a new \"contract\" that would need to adhere the usual Argo CD compatibility promises in future.","title":"Drawbacks"},{"location":"Linux%20Notlar%C4%B1/config-management-plugin-v2/#alternatives","text":"ConfigManagementPlugin as CRD. Have a CR which the human operator creates: apiVersion: argoproj.io/v1alpha1 kind: ConfigManagementPlugin metadata: name: cdk8s spec: name: cdk8s image: docker.ui/cdk8s/cdk8s:latest version: v1.0 init: command: [cdk8s, init] generate: command: [sh, -c, \"cdk8s synth && cat dist/*.yaml\"] discovery: find: - command: [find . -name main.ts] glob: \"**/*/main.ts\" check: - command: [-f ./main.ts] glob: \"main.ts\" allowConcurrency: true # enables generating multiple manifests in parallel. Something magically patches the relevant manifest to add the sidecar.","title":"Alternatives"},{"location":"Linux%20Notlar%C4%B1/headless-argocd/","text":"title: Neat-enhancement-idea authors: - \"@alexmt\" sponsors: - TBD reviewers: - \"@jessesuen\" - TBD approvers: - \"@jessesuen\" - TBD creation-date: 2020-05-01 last-updated: 2020-05-01 Neat Enhancement Idea Support \"disabling\" multi-tenancy features by introducing Headless Argo CD. Summary There are two main group of GitOps users: Application developers - engineers who leverages Kubernetes to run applications. Cluster administrators - engineers who manage and support Kubernetes clusters for the organization. Argo CD is a perfect fit for application developers thanks to its multi-tenancy features. Instead of running a separate Argo CD instance for each team, it is possible to run on the instance and leverage features like SSO, RBAC, and Web user interface. However, this is not the case for cluster administrators. Administrators prefer to rely on Kubernetes RBAC and view SSO and Argo CD RBAC as an obstacle and security threat. SSO, RBAC, and UI/API are totally optional and can be disabled but it requires additional configuration and learning. Motivation It is proposed to introduce officially supported Headless Argo CD that encapsulates changes required to disable multi-tenancy features and provide a seamless experience for cluster administrators (or any other user who don't need multi-tenancy). Goals The goals of \"Headless Argo CD\" are: Provide an easy way to deploy Argo CD without API/UI The end-user should be able to install required components using a single kubectl apply command without following any additional instructions. Provide an easy way to use and manage Headless Argo CD The Headless Argo CD should provide a simple way to view and manage Argo CD applications using CLI/UI. The access control should be enforced by Kubernetes RBAC only. Easy transition from Headless to non-Headless Argo CD It is a common case when the Argo CD adopter wants to start small and then expand Argo CD to the whole organization. It should be easy to \"upgrade\" headless to full Argo CD installation. Non-Goals Not modified Argo CD The Headless Argo CD is not modified Argo CD. It is Argo CD distribution that missing UI/API and CLI that provides commands for Argo CD admin. Not deprecating existing operational methods The Headless Argo CD is not intended to deprecate any of the existing operational methods. Proposal Headless Installation Manifests In order to simplify installation of Argo CD without API we need introduce headless/install.yaml in manifests directory. The installation manifests should include only non HA controller, repo-server, Redis components, and RBAC. Headless CLI Without the API server, users won't be able to take advantage of Argo CD UI and argocd CLI so the user experience won't be complete. To fill that gap we need to change the argocd CLI that and support talking directly to Kubernetes without requiring Argo CD API Server. The argo-cd#6361 demonstrates required changes: Adds --headless flag to argocd commands If the --headless flag is set to true then pre-run function that starts \"local\" Argo CD API server and points CLI to locally running instance Finally on-demand port-forwards to Redis and repo server. The user should be able to store --headless flag in config in order to avoid specifying the flag for every command. It is proposed to use argocd login --headless to generate \"headless\" config. Local UI In addition to exposing CLI commands the PR introduces argocd admin dashboard command. The new command starts API server locally and exposes Argo CD UI locally. In order to make this possible the static assets have been embedded into Argo CD binary. Merge Argo CD Util The potential users of \"headless\" mode will benefit from argocd-util commands. The experience won't be smooth since they will need to switch back and forth between argocd and argocd-util . Given that we still have not finalized how users are supposed to get argocd-util binary (https://github.com/argoproj/argo-cd/issues/5307) it is proposed to deprecate argocd-util and merge in into argocd CLI under admin subcommand: argocd admin app generate-spec guestbook --repo https://github.com/argoproj/argocd-example-apps Use cases Add a list of detailed use cases this enhancement intends to take care of. Use case 1: As an Argo CD administrator, I would like to manage cluster resources using Argo CD without exposing API/UI outside of the cluster. Use case 2: As an Argo CD administrator, I would like to use Argo CD CLI commands and user interface to manage Argo CD applications/settings using only kubeconf file and without Argo CD API access. Security Considerations The Headless CLI/UI disables built-in Argo CD authentication and relies only on Kubernetes RBAC. So if the user will be able to make the same change using Headless CLI as using kubectl. Risks and Mitigations TBD Upgrade / Downgrade Strategy Switching to and from Argo CD Headless does not modify any persistent data or settings. So upgrade/downgrade should be seamless by just applying the right manifest file. Drawbacks Embedding static resources into the binary increases it's size by ~20 mb. The image size is the same. Alternatives Re-invent GitOps Agent CLI experience and don't re-use Argo CD.","title":"Headless argocd"},{"location":"Linux%20Notlar%C4%B1/headless-argocd/#neat-enhancement-idea","text":"Support \"disabling\" multi-tenancy features by introducing Headless Argo CD.","title":"Neat Enhancement Idea"},{"location":"Linux%20Notlar%C4%B1/headless-argocd/#summary","text":"There are two main group of GitOps users: Application developers - engineers who leverages Kubernetes to run applications. Cluster administrators - engineers who manage and support Kubernetes clusters for the organization. Argo CD is a perfect fit for application developers thanks to its multi-tenancy features. Instead of running a separate Argo CD instance for each team, it is possible to run on the instance and leverage features like SSO, RBAC, and Web user interface. However, this is not the case for cluster administrators. Administrators prefer to rely on Kubernetes RBAC and view SSO and Argo CD RBAC as an obstacle and security threat. SSO, RBAC, and UI/API are totally optional and can be disabled but it requires additional configuration and learning.","title":"Summary"},{"location":"Linux%20Notlar%C4%B1/headless-argocd/#motivation","text":"It is proposed to introduce officially supported Headless Argo CD that encapsulates changes required to disable multi-tenancy features and provide a seamless experience for cluster administrators (or any other user who don't need multi-tenancy).","title":"Motivation"},{"location":"Linux%20Notlar%C4%B1/headless-argocd/#goals","text":"The goals of \"Headless Argo CD\" are:","title":"Goals"},{"location":"Linux%20Notlar%C4%B1/headless-argocd/#provide-an-easy-way-to-deploy-argo-cd-without-apiui","text":"The end-user should be able to install required components using a single kubectl apply command without following any additional instructions.","title":"Provide an easy way to deploy Argo CD without API/UI"},{"location":"Linux%20Notlar%C4%B1/headless-argocd/#provide-an-easy-way-to-use-and-manage-headless-argo-cd","text":"The Headless Argo CD should provide a simple way to view and manage Argo CD applications using CLI/UI. The access control should be enforced by Kubernetes RBAC only.","title":"Provide an easy way to use and manage Headless Argo CD"},{"location":"Linux%20Notlar%C4%B1/headless-argocd/#easy-transition-from-headless-to-non-headless-argo-cd","text":"It is a common case when the Argo CD adopter wants to start small and then expand Argo CD to the whole organization. It should be easy to \"upgrade\" headless to full Argo CD installation.","title":"Easy transition from Headless to non-Headless Argo CD"},{"location":"Linux%20Notlar%C4%B1/headless-argocd/#non-goals","text":"","title":"Non-Goals"},{"location":"Linux%20Notlar%C4%B1/headless-argocd/#not-modified-argo-cd","text":"The Headless Argo CD is not modified Argo CD. It is Argo CD distribution that missing UI/API and CLI that provides commands for Argo CD admin.","title":"Not modified Argo CD"},{"location":"Linux%20Notlar%C4%B1/headless-argocd/#not-deprecating-existing-operational-methods","text":"The Headless Argo CD is not intended to deprecate any of the existing operational methods.","title":"Not deprecating existing operational methods"},{"location":"Linux%20Notlar%C4%B1/headless-argocd/#proposal","text":"","title":"Proposal"},{"location":"Linux%20Notlar%C4%B1/headless-argocd/#headless-installation-manifests","text":"In order to simplify installation of Argo CD without API we need introduce headless/install.yaml in manifests directory. The installation manifests should include only non HA controller, repo-server, Redis components, and RBAC.","title":"Headless Installation Manifests"},{"location":"Linux%20Notlar%C4%B1/headless-argocd/#headless-cli","text":"Without the API server, users won't be able to take advantage of Argo CD UI and argocd CLI so the user experience won't be complete. To fill that gap we need to change the argocd CLI that and support talking directly to Kubernetes without requiring Argo CD API Server. The argo-cd#6361 demonstrates required changes: Adds --headless flag to argocd commands If the --headless flag is set to true then pre-run function that starts \"local\" Argo CD API server and points CLI to locally running instance Finally on-demand port-forwards to Redis and repo server. The user should be able to store --headless flag in config in order to avoid specifying the flag for every command. It is proposed to use argocd login --headless to generate \"headless\" config.","title":"Headless CLI"},{"location":"Linux%20Notlar%C4%B1/headless-argocd/#local-ui","text":"In addition to exposing CLI commands the PR introduces argocd admin dashboard command. The new command starts API server locally and exposes Argo CD UI locally. In order to make this possible the static assets have been embedded into Argo CD binary.","title":"Local UI"},{"location":"Linux%20Notlar%C4%B1/headless-argocd/#merge-argo-cd-util","text":"The potential users of \"headless\" mode will benefit from argocd-util commands. The experience won't be smooth since they will need to switch back and forth between argocd and argocd-util . Given that we still have not finalized how users are supposed to get argocd-util binary (https://github.com/argoproj/argo-cd/issues/5307) it is proposed to deprecate argocd-util and merge in into argocd CLI under admin subcommand: argocd admin app generate-spec guestbook --repo https://github.com/argoproj/argocd-example-apps","title":"Merge Argo CD Util"},{"location":"Linux%20Notlar%C4%B1/headless-argocd/#use-cases","text":"Add a list of detailed use cases this enhancement intends to take care of.","title":"Use cases"},{"location":"Linux%20Notlar%C4%B1/headless-argocd/#use-case-1","text":"As an Argo CD administrator, I would like to manage cluster resources using Argo CD without exposing API/UI outside of the cluster.","title":"Use case 1:"},{"location":"Linux%20Notlar%C4%B1/headless-argocd/#use-case-2","text":"As an Argo CD administrator, I would like to use Argo CD CLI commands and user interface to manage Argo CD applications/settings using only kubeconf file and without Argo CD API access.","title":"Use case 2:"},{"location":"Linux%20Notlar%C4%B1/headless-argocd/#security-considerations","text":"The Headless CLI/UI disables built-in Argo CD authentication and relies only on Kubernetes RBAC. So if the user will be able to make the same change using Headless CLI as using kubectl.","title":"Security Considerations"},{"location":"Linux%20Notlar%C4%B1/headless-argocd/#risks-and-mitigations","text":"TBD","title":"Risks and Mitigations"},{"location":"Linux%20Notlar%C4%B1/headless-argocd/#upgrade-downgrade-strategy","text":"Switching to and from Argo CD Headless does not modify any persistent data or settings. So upgrade/downgrade should be seamless by just applying the right manifest file.","title":"Upgrade / Downgrade Strategy"},{"location":"Linux%20Notlar%C4%B1/headless-argocd/#drawbacks","text":"Embedding static resources into the binary increases it's size by ~20 mb. The image size is the same.","title":"Drawbacks"},{"location":"Linux%20Notlar%C4%B1/headless-argocd/#alternatives","text":"Re-invent GitOps Agent CLI experience and don't re-use Argo CD.","title":"Alternatives"},{"location":"Linux%20Notlar%C4%B1/project-repos-and-clusters/","text":"title: Neat-enhancement-idea authors: - \"@alexmt\" sponsors: - TBD reviewers: - \"@jessesuen\" - TBD approvers: - \"@jessesuen\" - TBD creation-date: 2020-04-19 last-updated: 2020-04-19 Neat Enhancement Idea Support project scoped Repositories and Clusters to enable self-service end-users onboarding. Summary The Argo CD has two type of users: Administrators who configure the Argo CD and manage the Argo CD projects. Developers who use Argo CD to manage resources in the Kubernetes clusters. These two roles enable sharing on the Argo CD instance in a multi-tenant environment. Typically the developer requests a new project from an administrator. The administrator creates the project, defines which repositories can and clusters can be used within the project which concludes the onboarding. The problem is that list of repositories and clusters are often not known during the onboarding process. Developers get it later and have to again contact an administrator, somehow share repo/cluster credentials. This back and forth process takes time and creates friction. We want to streamline the process of adding repositories and clusters to the project and make it self-service. The Argo CD admins should be able to optionally enable self onboarding of repositories/clusters for some projects. Motivation As long as the developer has the required credentials he/she should be able to add repository/cluster to the project without involving the administrator. To archive it, we are proposing to introduce project scoped repositories and clusters. Goals The goals of project scoped repositories and clusters are: Allow Self-Registering Repositories/Clusters in a Project Developer should be able to add a repository/cluster into the project without asking help from Argo CD administrator. Non-Goals Simplify Management of Shared Repositories/Clusters in a Project The repositories and clusters that can be used across multiple projects still have to be managed by Argo CD administrator. Proposal Project scoped repository/cluster The proposal is to introduce project scoped clusters and repositories that can be managed by a developer who has access to the project. The only difference of project scoped repository/cluster is that it has project field with the project name it belongs to. Both repositories and clusters are stored as Kubernetes Secrets, so a new field could be stored as a Secret data key: apiVersion: v1 kind: Secret metadata: name: argocd-example-apps labels: argocd.argoproj.io/secret-type: repository type: Opaque stringData: project: my-project1 # new project field name: argocd-example-apps url: https://github.com/argoproj/argocd-example-apps.git username: **** password: **** The project scoped repository/cluster is automatically allowed in the project. This enables developers to allow new cluster/repository without modifying the project. The project scoped repository/cluster still can be used in other project but it has to be allowed by admin (as normal repository/cluster). If another team wants to add the same repository/cluster into a different project they would have to ask admin. Project RBAC Changes The organization still might want to enforce certain rules so developers won't get permission to add a project-specific repository/cluster by default. The administrator might use RBAC to control access to the project scoped repositories cluster. The access to project scope actions will be checked using <projectName>/<name> pattern. For example, to allow users to add project scoped repositories admin would have to add the following RBAC rules: p, proj:my-project:admin, repositories, create, my-project/*, allow p, proj:my-project:admin, repositories, delete, my-project/*, allow p, proj:my-project:admin, repositories, update, my-project/*, allow This provides extra flexibility so that admin can have stricter rules. e.g.: p, proj:my-project:admin, repositories, update, my-project/\"https://github.my-company.com/*\", allow UI/CLI Changes Both User interface and CLI should get ability to optionally specify project. If project is specified than cluster/repository is considered project scoped: argocd repo add --name stable https://charts.helm.sh/stable --type helm --project my-project Use cases Add a list of detailed use cases this enhancement intends to take care of. Use case 1: As a developer, I would like to register credentials of a Git repository I own so I can deploy manifests stored in that repository. Use case 2: As a developer, I would like to register credentials of a Kubernetes cluster so I can manage resources in that cluster. Implementation Details/Notes/Constraints [optional] As of v2.0.1 Argo CD stores Repository non-sensitive metadata in argocd-cm ConfigMap. This is going to change in https://github.com/argoproj/argo-cd/issues/5436. So we would have to wait for #5436 implementation. Detailed examples Security Considerations The security considerations are explained in Project RBAC Changes section. Risks and Mitigations Deverlopers Might Overload Argo CD The developers are typically not responsible for Argo CD health and don't have access to Argo CD metrics. So adding too many clusters might overload Argo CD. Two improvements are proposed to mitigate that risk: Improved Cluster Metrics The existing metrics should be improved so that administrators could quickly discover if the project \"has\" too many clusters and easily discover who added the cluster: Add project tag to existing cluster metrics: clustercollector.go . Document how administrator can leverage metrics to configure limits per project and get notifications when the limit is exceeded. Add owner field to the cluster (and repository for consistency ) and use it to store username of the user who added cluster/repository. The administrator can use the owner field to contact the person who added the cluster and exceeded the limit. Project Sharding It should be possible to automatically assign project scoped clusters to the specific clusters shard. This way admin can isolate large projects from each other and limit the blast radius. Upgrade / Downgrade Strategy In case of rollback to the previous version, the project scoped clusters/repositories will be treated as normal (non-scoped) clusters/repositories. So it is safe to rollback and then roll forward. Open Issues If the same cluster or repository required in multiple projects that there is no way to configure it without involving Argo CD admin. The end-user would still have to reach out to the administrator and request Argo CD config changes. Alternatives Don't introduce first-class support for this feature and instead create optional CRD that manages clusters and repositories. In this case, the first-class support seems like a very natural fit into the existing design.","title":"Project repos and clusters"},{"location":"Linux%20Notlar%C4%B1/project-repos-and-clusters/#neat-enhancement-idea","text":"Support project scoped Repositories and Clusters to enable self-service end-users onboarding.","title":"Neat Enhancement Idea"},{"location":"Linux%20Notlar%C4%B1/project-repos-and-clusters/#summary","text":"The Argo CD has two type of users: Administrators who configure the Argo CD and manage the Argo CD projects. Developers who use Argo CD to manage resources in the Kubernetes clusters. These two roles enable sharing on the Argo CD instance in a multi-tenant environment. Typically the developer requests a new project from an administrator. The administrator creates the project, defines which repositories can and clusters can be used within the project which concludes the onboarding. The problem is that list of repositories and clusters are often not known during the onboarding process. Developers get it later and have to again contact an administrator, somehow share repo/cluster credentials. This back and forth process takes time and creates friction. We want to streamline the process of adding repositories and clusters to the project and make it self-service. The Argo CD admins should be able to optionally enable self onboarding of repositories/clusters for some projects.","title":"Summary"},{"location":"Linux%20Notlar%C4%B1/project-repos-and-clusters/#motivation","text":"As long as the developer has the required credentials he/she should be able to add repository/cluster to the project without involving the administrator. To archive it, we are proposing to introduce project scoped repositories and clusters.","title":"Motivation"},{"location":"Linux%20Notlar%C4%B1/project-repos-and-clusters/#goals","text":"The goals of project scoped repositories and clusters are:","title":"Goals"},{"location":"Linux%20Notlar%C4%B1/project-repos-and-clusters/#allow-self-registering-repositoriesclusters-in-a-project","text":"Developer should be able to add a repository/cluster into the project without asking help from Argo CD administrator.","title":"Allow Self-Registering Repositories/Clusters in a Project"},{"location":"Linux%20Notlar%C4%B1/project-repos-and-clusters/#non-goals","text":"","title":"Non-Goals"},{"location":"Linux%20Notlar%C4%B1/project-repos-and-clusters/#simplify-management-of-shared-repositoriesclusters-in-a-project","text":"The repositories and clusters that can be used across multiple projects still have to be managed by Argo CD administrator.","title":"Simplify Management of Shared Repositories/Clusters in a Project"},{"location":"Linux%20Notlar%C4%B1/project-repos-and-clusters/#proposal","text":"","title":"Proposal"},{"location":"Linux%20Notlar%C4%B1/project-repos-and-clusters/#project-scoped-repositorycluster","text":"The proposal is to introduce project scoped clusters and repositories that can be managed by a developer who has access to the project. The only difference of project scoped repository/cluster is that it has project field with the project name it belongs to. Both repositories and clusters are stored as Kubernetes Secrets, so a new field could be stored as a Secret data key: apiVersion: v1 kind: Secret metadata: name: argocd-example-apps labels: argocd.argoproj.io/secret-type: repository type: Opaque stringData: project: my-project1 # new project field name: argocd-example-apps url: https://github.com/argoproj/argocd-example-apps.git username: **** password: **** The project scoped repository/cluster is automatically allowed in the project. This enables developers to allow new cluster/repository without modifying the project. The project scoped repository/cluster still can be used in other project but it has to be allowed by admin (as normal repository/cluster). If another team wants to add the same repository/cluster into a different project they would have to ask admin.","title":"Project scoped repository/cluster"},{"location":"Linux%20Notlar%C4%B1/project-repos-and-clusters/#project-rbac-changes","text":"The organization still might want to enforce certain rules so developers won't get permission to add a project-specific repository/cluster by default. The administrator might use RBAC to control access to the project scoped repositories cluster. The access to project scope actions will be checked using <projectName>/<name> pattern. For example, to allow users to add project scoped repositories admin would have to add the following RBAC rules: p, proj:my-project:admin, repositories, create, my-project/*, allow p, proj:my-project:admin, repositories, delete, my-project/*, allow p, proj:my-project:admin, repositories, update, my-project/*, allow This provides extra flexibility so that admin can have stricter rules. e.g.: p, proj:my-project:admin, repositories, update, my-project/\"https://github.my-company.com/*\", allow","title":"Project RBAC Changes"},{"location":"Linux%20Notlar%C4%B1/project-repos-and-clusters/#uicli-changes","text":"Both User interface and CLI should get ability to optionally specify project. If project is specified than cluster/repository is considered project scoped: argocd repo add --name stable https://charts.helm.sh/stable --type helm --project my-project","title":"UI/CLI Changes"},{"location":"Linux%20Notlar%C4%B1/project-repos-and-clusters/#use-cases","text":"Add a list of detailed use cases this enhancement intends to take care of.","title":"Use cases"},{"location":"Linux%20Notlar%C4%B1/project-repos-and-clusters/#use-case-1","text":"As a developer, I would like to register credentials of a Git repository I own so I can deploy manifests stored in that repository.","title":"Use case 1:"},{"location":"Linux%20Notlar%C4%B1/project-repos-and-clusters/#use-case-2","text":"As a developer, I would like to register credentials of a Kubernetes cluster so I can manage resources in that cluster.","title":"Use case 2:"},{"location":"Linux%20Notlar%C4%B1/project-repos-and-clusters/#implementation-detailsnotesconstraints-optional","text":"As of v2.0.1 Argo CD stores Repository non-sensitive metadata in argocd-cm ConfigMap. This is going to change in https://github.com/argoproj/argo-cd/issues/5436. So we would have to wait for #5436 implementation.","title":"Implementation Details/Notes/Constraints [optional]"},{"location":"Linux%20Notlar%C4%B1/project-repos-and-clusters/#detailed-examples","text":"","title":"Detailed examples"},{"location":"Linux%20Notlar%C4%B1/project-repos-and-clusters/#security-considerations","text":"The security considerations are explained in Project RBAC Changes section.","title":"Security Considerations"},{"location":"Linux%20Notlar%C4%B1/project-repos-and-clusters/#risks-and-mitigations","text":"","title":"Risks and Mitigations"},{"location":"Linux%20Notlar%C4%B1/project-repos-and-clusters/#deverlopers-might-overload-argo-cd","text":"The developers are typically not responsible for Argo CD health and don't have access to Argo CD metrics. So adding too many clusters might overload Argo CD. Two improvements are proposed to mitigate that risk: Improved Cluster Metrics The existing metrics should be improved so that administrators could quickly discover if the project \"has\" too many clusters and easily discover who added the cluster: Add project tag to existing cluster metrics: clustercollector.go . Document how administrator can leverage metrics to configure limits per project and get notifications when the limit is exceeded. Add owner field to the cluster (and repository for consistency ) and use it to store username of the user who added cluster/repository. The administrator can use the owner field to contact the person who added the cluster and exceeded the limit. Project Sharding It should be possible to automatically assign project scoped clusters to the specific clusters shard. This way admin can isolate large projects from each other and limit the blast radius.","title":"Deverlopers Might Overload Argo CD"},{"location":"Linux%20Notlar%C4%B1/project-repos-and-clusters/#upgrade-downgrade-strategy","text":"In case of rollback to the previous version, the project scoped clusters/repositories will be treated as normal (non-scoped) clusters/repositories. So it is safe to rollback and then roll forward.","title":"Upgrade / Downgrade Strategy"},{"location":"Linux%20Notlar%C4%B1/project-repos-and-clusters/#open-issues","text":"If the same cluster or repository required in multiple projects that there is no way to configure it without involving Argo CD admin. The end-user would still have to reach out to the administrator and request Argo CD config changes.","title":"Open Issues"},{"location":"Linux%20Notlar%C4%B1/project-repos-and-clusters/#alternatives","text":"Don't introduce first-class support for this feature and instead create optional CRD that manages clusters and repositories. In this case, the first-class support seems like a very natural fit into the existing design.","title":"Alternatives"},{"location":"Postgresql%20Notlar%C4%B1/app_deletion/","text":"App Deletion Apps can be deleted with or without a cascade option. A cascade delete , deletes both the app and its resources, rather than only the app. Deletion Using argocd To perform a non-cascade delete: argocd app delete APPNAME --cascade=false To perform a cascade delete: argocd app delete APPNAME --cascade or argocd app delete APPNAME Deletion Using kubectl To perform a non-cascade delete: kubectl delete app APPNAME To perform a cascade delete set the finalizer, e.g. using kubctl patch : kubectl patch app APPNAME -p '{\"metadata\": {\"finalizers\": [\"resources-finalizer.argocd.argoproj.io\"]}}' --type merge kubectl delete app APPNAME About The Deletion Finalizer For the technical amongst you, the Argo CD application controller watches for this finalizer: metadata: finalizers: - resources-finalizer.argocd.argoproj.io Argo CD's app controller watches for this and will then delete both the app and its resources. When you invoke argocd app delete with --cascade , the finalizer is added automatically.","title":"App Deletion"},{"location":"Postgresql%20Notlar%C4%B1/app_deletion/#app-deletion","text":"Apps can be deleted with or without a cascade option. A cascade delete , deletes both the app and its resources, rather than only the app.","title":"App Deletion"},{"location":"Postgresql%20Notlar%C4%B1/app_deletion/#deletion-using-argocd","text":"To perform a non-cascade delete: argocd app delete APPNAME --cascade=false To perform a cascade delete: argocd app delete APPNAME --cascade or argocd app delete APPNAME","title":"Deletion Using argocd"},{"location":"Postgresql%20Notlar%C4%B1/app_deletion/#deletion-using-kubectl","text":"To perform a non-cascade delete: kubectl delete app APPNAME To perform a cascade delete set the finalizer, e.g. using kubctl patch : kubectl patch app APPNAME -p '{\"metadata\": {\"finalizers\": [\"resources-finalizer.argocd.argoproj.io\"]}}' --type merge kubectl delete app APPNAME","title":"Deletion Using kubectl"},{"location":"Postgresql%20Notlar%C4%B1/app_deletion/#about-the-deletion-finalizer","text":"For the technical amongst you, the Argo CD application controller watches for this finalizer: metadata: finalizers: - resources-finalizer.argocd.argoproj.io Argo CD's app controller watches for this and will then delete both the app and its resources. When you invoke argocd app delete with --cascade , the finalizer is added automatically.","title":"About The Deletion Finalizer"},{"location":"Postgresql%20Notlar%C4%B1/index./","text":"App Deletion Apps can be deleted with or without a cascade option. A cascade delete , deletes both the app and its resources, rather than only the app. Deletion Using argocd To perform a non-cascade delete: argocd app delete APPNAME --cascade=false To perform a cascade delete: argocd app delete APPNAME --cascade or argocd app delete APPNAME Deletion Using kubectl To perform a non-cascade delete: kubectl delete app APPNAME To perform a cascade delete set the finalizer, e.g. using kubctl patch : kubectl patch app APPNAME -p '{\"metadata\": {\"finalizers\": [\"resources-finalizer.argocd.argoproj.io\"]}}' --type merge kubectl delete app APPNAME About The Deletion Finalizer For the technical amongst you, the Argo CD application controller watches for this finalizer: metadata: finalizers: - resources-finalizer.argocd.argoproj.io Argo CD's app controller watches for this and will then delete both the app and its resources. When you invoke argocd app delete with --cascade , the finalizer is added automatically.","title":"App Deletion"},{"location":"Postgresql%20Notlar%C4%B1/index./#app-deletion","text":"Apps can be deleted with or without a cascade option. A cascade delete , deletes both the app and its resources, rather than only the app.","title":"App Deletion"},{"location":"Postgresql%20Notlar%C4%B1/index./#deletion-using-argocd","text":"To perform a non-cascade delete: argocd app delete APPNAME --cascade=false To perform a cascade delete: argocd app delete APPNAME --cascade or argocd app delete APPNAME","title":"Deletion Using argocd"},{"location":"Postgresql%20Notlar%C4%B1/index./#deletion-using-kubectl","text":"To perform a non-cascade delete: kubectl delete app APPNAME To perform a cascade delete set the finalizer, e.g. using kubctl patch : kubectl patch app APPNAME -p '{\"metadata\": {\"finalizers\": [\"resources-finalizer.argocd.argoproj.io\"]}}' --type merge kubectl delete app APPNAME","title":"Deletion Using kubectl"},{"location":"Postgresql%20Notlar%C4%B1/index./#about-the-deletion-finalizer","text":"For the technical amongst you, the Argo CD application controller watches for this finalizer: metadata: finalizers: - resources-finalizer.argocd.argoproj.io Argo CD's app controller watches for this and will then delete both the app and its resources. When you invoke argocd app delete with --cascade , the finalizer is added automatically.","title":"About The Deletion Finalizer"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd/","text":"argocd argocd controls a Argo CD server argocd [flags] Options --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) -h, --help help for argocd --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd account - Manage account settings argocd admin - Contains a set of commands useful for Argo CD administrators and requires direct Kubernetes access argocd app - Manage applications argocd cert - Manage repository certificates and SSH known hosts entries argocd cluster - Manage cluster credentials argocd completion - output shell completion code for the specified shell (bash or zsh) argocd context - Switch between contexts argocd gpg - Manage GPG keys used for signature verification argocd login - Log in to Argo CD argocd logout - Log out from Argo CD argocd proj - Manage projects argocd relogin - Refresh an expired authenticate token argocd repo - Manage repository connection parameters argocd repocreds - Manage repository connection parameters argocd version - Print version information","title":"Argocd"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd/#argocd","text":"argocd controls a Argo CD server argocd [flags]","title":"argocd"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd/#options","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) -h, --help help for argocd --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd/#see-also","text":"argocd account - Manage account settings argocd admin - Contains a set of commands useful for Argo CD administrators and requires direct Kubernetes access argocd app - Manage applications argocd cert - Manage repository certificates and SSH known hosts entries argocd cluster - Manage cluster credentials argocd completion - output shell completion code for the specified shell (bash or zsh) argocd context - Switch between contexts argocd gpg - Manage GPG keys used for signature verification argocd login - Log in to Argo CD argocd logout - Log out from Argo CD argocd proj - Manage projects argocd relogin - Refresh an expired authenticate token argocd repo - Manage repository connection parameters argocd repocreds - Manage repository connection parameters argocd version - Print version information","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account/","text":"argocd account Manage account settings argocd account [flags] Options --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for account --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd - argocd controls a Argo CD server argocd account can-i - Can I argocd account delete-token - Deletes account token argocd account generate-token - Generate account token argocd account get - Get account details argocd account get-user-info - Get user info argocd account list - List accounts argocd account update-password - Update an account's password","title":"Argocd account"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account/#argocd-account","text":"Manage account settings argocd account [flags]","title":"argocd account"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account/#options","text":"--as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for account --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account/#see-also","text":"argocd - argocd controls a Argo CD server argocd account can-i - Can I argocd account delete-token - Deletes account token argocd account generate-token - Generate account token argocd account get - Get account details argocd account get-user-info - Get user info argocd account list - List accounts argocd account update-password - Update an account's password","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_can-i/","text":"argocd account can-i Can I argocd account can-i ACTION RESOURCE SUBRESOURCE [flags] Examples # Can I sync any app? argocd account can-i sync applications '*' # Can I update a project? argocd account can-i update projects 'default' # Can I create a cluster? argocd account can-i create clusters '*' Actions: [get create update delete sync override] Resources: [clusters projects applications repositories certificates] Options -h, --help help for can-i Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd account - Manage account settings","title":"Argocd account can i"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_can-i/#argocd-account-can-i","text":"Can I argocd account can-i ACTION RESOURCE SUBRESOURCE [flags]","title":"argocd account can-i"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_can-i/#examples","text":"# Can I sync any app? argocd account can-i sync applications '*' # Can I update a project? argocd account can-i update projects 'default' # Can I create a cluster? argocd account can-i create clusters '*' Actions: [get create update delete sync override] Resources: [clusters projects applications repositories certificates]","title":"Examples"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_can-i/#options","text":"-h, --help help for can-i","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_can-i/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_can-i/#see-also","text":"argocd account - Manage account settings","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_delete-token/","text":"argocd account delete-token Deletes account token argocd account delete-token [flags] Examples # Delete token of the currently logged in account argocd account delete-token ID # Delete token of the account with the specified name argocd account delete-token --account <account-name> ID Options -a, --account string Account name. Defaults to the current account. -h, --help help for delete-token Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd account - Manage account settings","title":"Argocd account delete token"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_delete-token/#argocd-account-delete-token","text":"Deletes account token argocd account delete-token [flags]","title":"argocd account delete-token"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_delete-token/#examples","text":"# Delete token of the currently logged in account argocd account delete-token ID # Delete token of the account with the specified name argocd account delete-token --account <account-name> ID","title":"Examples"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_delete-token/#options","text":"-a, --account string Account name. Defaults to the current account. -h, --help help for delete-token","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_delete-token/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_delete-token/#see-also","text":"argocd account - Manage account settings","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_generate-token/","text":"argocd account generate-token Generate account token argocd account generate-token [flags] Examples # Generate token for the currently logged in account argocd account generate-token # Generate token for the account with the specified name argocd account generate-token --account <account-name> Options -a, --account string Account name. Defaults to the current account. -e, --expires-in string Duration before the token will expire. (Default: No expiration) (default \"0s\") -h, --help help for generate-token --id string Optional token id. Fall back to uuid if not value specified. Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd account - Manage account settings","title":"Argocd account generate token"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_generate-token/#argocd-account-generate-token","text":"Generate account token argocd account generate-token [flags]","title":"argocd account generate-token"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_generate-token/#examples","text":"# Generate token for the currently logged in account argocd account generate-token # Generate token for the account with the specified name argocd account generate-token --account <account-name>","title":"Examples"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_generate-token/#options","text":"-a, --account string Account name. Defaults to the current account. -e, --expires-in string Duration before the token will expire. (Default: No expiration) (default \"0s\") -h, --help help for generate-token --id string Optional token id. Fall back to uuid if not value specified.","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_generate-token/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_generate-token/#see-also","text":"argocd account - Manage account settings","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_get-user-info/","text":"argocd account get-user-info Get user info argocd account get-user-info [flags] Options -h, --help help for get-user-info -o, --output string Output format. One of: yaml, json Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd account - Manage account settings","title":"Argocd account get user info"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_get-user-info/#argocd-account-get-user-info","text":"Get user info argocd account get-user-info [flags]","title":"argocd account get-user-info"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_get-user-info/#options","text":"-h, --help help for get-user-info -o, --output string Output format. One of: yaml, json","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_get-user-info/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_get-user-info/#see-also","text":"argocd account - Manage account settings","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_get/","text":"argocd account get Get account details argocd account get [flags] Examples # Get the currently logged in account details argocd account get # Get details for an account by name argocd account get --account <account-name> Options -a, --account string Account name. Defaults to the current account. -h, --help help for get -o, --output string Output format. One of: json|yaml|wide|name (default \"wide\") Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd account - Manage account settings","title":"Argocd account get"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_get/#argocd-account-get","text":"Get account details argocd account get [flags]","title":"argocd account get"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_get/#examples","text":"# Get the currently logged in account details argocd account get # Get details for an account by name argocd account get --account <account-name>","title":"Examples"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_get/#options","text":"-a, --account string Account name. Defaults to the current account. -h, --help help for get -o, --output string Output format. One of: json|yaml|wide|name (default \"wide\")","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_get/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_get/#see-also","text":"argocd account - Manage account settings","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_list/","text":"argocd account list List accounts argocd account list [flags] Examples argocd account list Options -h, --help help for list -o, --output string Output format. One of: json|yaml|wide|name (default \"wide\") Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd account - Manage account settings","title":"Argocd account list"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_list/#argocd-account-list","text":"List accounts argocd account list [flags]","title":"argocd account list"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_list/#examples","text":"argocd account list","title":"Examples"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_list/#options","text":"-h, --help help for list -o, --output string Output format. One of: json|yaml|wide|name (default \"wide\")","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_list/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_list/#see-also","text":"argocd account - Manage account settings","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_update-password/","text":"argocd account update-password Update an account's password Synopsis This command can be used to update the password of the currently logged on user, or an arbitrary local user account when the currently logged on user has appropriate RBAC permissions to change other accounts. argocd account update-password [flags] Examples # Update the current user's password argocd account update-password # Update the password for user foobar argocd account update-password --account foobar Options --account string an account name that should be updated. Defaults to current user account --current-password string password of the currently logged on user -h, --help help for update-password --new-password string new password you want to update to Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd account - Manage account settings","title":"Argocd account update password"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_update-password/#argocd-account-update-password","text":"Update an account's password","title":"argocd account update-password"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_update-password/#synopsis","text":"This command can be used to update the password of the currently logged on user, or an arbitrary local user account when the currently logged on user has appropriate RBAC permissions to change other accounts. argocd account update-password [flags]","title":"Synopsis"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_update-password/#examples","text":"# Update the current user's password argocd account update-password # Update the password for user foobar argocd account update-password --account foobar","title":"Examples"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_update-password/#options","text":"--account string an account name that should be updated. Defaults to current user account --current-password string password of the currently logged on user -h, --help help for update-password --new-password string new password you want to update to","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_update-password/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_account_update-password/#see-also","text":"argocd account - Manage account settings","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin/","text":"argocd admin Contains a set of commands useful for Argo CD administrators and requires direct Kubernetes access argocd admin [flags] Options -h, --help help for admin Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd - argocd controls a Argo CD server argocd admin app - Manage applications configuration argocd admin cluster - Manage clusters configuration argocd admin dashboard - Starts Argo CD Web UI locally argocd admin export - Export all Argo CD data to stdout (default) or a file argocd admin import - Import Argo CD data from stdin (specify `-') or a file argocd admin proj - Manage projects configuration argocd admin repo - Manage repositories configuration argocd admin settings - Provides set of commands for settings validation and troubleshooting","title":"Argocd admin"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin/#argocd-admin","text":"Contains a set of commands useful for Argo CD administrators and requires direct Kubernetes access argocd admin [flags]","title":"argocd admin"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin/#options","text":"-h, --help help for admin","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin/#see-also","text":"argocd - argocd controls a Argo CD server argocd admin app - Manage applications configuration argocd admin cluster - Manage clusters configuration argocd admin dashboard - Starts Argo CD Web UI locally argocd admin export - Export all Argo CD data to stdout (default) or a file argocd admin import - Import Argo CD data from stdin (specify `-') or a file argocd admin proj - Manage projects configuration argocd admin repo - Manage repositories configuration argocd admin settings - Provides set of commands for settings validation and troubleshooting","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_app/","text":"argocd admin app Manage applications configuration argocd admin app [flags] Options -h, --help help for app Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd admin - Contains a set of commands useful for Argo CD administrators and requires direct Kubernetes access argocd admin app diff-reconcile-results - Compare results of two reconciliations and print diff. argocd admin app generate-spec - Generate declarative config for an application argocd admin app get-reconcile-results - Reconcile all applications and stores reconciliation summary in the specified file.","title":"Argocd admin app"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_app/#argocd-admin-app","text":"Manage applications configuration argocd admin app [flags]","title":"argocd admin app"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_app/#options","text":"-h, --help help for app","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_app/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_app/#see-also","text":"argocd admin - Contains a set of commands useful for Argo CD administrators and requires direct Kubernetes access argocd admin app diff-reconcile-results - Compare results of two reconciliations and print diff. argocd admin app generate-spec - Generate declarative config for an application argocd admin app get-reconcile-results - Reconcile all applications and stores reconciliation summary in the specified file.","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_app_diff-reconcile-results/","text":"argocd admin app diff-reconcile-results Compare results of two reconciliations and print diff. argocd admin app diff-reconcile-results PATH1 PATH2 [flags] Options -h, --help help for diff-reconcile-results Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd admin app - Manage applications configuration","title":"Argocd admin app diff reconcile results"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_app_diff-reconcile-results/#argocd-admin-app-diff-reconcile-results","text":"Compare results of two reconciliations and print diff. argocd admin app diff-reconcile-results PATH1 PATH2 [flags]","title":"argocd admin app diff-reconcile-results"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_app_diff-reconcile-results/#options","text":"-h, --help help for diff-reconcile-results","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_app_diff-reconcile-results/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_app_diff-reconcile-results/#see-also","text":"argocd admin app - Manage applications configuration","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_app_generate-spec/","text":"argocd admin app generate-spec Generate declarative config for an application argocd admin app generate-spec APPNAME [flags] Examples # Generate declarative config for a directory app argocd admin app generate-spec guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --directory-recurse # Generate declarative config for a Jsonnet app argocd admin app generate-spec jsonnet-guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path jsonnet-guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --jsonnet-ext-str replicas=2 # Generate declarative config for a Helm app argocd admin app generate-spec helm-guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path helm-guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --helm-set replicaCount=2 # Generate declarative config for a Helm app from a Helm repo argocd admin app generate-spec nginx-ingress --repo https://charts.helm.sh/stable --helm-chart nginx-ingress --revision 1.24.3 --dest-namespace default --dest-server https://kubernetes.default.svc # Generate declarative config for a Kustomize app argocd admin app generate-spec kustomize-guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path kustomize-guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --kustomize-image gcr.io/heptio-images/ks-guestbook-demo:0.1 # Generate declarative config for a app using a custom tool: argocd admin app generate-spec ksane --repo https://github.com/argoproj/argocd-example-apps.git --path plugins/kasane --dest-namespace default --dest-server https://kubernetes.default.svc --config-management-plugin kasane Options --allow-empty Set allow zero live resources when sync is automated --annotations stringArray Set metadata annotations (e.g. example=value) --auto-prune Set automatic pruning when sync is automated --config-management-plugin string Config management plugin name --dest-name string K8s cluster Name (e.g. minikube) --dest-namespace string K8s target namespace (overrides the namespace specified in the ksonnet app.yaml) --dest-server string K8s cluster URL (e.g. https://kubernetes.default.svc) --directory-exclude string Set glob expression used to exclude files from application source path --directory-include string Set glob expression used to include files from application source path --directory-recurse Recurse directory --env string Application environment to monitor -f, --file string Filename or URL to Kubernetes manifests for the app --helm-chart string Helm Chart name --helm-pass-credentials Pass credentials to all domain --helm-set stringArray Helm set values on the command line (can be repeated to set several values: --helm-set key1=val1 --helm-set key2=val2) --helm-set-file stringArray Helm set values from respective files specified via the command line (can be repeated to set several values: --helm-set-file key1=path1 --helm-set-file key2=path2) --helm-set-string stringArray Helm set STRING values on the command line (can be repeated to set several values: --helm-set-string key1=val1 --helm-set-string key2=val2) --helm-version string Helm version -h, --help help for generate-spec -i, --inline If set then generated resource is written back to the file specified in --file flag --jsonnet-ext-var-code stringArray Jsonnet ext var --jsonnet-ext-var-str stringArray Jsonnet string ext var --jsonnet-libs stringArray Additional jsonnet libs (prefixed by repoRoot) --jsonnet-tla-code stringArray Jsonnet top level code arguments --jsonnet-tla-str stringArray Jsonnet top level string arguments --kustomize-common-annotation stringArray Set common labels in Kustomize --kustomize-common-label stringArray Set common labels in Kustomize --kustomize-force-common-annotation Force common annotations in Kustomize --kustomize-force-common-label Force common labels in Kustomize --kustomize-image stringArray Kustomize images (e.g. --kustomize-image node:8.15.0 --kustomize-image mysql=mariadb,alpine@sha256:24a0c4b4a4c0eb97a1aabb8e29f18e917d05abfe1b7a7c07857230879ce7d3d) --kustomize-version string Kustomize version -l, --label stringArray Labels to apply to the app --name string A name for the app, ignored if a file is set (DEPRECATED) --nameprefix string Kustomize nameprefix --namesuffix string Kustomize namesuffix -o, --output string Output format. One of: json|yaml (default \"yaml\") -p, --parameter stringArray set a parameter override (e.g. -p guestbook=image=example/guestbook:latest) --path string Path in repository to the app directory, ignored if a file is set --plugin-env stringArray Additional plugin envs --project string Application project name --release-name string Helm release-name --repo string Repository URL, ignored if a file is set --revision string The tracking source branch, tag, commit or Helm chart version the application will sync to --revision-history-limit int How many items to keep in revision history (default 10) --self-heal Set self healing when sync is automated --sync-option Prune=false Add or remove a sync option, e.g add Prune=false. Remove using `!` prefix, e.g. `!Prune=false` --sync-policy string Set the sync policy (one of: none, automated (aliases of automated: auto, automatic)) --sync-retry-backoff-duration duration Sync retry backoff base duration. Input needs to be a duration (e.g. 2m, 1h) (default 5s) --sync-retry-backoff-factor int Factor multiplies the base duration after each failed sync retry (default 2) --sync-retry-backoff-max-duration duration Max sync retry backoff duration. Input needs to be a duration (e.g. 2m, 1h) (default 3m0s) --sync-retry-limit int Max number of allowed sync retries --validate Validation of repo and cluster (default true) --values stringArray Helm values file(s) to use --values-literal-file string Filename or URL to import as a literal Helm values block Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd admin app - Manage applications configuration","title":"Argocd admin app generate spec"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_app_generate-spec/#argocd-admin-app-generate-spec","text":"Generate declarative config for an application argocd admin app generate-spec APPNAME [flags]","title":"argocd admin app generate-spec"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_app_generate-spec/#examples","text":"# Generate declarative config for a directory app argocd admin app generate-spec guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --directory-recurse # Generate declarative config for a Jsonnet app argocd admin app generate-spec jsonnet-guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path jsonnet-guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --jsonnet-ext-str replicas=2 # Generate declarative config for a Helm app argocd admin app generate-spec helm-guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path helm-guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --helm-set replicaCount=2 # Generate declarative config for a Helm app from a Helm repo argocd admin app generate-spec nginx-ingress --repo https://charts.helm.sh/stable --helm-chart nginx-ingress --revision 1.24.3 --dest-namespace default --dest-server https://kubernetes.default.svc # Generate declarative config for a Kustomize app argocd admin app generate-spec kustomize-guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path kustomize-guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --kustomize-image gcr.io/heptio-images/ks-guestbook-demo:0.1 # Generate declarative config for a app using a custom tool: argocd admin app generate-spec ksane --repo https://github.com/argoproj/argocd-example-apps.git --path plugins/kasane --dest-namespace default --dest-server https://kubernetes.default.svc --config-management-plugin kasane","title":"Examples"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_app_generate-spec/#options","text":"--allow-empty Set allow zero live resources when sync is automated --annotations stringArray Set metadata annotations (e.g. example=value) --auto-prune Set automatic pruning when sync is automated --config-management-plugin string Config management plugin name --dest-name string K8s cluster Name (e.g. minikube) --dest-namespace string K8s target namespace (overrides the namespace specified in the ksonnet app.yaml) --dest-server string K8s cluster URL (e.g. https://kubernetes.default.svc) --directory-exclude string Set glob expression used to exclude files from application source path --directory-include string Set glob expression used to include files from application source path --directory-recurse Recurse directory --env string Application environment to monitor -f, --file string Filename or URL to Kubernetes manifests for the app --helm-chart string Helm Chart name --helm-pass-credentials Pass credentials to all domain --helm-set stringArray Helm set values on the command line (can be repeated to set several values: --helm-set key1=val1 --helm-set key2=val2) --helm-set-file stringArray Helm set values from respective files specified via the command line (can be repeated to set several values: --helm-set-file key1=path1 --helm-set-file key2=path2) --helm-set-string stringArray Helm set STRING values on the command line (can be repeated to set several values: --helm-set-string key1=val1 --helm-set-string key2=val2) --helm-version string Helm version -h, --help help for generate-spec -i, --inline If set then generated resource is written back to the file specified in --file flag --jsonnet-ext-var-code stringArray Jsonnet ext var --jsonnet-ext-var-str stringArray Jsonnet string ext var --jsonnet-libs stringArray Additional jsonnet libs (prefixed by repoRoot) --jsonnet-tla-code stringArray Jsonnet top level code arguments --jsonnet-tla-str stringArray Jsonnet top level string arguments --kustomize-common-annotation stringArray Set common labels in Kustomize --kustomize-common-label stringArray Set common labels in Kustomize --kustomize-force-common-annotation Force common annotations in Kustomize --kustomize-force-common-label Force common labels in Kustomize --kustomize-image stringArray Kustomize images (e.g. --kustomize-image node:8.15.0 --kustomize-image mysql=mariadb,alpine@sha256:24a0c4b4a4c0eb97a1aabb8e29f18e917d05abfe1b7a7c07857230879ce7d3d) --kustomize-version string Kustomize version -l, --label stringArray Labels to apply to the app --name string A name for the app, ignored if a file is set (DEPRECATED) --nameprefix string Kustomize nameprefix --namesuffix string Kustomize namesuffix -o, --output string Output format. One of: json|yaml (default \"yaml\") -p, --parameter stringArray set a parameter override (e.g. -p guestbook=image=example/guestbook:latest) --path string Path in repository to the app directory, ignored if a file is set --plugin-env stringArray Additional plugin envs --project string Application project name --release-name string Helm release-name --repo string Repository URL, ignored if a file is set --revision string The tracking source branch, tag, commit or Helm chart version the application will sync to --revision-history-limit int How many items to keep in revision history (default 10) --self-heal Set self healing when sync is automated --sync-option Prune=false Add or remove a sync option, e.g add Prune=false. Remove using `!` prefix, e.g. `!Prune=false` --sync-policy string Set the sync policy (one of: none, automated (aliases of automated: auto, automatic)) --sync-retry-backoff-duration duration Sync retry backoff base duration. Input needs to be a duration (e.g. 2m, 1h) (default 5s) --sync-retry-backoff-factor int Factor multiplies the base duration after each failed sync retry (default 2) --sync-retry-backoff-max-duration duration Max sync retry backoff duration. Input needs to be a duration (e.g. 2m, 1h) (default 3m0s) --sync-retry-limit int Max number of allowed sync retries --validate Validation of repo and cluster (default true) --values stringArray Helm values file(s) to use --values-literal-file string Filename or URL to import as a literal Helm values block","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_app_generate-spec/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_app_generate-spec/#see-also","text":"argocd admin app - Manage applications configuration","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_app_get-reconcile-results/","text":"argocd admin app get-reconcile-results Reconcile all applications and stores reconciliation summary in the specified file. argocd admin app get-reconcile-results PATH [flags] Options --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for get-reconcile-results --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster --l string Label selector -n, --namespace string If present, the namespace scope for this CLI request --o string Output format (yaml|json) (default \"yaml\") --password string Password for basic authentication to the API server --refresh If set to true then recalculates apps reconciliation --repo-server string Repo server address. --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd admin app - Manage applications configuration","title":"Argocd admin app get reconcile results"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_app_get-reconcile-results/#argocd-admin-app-get-reconcile-results","text":"Reconcile all applications and stores reconciliation summary in the specified file. argocd admin app get-reconcile-results PATH [flags]","title":"argocd admin app get-reconcile-results"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_app_get-reconcile-results/#options","text":"--as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for get-reconcile-results --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster --l string Label selector -n, --namespace string If present, the namespace scope for this CLI request --o string Output format (yaml|json) (default \"yaml\") --password string Password for basic authentication to the API server --refresh If set to true then recalculates apps reconciliation --repo-server string Repo server address. --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_app_get-reconcile-results/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_app_get-reconcile-results/#see-also","text":"argocd admin app - Manage applications configuration","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster/","text":"argocd admin cluster Manage clusters configuration argocd admin cluster [flags] Options -h, --help help for cluster Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd admin - Contains a set of commands useful for Argo CD administrators and requires direct Kubernetes access argocd admin cluster generate-spec - Generate declarative config for a cluster argocd admin cluster kubeconfig - Generates kubeconfig for the specified cluster argocd admin cluster namespaces - Print information namespaces which Argo CD manages in each cluster. argocd admin cluster shards - Print information about each controller shard and portion of Kubernetes resources it is responsible for. argocd admin cluster stats - Prints information cluster statistics and inferred shard number","title":"Argocd admin cluster"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster/#argocd-admin-cluster","text":"Manage clusters configuration argocd admin cluster [flags]","title":"argocd admin cluster"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster/#options","text":"-h, --help help for cluster","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster/#see-also","text":"argocd admin - Contains a set of commands useful for Argo CD administrators and requires direct Kubernetes access argocd admin cluster generate-spec - Generate declarative config for a cluster argocd admin cluster kubeconfig - Generates kubeconfig for the specified cluster argocd admin cluster namespaces - Print information namespaces which Argo CD manages in each cluster. argocd admin cluster shards - Print information about each controller shard and portion of Kubernetes resources it is responsible for. argocd admin cluster stats - Prints information cluster statistics and inferred shard number","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_generate-spec/","text":"argocd admin cluster generate-spec Generate declarative config for a cluster argocd admin cluster generate-spec CONTEXT [flags] Options --annotation stringArray Set metadata annotations (e.g. --annotation key=value) --aws-cluster-name string AWS Cluster name if set then aws cli eks token command will be used to access cluster --aws-role-arn string Optional AWS role arn. If set then AWS IAM Authenticator assumes a role to perform cluster operations instead of the default AWS credential provider chain. --bearer-token string Authentication token that should be used to access K8S API server --cluster-resources Indicates if cluster level resources should be managed. The setting is used only if list of managed namespaces is not empty. --exec-command string Command to run to provide client credentials to the cluster. You may need to build a custom ArgoCD image to ensure the command is available at runtime. --exec-command-api-version string Preferred input version of the ExecInfo for the --exec-command executable --exec-command-args stringArray Arguments to supply to the --exec-command executable --exec-command-env stringToString Environment vars to set when running the --exec-command executable (default []) --exec-command-install-hint string Text shown to the user when the --exec-command executable doesn't seem to be present --generate-bearer-token Generate authentication token that should be used to access K8S API server -h, --help help for generate-spec --in-cluster Indicates Argo CD resides inside this cluster and should connect using the internal k8s hostname (kubernetes.default.svc) --kubeconfig string use a particular kubeconfig file --label stringArray Set metadata labels (e.g. --label key=value) --name string Overwrite the cluster name --namespace stringArray List of namespaces which are allowed to manage -o, --output string Output format. One of: json|yaml (default \"yaml\") --project string project of the cluster --service-account string System namespace service account to use for kubernetes resource management. If not set then default \"argocd-manager\" SA will be used (default \"argocd-manager\") --shard int Cluster shard number; inferred from hostname if not set (default -1) --system-namespace string Use different system namespace (default \"kube-system\") Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd admin cluster - Manage clusters configuration","title":"Argocd admin cluster generate spec"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_generate-spec/#argocd-admin-cluster-generate-spec","text":"Generate declarative config for a cluster argocd admin cluster generate-spec CONTEXT [flags]","title":"argocd admin cluster generate-spec"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_generate-spec/#options","text":"--annotation stringArray Set metadata annotations (e.g. --annotation key=value) --aws-cluster-name string AWS Cluster name if set then aws cli eks token command will be used to access cluster --aws-role-arn string Optional AWS role arn. If set then AWS IAM Authenticator assumes a role to perform cluster operations instead of the default AWS credential provider chain. --bearer-token string Authentication token that should be used to access K8S API server --cluster-resources Indicates if cluster level resources should be managed. The setting is used only if list of managed namespaces is not empty. --exec-command string Command to run to provide client credentials to the cluster. You may need to build a custom ArgoCD image to ensure the command is available at runtime. --exec-command-api-version string Preferred input version of the ExecInfo for the --exec-command executable --exec-command-args stringArray Arguments to supply to the --exec-command executable --exec-command-env stringToString Environment vars to set when running the --exec-command executable (default []) --exec-command-install-hint string Text shown to the user when the --exec-command executable doesn't seem to be present --generate-bearer-token Generate authentication token that should be used to access K8S API server -h, --help help for generate-spec --in-cluster Indicates Argo CD resides inside this cluster and should connect using the internal k8s hostname (kubernetes.default.svc) --kubeconfig string use a particular kubeconfig file --label stringArray Set metadata labels (e.g. --label key=value) --name string Overwrite the cluster name --namespace stringArray List of namespaces which are allowed to manage -o, --output string Output format. One of: json|yaml (default \"yaml\") --project string project of the cluster --service-account string System namespace service account to use for kubernetes resource management. If not set then default \"argocd-manager\" SA will be used (default \"argocd-manager\") --shard int Cluster shard number; inferred from hostname if not set (default -1) --system-namespace string Use different system namespace (default \"kube-system\")","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_generate-spec/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_generate-spec/#see-also","text":"argocd admin cluster - Manage clusters configuration","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_kubeconfig/","text":"argocd admin cluster kubeconfig Generates kubeconfig for the specified cluster argocd admin cluster kubeconfig CLUSTER_URL OUTPUT_PATH [flags] Options --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for kubeconfig --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd admin cluster - Manage clusters configuration","title":"Argocd admin cluster kubeconfig"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_kubeconfig/#argocd-admin-cluster-kubeconfig","text":"Generates kubeconfig for the specified cluster argocd admin cluster kubeconfig CLUSTER_URL OUTPUT_PATH [flags]","title":"argocd admin cluster kubeconfig"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_kubeconfig/#options","text":"--as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for kubeconfig --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_kubeconfig/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_kubeconfig/#see-also","text":"argocd admin cluster - Manage clusters configuration","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_namespaces/","text":"argocd admin cluster namespaces Print information namespaces which Argo CD manages in each cluster. argocd admin cluster namespaces [flags] Options --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for namespaces --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd admin cluster - Manage clusters configuration argocd admin cluster namespaces disable-namespaced-mode - Disable namespaced mode for clusters which name matches to the specified pattern. argocd admin cluster namespaces enable-namespaced-mode - Enable namespaced mode for clusters which name matches to the specified pattern.","title":"Argocd admin cluster namespaces"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_namespaces/#argocd-admin-cluster-namespaces","text":"Print information namespaces which Argo CD manages in each cluster. argocd admin cluster namespaces [flags]","title":"argocd admin cluster namespaces"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_namespaces/#options","text":"--as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for namespaces --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_namespaces/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_namespaces/#see-also","text":"argocd admin cluster - Manage clusters configuration argocd admin cluster namespaces disable-namespaced-mode - Disable namespaced mode for clusters which name matches to the specified pattern. argocd admin cluster namespaces enable-namespaced-mode - Enable namespaced mode for clusters which name matches to the specified pattern.","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_namespaces_disable-namespaced-mode/","text":"argocd admin cluster namespaces disable-namespaced-mode Disable namespaced mode for clusters which name matches to the specified pattern. argocd admin cluster namespaces disable-namespaced-mode PATTERN [flags] Options --dry-run Print what will be performed (default true) -h, --help help for disable-namespaced-mode Options inherited from parent commands --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --auth-token string Authentication token --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-crt string Client certificate file --client-crt-key string Client certificate key file --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --context string The name of the kubeconfig context to use --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --server string The address and port of the Kubernetes API server --server-crt string Server certificate file --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server SEE ALSO argocd admin cluster namespaces - Print information namespaces which Argo CD manages in each cluster.","title":"Argocd admin cluster namespaces disable namespaced mode"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_namespaces_disable-namespaced-mode/#argocd-admin-cluster-namespaces-disable-namespaced-mode","text":"Disable namespaced mode for clusters which name matches to the specified pattern. argocd admin cluster namespaces disable-namespaced-mode PATTERN [flags]","title":"argocd admin cluster namespaces disable-namespaced-mode"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_namespaces_disable-namespaced-mode/#options","text":"--dry-run Print what will be performed (default true) -h, --help help for disable-namespaced-mode","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_namespaces_disable-namespaced-mode/#options-inherited-from-parent-commands","text":"--as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --auth-token string Authentication token --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-crt string Client certificate file --client-crt-key string Client certificate key file --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --context string The name of the kubeconfig context to use --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --server string The address and port of the Kubernetes API server --server-crt string Server certificate file --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_namespaces_disable-namespaced-mode/#see-also","text":"argocd admin cluster namespaces - Print information namespaces which Argo CD manages in each cluster.","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_namespaces_enable-namespaced-mode/","text":"argocd admin cluster namespaces enable-namespaced-mode Enable namespaced mode for clusters which name matches to the specified pattern. argocd admin cluster namespaces enable-namespaced-mode PATTERN [flags] Options --cluster-resources Indicates if cluster level resources should be managed. --dry-run Print what will be performed (default true) -h, --help help for enable-namespaced-mode --max-namespace-count int Max number of namespaces that cluster should managed managed namespaces is less or equal to specified count Options inherited from parent commands --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --auth-token string Authentication token --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-crt string Client certificate file --client-crt-key string Client certificate key file --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --context string The name of the kubeconfig context to use --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --server string The address and port of the Kubernetes API server --server-crt string Server certificate file --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server SEE ALSO argocd admin cluster namespaces - Print information namespaces which Argo CD manages in each cluster.","title":"Argocd admin cluster namespaces enable namespaced mode"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_namespaces_enable-namespaced-mode/#argocd-admin-cluster-namespaces-enable-namespaced-mode","text":"Enable namespaced mode for clusters which name matches to the specified pattern. argocd admin cluster namespaces enable-namespaced-mode PATTERN [flags]","title":"argocd admin cluster namespaces enable-namespaced-mode"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_namespaces_enable-namespaced-mode/#options","text":"--cluster-resources Indicates if cluster level resources should be managed. --dry-run Print what will be performed (default true) -h, --help help for enable-namespaced-mode --max-namespace-count int Max number of namespaces that cluster should managed managed namespaces is less or equal to specified count","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_namespaces_enable-namespaced-mode/#options-inherited-from-parent-commands","text":"--as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --auth-token string Authentication token --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-crt string Client certificate file --client-crt-key string Client certificate key file --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --context string The name of the kubeconfig context to use --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --server string The address and port of the Kubernetes API server --server-crt string Server certificate file --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_namespaces_enable-namespaced-mode/#see-also","text":"argocd admin cluster namespaces - Print information namespaces which Argo CD manages in each cluster.","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_shards/","text":"argocd admin cluster shards Print information about each controller shard and portion of Kubernetes resources it is responsible for. argocd admin cluster shards [flags] Options --app-state-cache-expiration duration Cache expiration for app state (default 1h0m0s) --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use --default-cache-expiration duration Cache expiration default (default 24h0m0s) -h, --help help for shards --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --port-forward-redis Automatically port-forward ha proxy redis from current namespace? (default true) --redis string Redis server hostname and port (e.g. argocd-redis:6379). --redis-ca-certificate string Path to Redis server CA certificate (e.g. /etc/certs/redis/ca.crt). If not specified, system trusted CAs will be used for server certificate validation. --redis-client-certificate string Path to Redis client certificate (e.g. /etc/certs/redis/client.crt). --redis-client-key string Path to Redis client key (e.g. /etc/certs/redis/client.crt). --redis-insecure-skip-tls-verify Skip Redis server certificate validation. --redis-use-tls Use TLS when connecting to Redis. --redisdb int Redis database. --replicas int Application controller replicas count. Inferred from number of running controller pods if not specified --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --sentinel stringArray Redis sentinel hostname and port (e.g. argocd-redis-ha-announce-0:6379). --sentinelmaster string Redis sentinel master group name. (default \"master\") --shard int Cluster shard filter (default -1) --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd admin cluster - Manage clusters configuration","title":"Argocd admin cluster shards"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_shards/#argocd-admin-cluster-shards","text":"Print information about each controller shard and portion of Kubernetes resources it is responsible for. argocd admin cluster shards [flags]","title":"argocd admin cluster shards"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_shards/#options","text":"--app-state-cache-expiration duration Cache expiration for app state (default 1h0m0s) --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use --default-cache-expiration duration Cache expiration default (default 24h0m0s) -h, --help help for shards --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --port-forward-redis Automatically port-forward ha proxy redis from current namespace? (default true) --redis string Redis server hostname and port (e.g. argocd-redis:6379). --redis-ca-certificate string Path to Redis server CA certificate (e.g. /etc/certs/redis/ca.crt). If not specified, system trusted CAs will be used for server certificate validation. --redis-client-certificate string Path to Redis client certificate (e.g. /etc/certs/redis/client.crt). --redis-client-key string Path to Redis client key (e.g. /etc/certs/redis/client.crt). --redis-insecure-skip-tls-verify Skip Redis server certificate validation. --redis-use-tls Use TLS when connecting to Redis. --redisdb int Redis database. --replicas int Application controller replicas count. Inferred from number of running controller pods if not specified --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --sentinel stringArray Redis sentinel hostname and port (e.g. argocd-redis-ha-announce-0:6379). --sentinelmaster string Redis sentinel master group name. (default \"master\") --shard int Cluster shard filter (default -1) --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_shards/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_shards/#see-also","text":"argocd admin cluster - Manage clusters configuration","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_stats/","text":"argocd admin cluster stats Prints information cluster statistics and inferred shard number argocd admin cluster stats [flags] Options --app-state-cache-expiration duration Cache expiration for app state (default 1h0m0s) --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use --default-cache-expiration duration Cache expiration default (default 24h0m0s) -h, --help help for stats --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --port-forward-redis Automatically port-forward ha proxy redis from current namespace? (default true) --redis string Redis server hostname and port (e.g. argocd-redis:6379). --redis-ca-certificate string Path to Redis server CA certificate (e.g. /etc/certs/redis/ca.crt). If not specified, system trusted CAs will be used for server certificate validation. --redis-client-certificate string Path to Redis client certificate (e.g. /etc/certs/redis/client.crt). --redis-client-key string Path to Redis client key (e.g. /etc/certs/redis/client.crt). --redis-insecure-skip-tls-verify Skip Redis server certificate validation. --redis-use-tls Use TLS when connecting to Redis. --redisdb int Redis database. --replicas int Application controller replicas count. Inferred from number of running controller pods if not specified --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --sentinel stringArray Redis sentinel hostname and port (e.g. argocd-redis-ha-announce-0:6379). --sentinelmaster string Redis sentinel master group name. (default \"master\") --shard int Cluster shard filter (default -1) --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd admin cluster - Manage clusters configuration","title":"Argocd admin cluster stats"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_stats/#argocd-admin-cluster-stats","text":"Prints information cluster statistics and inferred shard number argocd admin cluster stats [flags]","title":"argocd admin cluster stats"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_stats/#options","text":"--app-state-cache-expiration duration Cache expiration for app state (default 1h0m0s) --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use --default-cache-expiration duration Cache expiration default (default 24h0m0s) -h, --help help for stats --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --port-forward-redis Automatically port-forward ha proxy redis from current namespace? (default true) --redis string Redis server hostname and port (e.g. argocd-redis:6379). --redis-ca-certificate string Path to Redis server CA certificate (e.g. /etc/certs/redis/ca.crt). If not specified, system trusted CAs will be used for server certificate validation. --redis-client-certificate string Path to Redis client certificate (e.g. /etc/certs/redis/client.crt). --redis-client-key string Path to Redis client key (e.g. /etc/certs/redis/client.crt). --redis-insecure-skip-tls-verify Skip Redis server certificate validation. --redis-use-tls Use TLS when connecting to Redis. --redisdb int Redis database. --replicas int Application controller replicas count. Inferred from number of running controller pods if not specified --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --sentinel stringArray Redis sentinel hostname and port (e.g. argocd-redis-ha-announce-0:6379). --sentinelmaster string Redis sentinel master group name. (default \"master\") --shard int Cluster shard filter (default -1) --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_stats/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_cluster_stats/#see-also","text":"argocd admin cluster - Manage clusters configuration","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_dashboard/","text":"argocd admin dashboard Starts Argo CD Web UI locally argocd admin dashboard [flags] Options --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for dashboard --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --port int Listen on given port (default 8080) --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd admin - Contains a set of commands useful for Argo CD administrators and requires direct Kubernetes access","title":"Argocd admin dashboard"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_dashboard/#argocd-admin-dashboard","text":"Starts Argo CD Web UI locally argocd admin dashboard [flags]","title":"argocd admin dashboard"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_dashboard/#options","text":"--as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for dashboard --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --port int Listen on given port (default 8080) --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_dashboard/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_dashboard/#see-also","text":"argocd admin - Contains a set of commands useful for Argo CD administrators and requires direct Kubernetes access","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_export/","text":"argocd admin export Export all Argo CD data to stdout (default) or a file argocd admin export [flags] Options --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for export --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request -o, --out string Output to the specified file instead of stdout (default \"-\") --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd admin - Contains a set of commands useful for Argo CD administrators and requires direct Kubernetes access","title":"Argocd admin export"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_export/#argocd-admin-export","text":"Export all Argo CD data to stdout (default) or a file argocd admin export [flags]","title":"argocd admin export"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_export/#options","text":"--as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for export --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request -o, --out string Output to the specified file instead of stdout (default \"-\") --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_export/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_export/#see-also","text":"argocd admin - Contains a set of commands useful for Argo CD administrators and requires direct Kubernetes access","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_import/","text":"argocd admin import Import Argo CD data from stdin (specify `-') or a file argocd admin import SOURCE [flags] Options --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use --dry-run Print what will be performed -h, --help help for import --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --prune Prune secrets, applications and projects which do not appear in the backup --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server --verbose Verbose output (versus only changed output) Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd admin - Contains a set of commands useful for Argo CD administrators and requires direct Kubernetes access","title":"Argocd admin import"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_import/#argocd-admin-import","text":"Import Argo CD data from stdin (specify `-') or a file argocd admin import SOURCE [flags]","title":"argocd admin import"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_import/#options","text":"--as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use --dry-run Print what will be performed -h, --help help for import --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --prune Prune secrets, applications and projects which do not appear in the backup --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server --verbose Verbose output (versus only changed output)","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_import/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_import/#see-also","text":"argocd admin - Contains a set of commands useful for Argo CD administrators and requires direct Kubernetes access","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_proj/","text":"argocd admin proj Manage projects configuration argocd admin proj [flags] Options -h, --help help for proj Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd admin - Contains a set of commands useful for Argo CD administrators and requires direct Kubernetes access argocd admin proj generate-allow-list - Generates project allow list from the specified clusterRole file argocd admin proj generate-spec - Generate declarative config for a project argocd admin proj update-role-policy - Implement bulk project role update. Useful to back-fill existing project policies or remove obsolete actions.","title":"Argocd admin proj"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_proj/#argocd-admin-proj","text":"Manage projects configuration argocd admin proj [flags]","title":"argocd admin proj"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_proj/#options","text":"-h, --help help for proj","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_proj/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_proj/#see-also","text":"argocd admin - Contains a set of commands useful for Argo CD administrators and requires direct Kubernetes access argocd admin proj generate-allow-list - Generates project allow list from the specified clusterRole file argocd admin proj generate-spec - Generate declarative config for a project argocd admin proj update-role-policy - Implement bulk project role update. Useful to back-fill existing project policies or remove obsolete actions.","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_proj_generate-allow-list/","text":"argocd admin proj generate-allow-list Generates project allow list from the specified clusterRole file argocd admin proj generate-allow-list CLUSTERROLE_PATH PROJ_NAME [flags] Options --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for generate-allow-list --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request -o, --out string Output to the specified file instead of stdout (default \"-\") --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd admin proj - Manage projects configuration","title":"Argocd admin proj generate allow list"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_proj_generate-allow-list/#argocd-admin-proj-generate-allow-list","text":"Generates project allow list from the specified clusterRole file argocd admin proj generate-allow-list CLUSTERROLE_PATH PROJ_NAME [flags]","title":"argocd admin proj generate-allow-list"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_proj_generate-allow-list/#options","text":"--as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for generate-allow-list --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request -o, --out string Output to the specified file instead of stdout (default \"-\") --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_proj_generate-allow-list/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_proj_generate-allow-list/#see-also","text":"argocd admin proj - Manage projects configuration","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_proj_generate-spec/","text":"argocd admin proj generate-spec Generate declarative config for a project argocd admin proj generate-spec PROJECT [flags] Options --allow-cluster-resource stringArray List of allowed cluster level resources --allow-namespaced-resource stringArray List of allowed namespaced resources --deny-cluster-resource stringArray List of denied cluster level resources --deny-namespaced-resource stringArray List of denied namespaced resources --description string Project description -d, --dest stringArray Permitted destination server and namespace (e.g. https://192.168.99.100:8443,default) -f, --file string Filename or URL to Kubernetes manifests for the project -h, --help help for generate-spec -i, --inline If set then generated resource is written back to the file specified in --file flag --orphaned-resources Enables orphaned resources monitoring --orphaned-resources-warn Specifies if applications should have a warning condition when orphaned resources detected -o, --output string Output format. One of: json|yaml (default \"yaml\") --signature-keys strings GnuPG public key IDs for commit signature verification -s, --src stringArray Permitted source repository URL Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd admin proj - Manage projects configuration","title":"Argocd admin proj generate spec"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_proj_generate-spec/#argocd-admin-proj-generate-spec","text":"Generate declarative config for a project argocd admin proj generate-spec PROJECT [flags]","title":"argocd admin proj generate-spec"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_proj_generate-spec/#options","text":"--allow-cluster-resource stringArray List of allowed cluster level resources --allow-namespaced-resource stringArray List of allowed namespaced resources --deny-cluster-resource stringArray List of denied cluster level resources --deny-namespaced-resource stringArray List of denied namespaced resources --description string Project description -d, --dest stringArray Permitted destination server and namespace (e.g. https://192.168.99.100:8443,default) -f, --file string Filename or URL to Kubernetes manifests for the project -h, --help help for generate-spec -i, --inline If set then generated resource is written back to the file specified in --file flag --orphaned-resources Enables orphaned resources monitoring --orphaned-resources-warn Specifies if applications should have a warning condition when orphaned resources detected -o, --output string Output format. One of: json|yaml (default \"yaml\") --signature-keys strings GnuPG public key IDs for commit signature verification -s, --src stringArray Permitted source repository URL","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_proj_generate-spec/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_proj_generate-spec/#see-also","text":"argocd admin proj - Manage projects configuration","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_proj_update-role-policy/","text":"argocd admin proj update-role-policy Implement bulk project role update. Useful to back-fill existing project policies or remove obsolete actions. argocd admin proj update-role-policy PROJECT_GLOB MODIFICATION ACTION [flags] Examples # Add policy that allows executing any action (action/*) to roles which name matches to *deployer* in all projects argocd admin projects update-role-policy '*' set 'action/*' --role '*deployer*' --resource applications --scope '*' --permission allow # Remove policy that which manages running (action/*) from all roles which name matches *deployer* in all projects argocd admin projects update-role-policy '*' remove override --role '*deployer*' Options --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use --dry-run Dry run (default true) -h, --help help for update-role-policy --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --permission string Action permission --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --resource string Resource e.g. 'applications' --role string Role name pattern e.g. '*deployer*' (default \"*\") --scope string Resource scope e.g. '*' --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd admin proj - Manage projects configuration","title":"Argocd admin proj update role policy"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_proj_update-role-policy/#argocd-admin-proj-update-role-policy","text":"Implement bulk project role update. Useful to back-fill existing project policies or remove obsolete actions. argocd admin proj update-role-policy PROJECT_GLOB MODIFICATION ACTION [flags]","title":"argocd admin proj update-role-policy"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_proj_update-role-policy/#examples","text":"# Add policy that allows executing any action (action/*) to roles which name matches to *deployer* in all projects argocd admin projects update-role-policy '*' set 'action/*' --role '*deployer*' --resource applications --scope '*' --permission allow # Remove policy that which manages running (action/*) from all roles which name matches *deployer* in all projects argocd admin projects update-role-policy '*' remove override --role '*deployer*'","title":"Examples"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_proj_update-role-policy/#options","text":"--as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use --dry-run Dry run (default true) -h, --help help for update-role-policy --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --permission string Action permission --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --resource string Resource e.g. 'applications' --role string Role name pattern e.g. '*deployer*' (default \"*\") --scope string Resource scope e.g. '*' --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_proj_update-role-policy/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_proj_update-role-policy/#see-also","text":"argocd admin proj - Manage projects configuration","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_repo/","text":"argocd admin repo Manage repositories configuration argocd admin repo [flags] Options -h, --help help for repo Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd admin - Contains a set of commands useful for Argo CD administrators and requires direct Kubernetes access argocd admin repo generate-spec - Generate declarative config for a repo","title":"Argocd admin repo"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_repo/#argocd-admin-repo","text":"Manage repositories configuration argocd admin repo [flags]","title":"argocd admin repo"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_repo/#options","text":"-h, --help help for repo","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_repo/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_repo/#see-also","text":"argocd admin - Contains a set of commands useful for Argo CD administrators and requires direct Kubernetes access argocd admin repo generate-spec - Generate declarative config for a repo","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_repo_generate-spec/","text":"argocd admin repo generate-spec Generate declarative config for a repo argocd admin repo generate-spec REPOURL [flags] Examples # Add a Git repository via SSH using a private key for authentication, ignoring the server's host key: argocd admin repo generate-spec git@git.example.com:repos/repo --insecure-ignore-host-key --ssh-private-key-path ~/id_rsa # Add a Git repository via SSH on a non-default port - need to use ssh:// style URLs here argocd admin repo generate-spec ssh://git@git.example.com:2222/repos/repo --ssh-private-key-path ~/id_rsa # Add a private Git repository via HTTPS using username/password and TLS client certificates: argocd admin repo generate-spec https://git.example.com/repos/repo --username git --password secret --tls-client-cert-path ~/mycert.crt --tls-client-cert-key-path ~/mycert.key # Add a private Git repository via HTTPS using username/password without verifying the server's TLS certificate argocd admin repo generate-spec https://git.example.com/repos/repo --username git --password secret --insecure-skip-server-verification # Add a public Helm repository named 'stable' via HTTPS argocd admin repo generate-spec https://charts.helm.sh/stable --type helm --name stable # Add a private Helm repository named 'stable' via HTTPS argocd admin repo generate-spec https://charts.helm.sh/stable --type helm --name stable --username test --password test # Add a private Helm OCI-based repository named 'stable' via HTTPS argocd admin repo generate-spec helm-oci-registry.cn-zhangjiakou.cr.aliyuncs.com --type helm --name stable --enable-oci --username test --password test Options --enable-lfs enable git-lfs (Large File Support) on this repository --enable-oci enable helm-oci (Helm OCI-Based Repository) --github-app-enterprise-base-url string base url to use when using GitHub Enterprise (e.g. https://ghe.example.com/api/v3 --github-app-id int id of the GitHub Application --github-app-installation-id int installation id of the GitHub Application --github-app-private-key-path string private key of the GitHub Application -h, --help help for generate-spec --insecure-ignore-host-key disables SSH strict host key checking (deprecated, use --insecure-skip-server-verification instead) --insecure-skip-server-verification disables server certificate and host key checks --name string name of the repository, mandatory for repositories of type helm -o, --output string Output format. One of: json|yaml (default \"yaml\") --password string password to the repository --project string project of the repository --proxy string use proxy to access repository --ssh-private-key-path string path to the private ssh key (e.g. ~/.ssh/id_rsa) --tls-client-cert-key-path string path to the TLS client cert's key path (must be PEM format) --tls-client-cert-path string path to the TLS client cert (must be PEM format) --type string type of the repository, \"git\" or \"helm\" (default \"git\") --username string username to the repository Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd admin repo - Manage repositories configuration","title":"Argocd admin repo generate spec"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_repo_generate-spec/#argocd-admin-repo-generate-spec","text":"Generate declarative config for a repo argocd admin repo generate-spec REPOURL [flags]","title":"argocd admin repo generate-spec"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_repo_generate-spec/#examples","text":"# Add a Git repository via SSH using a private key for authentication, ignoring the server's host key: argocd admin repo generate-spec git@git.example.com:repos/repo --insecure-ignore-host-key --ssh-private-key-path ~/id_rsa # Add a Git repository via SSH on a non-default port - need to use ssh:// style URLs here argocd admin repo generate-spec ssh://git@git.example.com:2222/repos/repo --ssh-private-key-path ~/id_rsa # Add a private Git repository via HTTPS using username/password and TLS client certificates: argocd admin repo generate-spec https://git.example.com/repos/repo --username git --password secret --tls-client-cert-path ~/mycert.crt --tls-client-cert-key-path ~/mycert.key # Add a private Git repository via HTTPS using username/password without verifying the server's TLS certificate argocd admin repo generate-spec https://git.example.com/repos/repo --username git --password secret --insecure-skip-server-verification # Add a public Helm repository named 'stable' via HTTPS argocd admin repo generate-spec https://charts.helm.sh/stable --type helm --name stable # Add a private Helm repository named 'stable' via HTTPS argocd admin repo generate-spec https://charts.helm.sh/stable --type helm --name stable --username test --password test # Add a private Helm OCI-based repository named 'stable' via HTTPS argocd admin repo generate-spec helm-oci-registry.cn-zhangjiakou.cr.aliyuncs.com --type helm --name stable --enable-oci --username test --password test","title":"Examples"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_repo_generate-spec/#options","text":"--enable-lfs enable git-lfs (Large File Support) on this repository --enable-oci enable helm-oci (Helm OCI-Based Repository) --github-app-enterprise-base-url string base url to use when using GitHub Enterprise (e.g. https://ghe.example.com/api/v3 --github-app-id int id of the GitHub Application --github-app-installation-id int installation id of the GitHub Application --github-app-private-key-path string private key of the GitHub Application -h, --help help for generate-spec --insecure-ignore-host-key disables SSH strict host key checking (deprecated, use --insecure-skip-server-verification instead) --insecure-skip-server-verification disables server certificate and host key checks --name string name of the repository, mandatory for repositories of type helm -o, --output string Output format. One of: json|yaml (default \"yaml\") --password string password to the repository --project string project of the repository --proxy string use proxy to access repository --ssh-private-key-path string path to the private ssh key (e.g. ~/.ssh/id_rsa) --tls-client-cert-key-path string path to the TLS client cert's key path (must be PEM format) --tls-client-cert-path string path to the TLS client cert (must be PEM format) --type string type of the repository, \"git\" or \"helm\" (default \"git\") --username string username to the repository","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_repo_generate-spec/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_repo_generate-spec/#see-also","text":"argocd admin repo - Manage repositories configuration","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings/","text":"argocd admin settings Provides set of commands for settings validation and troubleshooting argocd admin settings [flags] Options --argocd-cm-path string Path to local argocd-cm.yaml file --argocd-secret-path string Path to local argocd-secret.yaml file --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for settings --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster --load-cluster-settings Indicates that config map and secret should be loaded from cluster unless local file path is provided -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd admin - Contains a set of commands useful for Argo CD administrators and requires direct Kubernetes access argocd admin settings rbac - Validate and test RBAC configuration argocd admin settings resource-overrides - Troubleshoot resource overrides argocd admin settings validate - Validate settings","title":"Argocd admin settings"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings/#argocd-admin-settings","text":"Provides set of commands for settings validation and troubleshooting argocd admin settings [flags]","title":"argocd admin settings"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings/#options","text":"--argocd-cm-path string Path to local argocd-cm.yaml file --argocd-secret-path string Path to local argocd-secret.yaml file --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for settings --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster --load-cluster-settings Indicates that config map and secret should be loaded from cluster unless local file path is provided -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings/#see-also","text":"argocd admin - Contains a set of commands useful for Argo CD administrators and requires direct Kubernetes access argocd admin settings rbac - Validate and test RBAC configuration argocd admin settings resource-overrides - Troubleshoot resource overrides argocd admin settings validate - Validate settings","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_rbac/","text":"argocd admin settings rbac Validate and test RBAC configuration argocd admin settings rbac [flags] Options -h, --help help for rbac Options inherited from parent commands --argocd-cm-path string Path to local argocd-cm.yaml file --argocd-secret-path string Path to local argocd-secret.yaml file --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --auth-token string Authentication token --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-crt string Client certificate file --client-crt-key string Client certificate key file --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --context string The name of the kubeconfig context to use --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster --load-cluster-settings Indicates that config map and secret should be loaded from cluster unless local file path is provided --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --server string The address and port of the Kubernetes API server --server-crt string Server certificate file --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server SEE ALSO argocd admin settings - Provides set of commands for settings validation and troubleshooting argocd admin settings rbac can - Check RBAC permissions for a role or subject argocd admin settings rbac validate - Validate RBAC policy","title":"Argocd admin settings rbac"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_rbac/#argocd-admin-settings-rbac","text":"Validate and test RBAC configuration argocd admin settings rbac [flags]","title":"argocd admin settings rbac"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_rbac/#options","text":"-h, --help help for rbac","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_rbac/#options-inherited-from-parent-commands","text":"--argocd-cm-path string Path to local argocd-cm.yaml file --argocd-secret-path string Path to local argocd-secret.yaml file --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --auth-token string Authentication token --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-crt string Client certificate file --client-crt-key string Client certificate key file --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --context string The name of the kubeconfig context to use --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster --load-cluster-settings Indicates that config map and secret should be loaded from cluster unless local file path is provided --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --server string The address and port of the Kubernetes API server --server-crt string Server certificate file --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_rbac/#see-also","text":"argocd admin settings - Provides set of commands for settings validation and troubleshooting argocd admin settings rbac can - Check RBAC permissions for a role or subject argocd admin settings rbac validate - Validate RBAC policy","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_rbac_can/","text":"argocd admin settings rbac can Check RBAC permissions for a role or subject Synopsis Check whether a given role or subject has appropriate RBAC permissions to do something. argocd admin settings rbac can ROLE/SUBJECT ACTION RESOURCE [SUB-RESOURCE] [flags] Examples # Check whether role some:role has permissions to create an application in the # 'default' project, using a local policy.csv file argocd admin settings rbac can some:role create application 'default/app' --policy-file policy.csv # Policy file can also be K8s config map with data keys like argocd-rbac-cm, # i.e. 'policy.csv' and (optionally) 'policy.default' argocd admin settings rbac can some:role create application 'default/app' --policy-file argocd-rbac-cm.yaml # If --policy-file is not given, the ConfigMap 'argocd-rbac-cm' from K8s is # used. You need to specify the argocd namespace, and make sure that your # current Kubernetes context is pointing to the cluster Argo CD is running in argocd admin settings rbac can some:role create application 'default/app' --namespace argocd # You can override a possibly configured default role argocd admin settings rbac can someuser create application 'default/app' --default-role role:readonly Options --default-role string name of the default role to use -h, --help help for can --policy-file string path to the policy file to use -q, --quiet quiet mode - do not print results to stdout --strict whether to perform strict check on action and resource names (default true) --use-builtin-policy whether to also use builtin-policy (default true) Options inherited from parent commands --argocd-cm-path string Path to local argocd-cm.yaml file --argocd-secret-path string Path to local argocd-secret.yaml file --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --auth-token string Authentication token --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-crt string Client certificate file --client-crt-key string Client certificate key file --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --context string The name of the kubeconfig context to use --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster --load-cluster-settings Indicates that config map and secret should be loaded from cluster unless local file path is provided --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --server string The address and port of the Kubernetes API server --server-crt string Server certificate file --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server SEE ALSO argocd admin settings rbac - Validate and test RBAC configuration","title":"Argocd admin settings rbac can"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_rbac_can/#argocd-admin-settings-rbac-can","text":"Check RBAC permissions for a role or subject","title":"argocd admin settings rbac can"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_rbac_can/#synopsis","text":"Check whether a given role or subject has appropriate RBAC permissions to do something. argocd admin settings rbac can ROLE/SUBJECT ACTION RESOURCE [SUB-RESOURCE] [flags]","title":"Synopsis"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_rbac_can/#examples","text":"# Check whether role some:role has permissions to create an application in the # 'default' project, using a local policy.csv file argocd admin settings rbac can some:role create application 'default/app' --policy-file policy.csv # Policy file can also be K8s config map with data keys like argocd-rbac-cm, # i.e. 'policy.csv' and (optionally) 'policy.default' argocd admin settings rbac can some:role create application 'default/app' --policy-file argocd-rbac-cm.yaml # If --policy-file is not given, the ConfigMap 'argocd-rbac-cm' from K8s is # used. You need to specify the argocd namespace, and make sure that your # current Kubernetes context is pointing to the cluster Argo CD is running in argocd admin settings rbac can some:role create application 'default/app' --namespace argocd # You can override a possibly configured default role argocd admin settings rbac can someuser create application 'default/app' --default-role role:readonly","title":"Examples"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_rbac_can/#options","text":"--default-role string name of the default role to use -h, --help help for can --policy-file string path to the policy file to use -q, --quiet quiet mode - do not print results to stdout --strict whether to perform strict check on action and resource names (default true) --use-builtin-policy whether to also use builtin-policy (default true)","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_rbac_can/#options-inherited-from-parent-commands","text":"--argocd-cm-path string Path to local argocd-cm.yaml file --argocd-secret-path string Path to local argocd-secret.yaml file --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --auth-token string Authentication token --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-crt string Client certificate file --client-crt-key string Client certificate key file --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --context string The name of the kubeconfig context to use --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster --load-cluster-settings Indicates that config map and secret should be loaded from cluster unless local file path is provided --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --server string The address and port of the Kubernetes API server --server-crt string Server certificate file --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_rbac_can/#see-also","text":"argocd admin settings rbac - Validate and test RBAC configuration","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_rbac_validate/","text":"argocd admin settings rbac validate Validate RBAC policy Synopsis Validates an RBAC policy for being syntactically correct. The policy must be a local file, and in either CSV or K8s ConfigMap format. argocd admin settings rbac validate --policy-file=POLICYFILE [flags] Options -h, --help help for validate --policy-file string path to the policy file to use Options inherited from parent commands --argocd-cm-path string Path to local argocd-cm.yaml file --argocd-secret-path string Path to local argocd-secret.yaml file --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --auth-token string Authentication token --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-crt string Client certificate file --client-crt-key string Client certificate key file --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --context string The name of the kubeconfig context to use --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster --load-cluster-settings Indicates that config map and secret should be loaded from cluster unless local file path is provided --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --server string The address and port of the Kubernetes API server --server-crt string Server certificate file --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server SEE ALSO argocd admin settings rbac - Validate and test RBAC configuration","title":"Argocd admin settings rbac validate"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_rbac_validate/#argocd-admin-settings-rbac-validate","text":"Validate RBAC policy","title":"argocd admin settings rbac validate"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_rbac_validate/#synopsis","text":"Validates an RBAC policy for being syntactically correct. The policy must be a local file, and in either CSV or K8s ConfigMap format. argocd admin settings rbac validate --policy-file=POLICYFILE [flags]","title":"Synopsis"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_rbac_validate/#options","text":"-h, --help help for validate --policy-file string path to the policy file to use","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_rbac_validate/#options-inherited-from-parent-commands","text":"--argocd-cm-path string Path to local argocd-cm.yaml file --argocd-secret-path string Path to local argocd-secret.yaml file --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --auth-token string Authentication token --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-crt string Client certificate file --client-crt-key string Client certificate key file --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --context string The name of the kubeconfig context to use --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster --load-cluster-settings Indicates that config map and secret should be loaded from cluster unless local file path is provided --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --server string The address and port of the Kubernetes API server --server-crt string Server certificate file --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_rbac_validate/#see-also","text":"argocd admin settings rbac - Validate and test RBAC configuration","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_resource-overrides/","text":"argocd admin settings resource-overrides Troubleshoot resource overrides argocd admin settings resource-overrides [flags] Options -h, --help help for resource-overrides Options inherited from parent commands --argocd-cm-path string Path to local argocd-cm.yaml file --argocd-secret-path string Path to local argocd-secret.yaml file --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --auth-token string Authentication token --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-crt string Client certificate file --client-crt-key string Client certificate key file --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --context string The name of the kubeconfig context to use --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster --load-cluster-settings Indicates that config map and secret should be loaded from cluster unless local file path is provided --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --server string The address and port of the Kubernetes API server --server-crt string Server certificate file --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server SEE ALSO argocd admin settings - Provides set of commands for settings validation and troubleshooting argocd admin settings resource-overrides health - Assess resource health argocd admin settings resource-overrides ignore-differences - Renders fields excluded from diffing argocd admin settings resource-overrides list-actions - List available resource actions argocd admin settings resource-overrides run-action - Executes resource action","title":"Argocd admin settings resource overrides"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_resource-overrides/#argocd-admin-settings-resource-overrides","text":"Troubleshoot resource overrides argocd admin settings resource-overrides [flags]","title":"argocd admin settings resource-overrides"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_resource-overrides/#options","text":"-h, --help help for resource-overrides","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_resource-overrides/#options-inherited-from-parent-commands","text":"--argocd-cm-path string Path to local argocd-cm.yaml file --argocd-secret-path string Path to local argocd-secret.yaml file --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --auth-token string Authentication token --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-crt string Client certificate file --client-crt-key string Client certificate key file --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --context string The name of the kubeconfig context to use --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster --load-cluster-settings Indicates that config map and secret should be loaded from cluster unless local file path is provided --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --server string The address and port of the Kubernetes API server --server-crt string Server certificate file --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_resource-overrides/#see-also","text":"argocd admin settings - Provides set of commands for settings validation and troubleshooting argocd admin settings resource-overrides health - Assess resource health argocd admin settings resource-overrides ignore-differences - Renders fields excluded from diffing argocd admin settings resource-overrides list-actions - List available resource actions argocd admin settings resource-overrides run-action - Executes resource action","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_resource-overrides_health/","text":"argocd admin settings resource-overrides health Assess resource health Synopsis Assess resource health using the lua script configured in the 'resource.customizations' field of 'argocd-cm' ConfigMap argocd admin settings resource-overrides health RESOURCE_YAML_PATH [flags] Examples argocd admin settings resource-overrides health ./deploy.yaml --argocd-cm-path ./argocd-cm.yaml Options -h, --help help for health Options inherited from parent commands --argocd-cm-path string Path to local argocd-cm.yaml file --argocd-secret-path string Path to local argocd-secret.yaml file --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --auth-token string Authentication token --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-crt string Client certificate file --client-crt-key string Client certificate key file --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --context string The name of the kubeconfig context to use --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster --load-cluster-settings Indicates that config map and secret should be loaded from cluster unless local file path is provided --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --server string The address and port of the Kubernetes API server --server-crt string Server certificate file --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server SEE ALSO argocd admin settings resource-overrides - Troubleshoot resource overrides","title":"Argocd admin settings resource overrides health"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_resource-overrides_health/#argocd-admin-settings-resource-overrides-health","text":"Assess resource health","title":"argocd admin settings resource-overrides health"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_resource-overrides_health/#synopsis","text":"Assess resource health using the lua script configured in the 'resource.customizations' field of 'argocd-cm' ConfigMap argocd admin settings resource-overrides health RESOURCE_YAML_PATH [flags]","title":"Synopsis"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_resource-overrides_health/#examples","text":"argocd admin settings resource-overrides health ./deploy.yaml --argocd-cm-path ./argocd-cm.yaml","title":"Examples"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_resource-overrides_health/#options","text":"-h, --help help for health","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_resource-overrides_health/#options-inherited-from-parent-commands","text":"--argocd-cm-path string Path to local argocd-cm.yaml file --argocd-secret-path string Path to local argocd-secret.yaml file --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --auth-token string Authentication token --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-crt string Client certificate file --client-crt-key string Client certificate key file --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --context string The name of the kubeconfig context to use --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster --load-cluster-settings Indicates that config map and secret should be loaded from cluster unless local file path is provided --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --server string The address and port of the Kubernetes API server --server-crt string Server certificate file --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_resource-overrides_health/#see-also","text":"argocd admin settings resource-overrides - Troubleshoot resource overrides","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_resource-overrides_ignore-differences/","text":"argocd admin settings resource-overrides ignore-differences Renders fields excluded from diffing Synopsis Renders ignored fields using the 'ignoreDifferences' setting specified in the 'resource.customizations' field of 'argocd-cm' ConfigMap argocd admin settings resource-overrides ignore-differences RESOURCE_YAML_PATH [flags] Examples argocd admin settings resource-overrides ignore-differences ./deploy.yaml --argocd-cm-path ./argocd-cm.yaml Options -h, --help help for ignore-differences Options inherited from parent commands --argocd-cm-path string Path to local argocd-cm.yaml file --argocd-secret-path string Path to local argocd-secret.yaml file --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --auth-token string Authentication token --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-crt string Client certificate file --client-crt-key string Client certificate key file --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --context string The name of the kubeconfig context to use --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster --load-cluster-settings Indicates that config map and secret should be loaded from cluster unless local file path is provided --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --server string The address and port of the Kubernetes API server --server-crt string Server certificate file --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server SEE ALSO argocd admin settings resource-overrides - Troubleshoot resource overrides","title":"Argocd admin settings resource overrides ignore differences"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_resource-overrides_ignore-differences/#argocd-admin-settings-resource-overrides-ignore-differences","text":"Renders fields excluded from diffing","title":"argocd admin settings resource-overrides ignore-differences"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_resource-overrides_ignore-differences/#synopsis","text":"Renders ignored fields using the 'ignoreDifferences' setting specified in the 'resource.customizations' field of 'argocd-cm' ConfigMap argocd admin settings resource-overrides ignore-differences RESOURCE_YAML_PATH [flags]","title":"Synopsis"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_resource-overrides_ignore-differences/#examples","text":"argocd admin settings resource-overrides ignore-differences ./deploy.yaml --argocd-cm-path ./argocd-cm.yaml","title":"Examples"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_resource-overrides_ignore-differences/#options","text":"-h, --help help for ignore-differences","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_resource-overrides_ignore-differences/#options-inherited-from-parent-commands","text":"--argocd-cm-path string Path to local argocd-cm.yaml file --argocd-secret-path string Path to local argocd-secret.yaml file --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --auth-token string Authentication token --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-crt string Client certificate file --client-crt-key string Client certificate key file --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --context string The name of the kubeconfig context to use --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster --load-cluster-settings Indicates that config map and secret should be loaded from cluster unless local file path is provided --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --server string The address and port of the Kubernetes API server --server-crt string Server certificate file --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_resource-overrides_ignore-differences/#see-also","text":"argocd admin settings resource-overrides - Troubleshoot resource overrides","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_resource-overrides_list-actions/","text":"argocd admin settings resource-overrides list-actions List available resource actions Synopsis List actions available for given resource action using the lua scripts configured in the 'resource.customizations' field of 'argocd-cm' ConfigMap and outputs updated fields argocd admin settings resource-overrides list-actions RESOURCE_YAML_PATH [flags] Examples argocd admin settings resource-overrides action list /tmp/deploy.yaml --argocd-cm-path ./argocd-cm.yaml Options -h, --help help for list-actions Options inherited from parent commands --argocd-cm-path string Path to local argocd-cm.yaml file --argocd-secret-path string Path to local argocd-secret.yaml file --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --auth-token string Authentication token --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-crt string Client certificate file --client-crt-key string Client certificate key file --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --context string The name of the kubeconfig context to use --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster --load-cluster-settings Indicates that config map and secret should be loaded from cluster unless local file path is provided --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --server string The address and port of the Kubernetes API server --server-crt string Server certificate file --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server SEE ALSO argocd admin settings resource-overrides - Troubleshoot resource overrides","title":"Argocd admin settings resource overrides list actions"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_resource-overrides_list-actions/#argocd-admin-settings-resource-overrides-list-actions","text":"List available resource actions","title":"argocd admin settings resource-overrides list-actions"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_resource-overrides_list-actions/#synopsis","text":"List actions available for given resource action using the lua scripts configured in the 'resource.customizations' field of 'argocd-cm' ConfigMap and outputs updated fields argocd admin settings resource-overrides list-actions RESOURCE_YAML_PATH [flags]","title":"Synopsis"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_resource-overrides_list-actions/#examples","text":"argocd admin settings resource-overrides action list /tmp/deploy.yaml --argocd-cm-path ./argocd-cm.yaml","title":"Examples"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_resource-overrides_list-actions/#options","text":"-h, --help help for list-actions","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_resource-overrides_list-actions/#options-inherited-from-parent-commands","text":"--argocd-cm-path string Path to local argocd-cm.yaml file --argocd-secret-path string Path to local argocd-secret.yaml file --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --auth-token string Authentication token --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-crt string Client certificate file --client-crt-key string Client certificate key file --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --context string The name of the kubeconfig context to use --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster --load-cluster-settings Indicates that config map and secret should be loaded from cluster unless local file path is provided --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --server string The address and port of the Kubernetes API server --server-crt string Server certificate file --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_resource-overrides_list-actions/#see-also","text":"argocd admin settings resource-overrides - Troubleshoot resource overrides","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_resource-overrides_run-action/","text":"argocd admin settings resource-overrides run-action Executes resource action Synopsis Executes resource action using the lua script configured in the 'resource.customizations' field of 'argocd-cm' ConfigMap and outputs updated fields argocd admin settings resource-overrides run-action RESOURCE_YAML_PATH ACTION [flags] Examples argocd admin settings resource-overrides action run /tmp/deploy.yaml restart --argocd-cm-path ./argocd-cm.yaml Options -h, --help help for run-action Options inherited from parent commands --argocd-cm-path string Path to local argocd-cm.yaml file --argocd-secret-path string Path to local argocd-secret.yaml file --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --auth-token string Authentication token --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-crt string Client certificate file --client-crt-key string Client certificate key file --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --context string The name of the kubeconfig context to use --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster --load-cluster-settings Indicates that config map and secret should be loaded from cluster unless local file path is provided --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --server string The address and port of the Kubernetes API server --server-crt string Server certificate file --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server SEE ALSO argocd admin settings resource-overrides - Troubleshoot resource overrides","title":"Argocd admin settings resource overrides run action"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_resource-overrides_run-action/#argocd-admin-settings-resource-overrides-run-action","text":"Executes resource action","title":"argocd admin settings resource-overrides run-action"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_resource-overrides_run-action/#synopsis","text":"Executes resource action using the lua script configured in the 'resource.customizations' field of 'argocd-cm' ConfigMap and outputs updated fields argocd admin settings resource-overrides run-action RESOURCE_YAML_PATH ACTION [flags]","title":"Synopsis"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_resource-overrides_run-action/#examples","text":"argocd admin settings resource-overrides action run /tmp/deploy.yaml restart --argocd-cm-path ./argocd-cm.yaml","title":"Examples"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_resource-overrides_run-action/#options","text":"-h, --help help for run-action","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_resource-overrides_run-action/#options-inherited-from-parent-commands","text":"--argocd-cm-path string Path to local argocd-cm.yaml file --argocd-secret-path string Path to local argocd-secret.yaml file --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --auth-token string Authentication token --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-crt string Client certificate file --client-crt-key string Client certificate key file --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --context string The name of the kubeconfig context to use --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster --load-cluster-settings Indicates that config map and secret should be loaded from cluster unless local file path is provided --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --server string The address and port of the Kubernetes API server --server-crt string Server certificate file --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_resource-overrides_run-action/#see-also","text":"argocd admin settings resource-overrides - Troubleshoot resource overrides","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_validate/","text":"argocd admin settings validate Validate settings Synopsis Validates settings specified in 'argocd-cm' ConfigMap and 'argocd-secret' Secret argocd admin settings validate [flags] Examples #Validates all settings in the specified YAML file argocd admin settings validate --argocd-cm-path ./argocd-cm.yaml #Validates accounts and plugins settings in Kubernetes cluster of current kubeconfig context argocd admin settings validate --group accounts --group plugins --load-cluster-settings Options --group stringArray Optional list of setting groups that have to be validated ( one of: accounts, general, kustomize, plugins, repositories, resource-overrides) -h, --help help for validate Options inherited from parent commands --argocd-cm-path string Path to local argocd-cm.yaml file --argocd-secret-path string Path to local argocd-secret.yaml file --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --auth-token string Authentication token --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-crt string Client certificate file --client-crt-key string Client certificate key file --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --context string The name of the kubeconfig context to use --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster --load-cluster-settings Indicates that config map and secret should be loaded from cluster unless local file path is provided --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --server string The address and port of the Kubernetes API server --server-crt string Server certificate file --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server SEE ALSO argocd admin settings - Provides set of commands for settings validation and troubleshooting","title":"Argocd admin settings validate"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_validate/#argocd-admin-settings-validate","text":"Validate settings","title":"argocd admin settings validate"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_validate/#synopsis","text":"Validates settings specified in 'argocd-cm' ConfigMap and 'argocd-secret' Secret argocd admin settings validate [flags]","title":"Synopsis"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_validate/#examples","text":"#Validates all settings in the specified YAML file argocd admin settings validate --argocd-cm-path ./argocd-cm.yaml #Validates accounts and plugins settings in Kubernetes cluster of current kubeconfig context argocd admin settings validate --group accounts --group plugins --load-cluster-settings","title":"Examples"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_validate/#options","text":"--group stringArray Optional list of setting groups that have to be validated ( one of: accounts, general, kustomize, plugins, repositories, resource-overrides) -h, --help help for validate","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_validate/#options-inherited-from-parent-commands","text":"--argocd-cm-path string Path to local argocd-cm.yaml file --argocd-secret-path string Path to local argocd-secret.yaml file --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --auth-token string Authentication token --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-crt string Client certificate file --client-crt-key string Client certificate key file --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --context string The name of the kubeconfig context to use --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster --load-cluster-settings Indicates that config map and secret should be loaded from cluster unless local file path is provided --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --server string The address and port of the Kubernetes API server --server-crt string Server certificate file --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_admin_settings_validate/#see-also","text":"argocd admin settings - Provides set of commands for settings validation and troubleshooting","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app/","text":"argocd app Manage applications argocd app [flags] Examples # List all the applications. argocd app list # Get the details of a application argocd app get my-app # Set an override parameter argocd app set my-app -p image.tag=v1.0.1 Options --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for app --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd - argocd controls a Argo CD server argocd app actions - Manage Resource actions argocd app create - Create an application argocd app delete - Delete an application argocd app delete-resource - Delete resource in an application argocd app diff - Perform a diff against the target and live state. argocd app edit - Edit application argocd app get - Get application details argocd app history - Show application deployment history argocd app list - List applications argocd app logs - Get logs of application pods argocd app manifests - Print manifests of an application argocd app patch - Patch application argocd app patch-resource - Patch resource in an application argocd app resources - List resource of application argocd app rollback - Rollback application to a previous deployed version by History ID, omitted will Rollback to the previous version argocd app set - Set application parameters argocd app sync - Sync an application to its target state argocd app terminate-op - Terminate running operation of an application argocd app unset - Unset application parameters argocd app wait - Wait for an application to reach a synced and healthy state","title":"Argocd app"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app/#argocd-app","text":"Manage applications argocd app [flags]","title":"argocd app"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app/#examples","text":"# List all the applications. argocd app list # Get the details of a application argocd app get my-app # Set an override parameter argocd app set my-app -p image.tag=v1.0.1","title":"Examples"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app/#options","text":"--as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for app --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app/#see-also","text":"argocd - argocd controls a Argo CD server argocd app actions - Manage Resource actions argocd app create - Create an application argocd app delete - Delete an application argocd app delete-resource - Delete resource in an application argocd app diff - Perform a diff against the target and live state. argocd app edit - Edit application argocd app get - Get application details argocd app history - Show application deployment history argocd app list - List applications argocd app logs - Get logs of application pods argocd app manifests - Print manifests of an application argocd app patch - Patch application argocd app patch-resource - Patch resource in an application argocd app resources - List resource of application argocd app rollback - Rollback application to a previous deployed version by History ID, omitted will Rollback to the previous version argocd app set - Set application parameters argocd app sync - Sync an application to its target state argocd app terminate-op - Terminate running operation of an application argocd app unset - Unset application parameters argocd app wait - Wait for an application to reach a synced and healthy state","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_actions/","text":"argocd app actions Manage Resource actions argocd app actions [flags] Options -h, --help help for actions Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd app - Manage applications argocd app actions list - Lists available actions on a resource argocd app actions run - Runs an available action on resource(s)","title":"Argocd app actions"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_actions/#argocd-app-actions","text":"Manage Resource actions argocd app actions [flags]","title":"argocd app actions"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_actions/#options","text":"-h, --help help for actions","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_actions/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_actions/#see-also","text":"argocd app - Manage applications argocd app actions list - Lists available actions on a resource argocd app actions run - Runs an available action on resource(s)","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_actions_list/","text":"argocd app actions list Lists available actions on a resource argocd app actions list APPNAME [flags] Options --group string Group -h, --help help for list --kind string Kind --namespace string Namespace -o, --out string Output format. One of: yaml, json --resource-name string Name of resource Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd app actions - Manage Resource actions","title":"Argocd app actions list"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_actions_list/#argocd-app-actions-list","text":"Lists available actions on a resource argocd app actions list APPNAME [flags]","title":"argocd app actions list"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_actions_list/#options","text":"--group string Group -h, --help help for list --kind string Kind --namespace string Namespace -o, --out string Output format. One of: yaml, json --resource-name string Name of resource","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_actions_list/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_actions_list/#see-also","text":"argocd app actions - Manage Resource actions","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_actions_run/","text":"argocd app actions run Runs an available action on resource(s) argocd app actions run APPNAME ACTION [flags] Options --all Indicates whether to run the action on multiple matching resources --group string Group -h, --help help for run --kind string Kind --namespace string Namespace --resource-name string Name of resource Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd app actions - Manage Resource actions","title":"Argocd app actions run"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_actions_run/#argocd-app-actions-run","text":"Runs an available action on resource(s) argocd app actions run APPNAME ACTION [flags]","title":"argocd app actions run"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_actions_run/#options","text":"--all Indicates whether to run the action on multiple matching resources --group string Group -h, --help help for run --kind string Kind --namespace string Namespace --resource-name string Name of resource","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_actions_run/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_actions_run/#see-also","text":"argocd app actions - Manage Resource actions","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_create/","text":"argocd app create Create an application argocd app create APPNAME [flags] Examples # Create a directory app argocd app create guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --directory-recurse # Create a Jsonnet app argocd app create jsonnet-guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path jsonnet-guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --jsonnet-ext-str replicas=2 # Create a Helm app argocd app create helm-guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path helm-guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --helm-set replicaCount=2 # Create a Helm app from a Helm repo argocd app create nginx-ingress --repo https://charts.helm.sh/stable --helm-chart nginx-ingress --revision 1.24.3 --dest-namespace default --dest-server https://kubernetes.default.svc # Create a Kustomize app argocd app create kustomize-guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path kustomize-guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --kustomize-image gcr.io/heptio-images/ks-guestbook-demo:0.1 # Create a app using a custom tool: argocd app create ksane --repo https://github.com/argoproj/argocd-example-apps.git --path plugins/kasane --dest-namespace default --dest-server https://kubernetes.default.svc --config-management-plugin kasane Options --allow-empty Set allow zero live resources when sync is automated --annotations stringArray Set metadata annotations (e.g. example=value) --auto-prune Set automatic pruning when sync is automated --config-management-plugin string Config management plugin name --dest-name string K8s cluster Name (e.g. minikube) --dest-namespace string K8s target namespace (overrides the namespace specified in the ksonnet app.yaml) --dest-server string K8s cluster URL (e.g. https://kubernetes.default.svc) --directory-exclude string Set glob expression used to exclude files from application source path --directory-include string Set glob expression used to include files from application source path --directory-recurse Recurse directory --env string Application environment to monitor -f, --file string Filename or URL to Kubernetes manifests for the app --helm-chart string Helm Chart name --helm-pass-credentials Pass credentials to all domain --helm-set stringArray Helm set values on the command line (can be repeated to set several values: --helm-set key1=val1 --helm-set key2=val2) --helm-set-file stringArray Helm set values from respective files specified via the command line (can be repeated to set several values: --helm-set-file key1=path1 --helm-set-file key2=path2) --helm-set-string stringArray Helm set STRING values on the command line (can be repeated to set several values: --helm-set-string key1=val1 --helm-set-string key2=val2) --helm-version string Helm version -h, --help help for create --jsonnet-ext-var-code stringArray Jsonnet ext var --jsonnet-ext-var-str stringArray Jsonnet string ext var --jsonnet-libs stringArray Additional jsonnet libs (prefixed by repoRoot) --jsonnet-tla-code stringArray Jsonnet top level code arguments --jsonnet-tla-str stringArray Jsonnet top level string arguments --kustomize-common-annotation stringArray Set common labels in Kustomize --kustomize-common-label stringArray Set common labels in Kustomize --kustomize-force-common-annotation Force common annotations in Kustomize --kustomize-force-common-label Force common labels in Kustomize --kustomize-image stringArray Kustomize images (e.g. --kustomize-image node:8.15.0 --kustomize-image mysql=mariadb,alpine@sha256:24a0c4b4a4c0eb97a1aabb8e29f18e917d05abfe1b7a7c07857230879ce7d3d) --kustomize-version string Kustomize version -l, --label stringArray Labels to apply to the app --name string A name for the app, ignored if a file is set (DEPRECATED) --nameprefix string Kustomize nameprefix --namesuffix string Kustomize namesuffix -p, --parameter stringArray set a parameter override (e.g. -p guestbook=image=example/guestbook:latest) --path string Path in repository to the app directory, ignored if a file is set --plugin-env stringArray Additional plugin envs --project string Application project name --release-name string Helm release-name --repo string Repository URL, ignored if a file is set --revision string The tracking source branch, tag, commit or Helm chart version the application will sync to --revision-history-limit int How many items to keep in revision history (default 10) --self-heal Set self healing when sync is automated --sync-option Prune=false Add or remove a sync option, e.g add Prune=false. Remove using `!` prefix, e.g. `!Prune=false` --sync-policy string Set the sync policy (one of: none, automated (aliases of automated: auto, automatic)) --sync-retry-backoff-duration duration Sync retry backoff base duration. Input needs to be a duration (e.g. 2m, 1h) (default 5s) --sync-retry-backoff-factor int Factor multiplies the base duration after each failed sync retry (default 2) --sync-retry-backoff-max-duration duration Max sync retry backoff duration. Input needs to be a duration (e.g. 2m, 1h) (default 3m0s) --sync-retry-limit int Max number of allowed sync retries --upsert Allows to override application with the same name even if supplied application spec is different from existing spec --validate Validation of repo and cluster (default true) --values stringArray Helm values file(s) to use --values-literal-file string Filename or URL to import as a literal Helm values block Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd app - Manage applications","title":"Argocd app create"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_create/#argocd-app-create","text":"Create an application argocd app create APPNAME [flags]","title":"argocd app create"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_create/#examples","text":"# Create a directory app argocd app create guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --directory-recurse # Create a Jsonnet app argocd app create jsonnet-guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path jsonnet-guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --jsonnet-ext-str replicas=2 # Create a Helm app argocd app create helm-guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path helm-guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --helm-set replicaCount=2 # Create a Helm app from a Helm repo argocd app create nginx-ingress --repo https://charts.helm.sh/stable --helm-chart nginx-ingress --revision 1.24.3 --dest-namespace default --dest-server https://kubernetes.default.svc # Create a Kustomize app argocd app create kustomize-guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path kustomize-guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --kustomize-image gcr.io/heptio-images/ks-guestbook-demo:0.1 # Create a app using a custom tool: argocd app create ksane --repo https://github.com/argoproj/argocd-example-apps.git --path plugins/kasane --dest-namespace default --dest-server https://kubernetes.default.svc --config-management-plugin kasane","title":"Examples"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_create/#options","text":"--allow-empty Set allow zero live resources when sync is automated --annotations stringArray Set metadata annotations (e.g. example=value) --auto-prune Set automatic pruning when sync is automated --config-management-plugin string Config management plugin name --dest-name string K8s cluster Name (e.g. minikube) --dest-namespace string K8s target namespace (overrides the namespace specified in the ksonnet app.yaml) --dest-server string K8s cluster URL (e.g. https://kubernetes.default.svc) --directory-exclude string Set glob expression used to exclude files from application source path --directory-include string Set glob expression used to include files from application source path --directory-recurse Recurse directory --env string Application environment to monitor -f, --file string Filename or URL to Kubernetes manifests for the app --helm-chart string Helm Chart name --helm-pass-credentials Pass credentials to all domain --helm-set stringArray Helm set values on the command line (can be repeated to set several values: --helm-set key1=val1 --helm-set key2=val2) --helm-set-file stringArray Helm set values from respective files specified via the command line (can be repeated to set several values: --helm-set-file key1=path1 --helm-set-file key2=path2) --helm-set-string stringArray Helm set STRING values on the command line (can be repeated to set several values: --helm-set-string key1=val1 --helm-set-string key2=val2) --helm-version string Helm version -h, --help help for create --jsonnet-ext-var-code stringArray Jsonnet ext var --jsonnet-ext-var-str stringArray Jsonnet string ext var --jsonnet-libs stringArray Additional jsonnet libs (prefixed by repoRoot) --jsonnet-tla-code stringArray Jsonnet top level code arguments --jsonnet-tla-str stringArray Jsonnet top level string arguments --kustomize-common-annotation stringArray Set common labels in Kustomize --kustomize-common-label stringArray Set common labels in Kustomize --kustomize-force-common-annotation Force common annotations in Kustomize --kustomize-force-common-label Force common labels in Kustomize --kustomize-image stringArray Kustomize images (e.g. --kustomize-image node:8.15.0 --kustomize-image mysql=mariadb,alpine@sha256:24a0c4b4a4c0eb97a1aabb8e29f18e917d05abfe1b7a7c07857230879ce7d3d) --kustomize-version string Kustomize version -l, --label stringArray Labels to apply to the app --name string A name for the app, ignored if a file is set (DEPRECATED) --nameprefix string Kustomize nameprefix --namesuffix string Kustomize namesuffix -p, --parameter stringArray set a parameter override (e.g. -p guestbook=image=example/guestbook:latest) --path string Path in repository to the app directory, ignored if a file is set --plugin-env stringArray Additional plugin envs --project string Application project name --release-name string Helm release-name --repo string Repository URL, ignored if a file is set --revision string The tracking source branch, tag, commit or Helm chart version the application will sync to --revision-history-limit int How many items to keep in revision history (default 10) --self-heal Set self healing when sync is automated --sync-option Prune=false Add or remove a sync option, e.g add Prune=false. Remove using `!` prefix, e.g. `!Prune=false` --sync-policy string Set the sync policy (one of: none, automated (aliases of automated: auto, automatic)) --sync-retry-backoff-duration duration Sync retry backoff base duration. Input needs to be a duration (e.g. 2m, 1h) (default 5s) --sync-retry-backoff-factor int Factor multiplies the base duration after each failed sync retry (default 2) --sync-retry-backoff-max-duration duration Max sync retry backoff duration. Input needs to be a duration (e.g. 2m, 1h) (default 3m0s) --sync-retry-limit int Max number of allowed sync retries --upsert Allows to override application with the same name even if supplied application spec is different from existing spec --validate Validation of repo and cluster (default true) --values stringArray Helm values file(s) to use --values-literal-file string Filename or URL to import as a literal Helm values block","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_create/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_create/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_delete-resource/","text":"argocd app delete-resource Delete resource in an application argocd app delete-resource APPNAME [flags] Options --all Indicates whether to patch multiple matching of resources --force Indicates whether to orphan the dependents of the deleted resource --group string Group -h, --help help for delete-resource --kind string Kind --namespace string Namespace --orphan Indicates whether to force delete the resource --resource-name string Name of resource Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd app - Manage applications","title":"Argocd app delete resource"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_delete-resource/#argocd-app-delete-resource","text":"Delete resource in an application argocd app delete-resource APPNAME [flags]","title":"argocd app delete-resource"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_delete-resource/#options","text":"--all Indicates whether to patch multiple matching of resources --force Indicates whether to orphan the dependents of the deleted resource --group string Group -h, --help help for delete-resource --kind string Kind --namespace string Namespace --orphan Indicates whether to force delete the resource --resource-name string Name of resource","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_delete-resource/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_delete-resource/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_delete/","text":"argocd app delete Delete an application argocd app delete APPNAME [flags] Options --cascade Perform a cascaded deletion of all application resources (default true) -h, --help help for delete -p, --propagation-policy string Specify propagation policy for deletion of application's resources. One of: foreground|background (default \"foreground\") -y, --yes Turn off prompting to confirm cascaded deletion of application resources Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd app - Manage applications","title":"Argocd app delete"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_delete/#argocd-app-delete","text":"Delete an application argocd app delete APPNAME [flags]","title":"argocd app delete"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_delete/#options","text":"--cascade Perform a cascaded deletion of all application resources (default true) -h, --help help for delete -p, --propagation-policy string Specify propagation policy for deletion of application's resources. One of: foreground|background (default \"foreground\") -y, --yes Turn off prompting to confirm cascaded deletion of application resources","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_delete/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_delete/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_diff/","text":"argocd app diff Perform a diff against the target and live state. Synopsis Perform a diff against the target and live state. Uses 'diff' to render the difference. KUBECTL_EXTERNAL_DIFF environment variable can be used to select your own diff tool. Returns the following exit codes: 2 on general errors, 1 when a diff is found, and 0 when no diff is found argocd app diff APPNAME [flags] Options --exit-code Return non-zero exit code when there is a diff (default true) --hard-refresh Refresh application data as well as target manifests cache -h, --help help for diff --local string Compare live app to a local manifests --local-repo-root string Path to the repository root. Used together with --local allows setting the repository root (default \"/\") --refresh Refresh application data when retrieving --revision string Compare live app to a particular revision Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd app - Manage applications","title":"Argocd app diff"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_diff/#argocd-app-diff","text":"Perform a diff against the target and live state.","title":"argocd app diff"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_diff/#synopsis","text":"Perform a diff against the target and live state. Uses 'diff' to render the difference. KUBECTL_EXTERNAL_DIFF environment variable can be used to select your own diff tool. Returns the following exit codes: 2 on general errors, 1 when a diff is found, and 0 when no diff is found argocd app diff APPNAME [flags]","title":"Synopsis"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_diff/#options","text":"--exit-code Return non-zero exit code when there is a diff (default true) --hard-refresh Refresh application data as well as target manifests cache -h, --help help for diff --local string Compare live app to a local manifests --local-repo-root string Path to the repository root. Used together with --local allows setting the repository root (default \"/\") --refresh Refresh application data when retrieving --revision string Compare live app to a particular revision","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_diff/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_diff/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_edit/","text":"argocd app edit Edit application argocd app edit APPNAME [flags] Options -h, --help help for edit Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd app - Manage applications","title":"Argocd app edit"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_edit/#argocd-app-edit","text":"Edit application argocd app edit APPNAME [flags]","title":"argocd app edit"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_edit/#options","text":"-h, --help help for edit","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_edit/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_edit/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_get/","text":"argocd app get Get application details argocd app get APPNAME [flags] Options --hard-refresh Refresh application data as well as target manifests cache -h, --help help for get -o, --output string Output format. One of: json|yaml|wide (default \"wide\") --refresh Refresh application data when retrieving --show-operation Show application operation --show-params Show application parameters and overrides Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd app - Manage applications","title":"Argocd app get"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_get/#argocd-app-get","text":"Get application details argocd app get APPNAME [flags]","title":"argocd app get"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_get/#options","text":"--hard-refresh Refresh application data as well as target manifests cache -h, --help help for get -o, --output string Output format. One of: json|yaml|wide (default \"wide\") --refresh Refresh application data when retrieving --show-operation Show application operation --show-params Show application parameters and overrides","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_get/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_get/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_history/","text":"argocd app history Show application deployment history argocd app history APPNAME [flags] Options -h, --help help for history -o, --output string Output format. One of: wide|id (default \"wide\") Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd app - Manage applications","title":"Argocd app history"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_history/#argocd-app-history","text":"Show application deployment history argocd app history APPNAME [flags]","title":"argocd app history"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_history/#options","text":"-h, --help help for history -o, --output string Output format. One of: wide|id (default \"wide\")","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_history/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_history/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_list/","text":"argocd app list List applications argocd app list [flags] Examples # List all apps argocd app list # List apps by label, in this example we listing apps that are children of another app (aka app-of-apps) argocd app list -l app.kubernetes.io/instance=my-app Options -h, --help help for list -o, --output string Output format. One of: wide|name|json|yaml (default \"wide\") -p, --project stringArray Filter by project name -r, --repo string List apps by source repo URL -l, --selector string List apps by label Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd app - Manage applications","title":"Argocd app list"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_list/#argocd-app-list","text":"List applications argocd app list [flags]","title":"argocd app list"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_list/#examples","text":"# List all apps argocd app list # List apps by label, in this example we listing apps that are children of another app (aka app-of-apps) argocd app list -l app.kubernetes.io/instance=my-app","title":"Examples"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_list/#options","text":"-h, --help help for list -o, --output string Output format. One of: wide|name|json|yaml (default \"wide\") -p, --project stringArray Filter by project name -r, --repo string List apps by source repo URL -l, --selector string List apps by label","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_list/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_list/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_logs/","text":"argocd app logs Get logs of application pods argocd app logs APPNAME [flags] Options --container string Optional container name --filter string Show logs contain this string --follow Specify if the logs should be streamed --group string Resource group -h, --help help for logs --kind string Resource kind --name string Resource name --namespace string Resource namespace --since-seconds int A relative time in seconds before the current time from which to show logs --tail int The number of lines from the end of the logs to show --until-time string Show logs until this time Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd app - Manage applications","title":"Argocd app logs"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_logs/#argocd-app-logs","text":"Get logs of application pods argocd app logs APPNAME [flags]","title":"argocd app logs"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_logs/#options","text":"--container string Optional container name --filter string Show logs contain this string --follow Specify if the logs should be streamed --group string Resource group -h, --help help for logs --kind string Resource kind --name string Resource name --namespace string Resource namespace --since-seconds int A relative time in seconds before the current time from which to show logs --tail int The number of lines from the end of the logs to show --until-time string Show logs until this time","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_logs/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_logs/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_manifests/","text":"argocd app manifests Print manifests of an application argocd app manifests APPNAME [flags] Options -h, --help help for manifests --revision string Show manifests at a specific revision --source string Source of manifests. One of: live|git (default \"git\") Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd app - Manage applications","title":"Argocd app manifests"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_manifests/#argocd-app-manifests","text":"Print manifests of an application argocd app manifests APPNAME [flags]","title":"argocd app manifests"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_manifests/#options","text":"-h, --help help for manifests --revision string Show manifests at a specific revision --source string Source of manifests. One of: live|git (default \"git\")","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_manifests/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_manifests/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_patch-resource/","text":"argocd app patch-resource Patch resource in an application argocd app patch-resource APPNAME [flags] Options --all Indicates whether to patch multiple matching of resources --group string Group -h, --help help for patch-resource --kind string Kind --namespace string Namespace --patch string Patch --patch-type string Which Patching strategy to use: 'application/json-patch+json', 'application/merge-patch+json', or 'application/strategic-merge-patch+json'. Defaults to 'application/merge-patch+json' (default \"application/merge-patch+json\") --resource-name string Name of resource Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd app - Manage applications","title":"Argocd app patch resource"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_patch-resource/#argocd-app-patch-resource","text":"Patch resource in an application argocd app patch-resource APPNAME [flags]","title":"argocd app patch-resource"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_patch-resource/#options","text":"--all Indicates whether to patch multiple matching of resources --group string Group -h, --help help for patch-resource --kind string Kind --namespace string Namespace --patch string Patch --patch-type string Which Patching strategy to use: 'application/json-patch+json', 'application/merge-patch+json', or 'application/strategic-merge-patch+json'. Defaults to 'application/merge-patch+json' (default \"application/merge-patch+json\") --resource-name string Name of resource","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_patch-resource/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_patch-resource/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_patch/","text":"argocd app patch Patch application Synopsis Examples: # Update an application's source path using json patch argocd app patch myapplication --patch='[{\"op\": \"replace\", \"path\": \"/spec/source/path\", \"value\": \"newPath\"}]' --type json # Update an application's repository target revision using merge patch argocd app patch myapplication --patch '{\"spec\": { \"source\": { \"targetRevision\": \"master\" } }}' --type merge argocd app patch APPNAME [flags] Options -h, --help help for patch --patch string Patch body --type string The type of patch being provided; one of [json merge] (default \"json\") Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd app - Manage applications","title":"Argocd app patch"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_patch/#argocd-app-patch","text":"Patch application","title":"argocd app patch"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_patch/#synopsis","text":"Examples: # Update an application's source path using json patch argocd app patch myapplication --patch='[{\"op\": \"replace\", \"path\": \"/spec/source/path\", \"value\": \"newPath\"}]' --type json # Update an application's repository target revision using merge patch argocd app patch myapplication --patch '{\"spec\": { \"source\": { \"targetRevision\": \"master\" } }}' --type merge argocd app patch APPNAME [flags]","title":"Synopsis"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_patch/#options","text":"-h, --help help for patch --patch string Patch body --type string The type of patch being provided; one of [json merge] (default \"json\")","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_patch/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_patch/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_resources/","text":"argocd app resources List resource of application argocd app resources APPNAME [flags] Options -h, --help help for resources --orphaned Lists only orphaned resources Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd app - Manage applications","title":"Argocd app resources"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_resources/#argocd-app-resources","text":"List resource of application argocd app resources APPNAME [flags]","title":"argocd app resources"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_resources/#options","text":"-h, --help help for resources --orphaned Lists only orphaned resources","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_resources/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_resources/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_rollback/","text":"argocd app rollback Rollback application to a previous deployed version by History ID, omitted will Rollback to the previous version argocd app rollback APPNAME [ID] [flags] Options -h, --help help for rollback --prune Allow deleting unexpected resources --timeout uint Time out after this many seconds Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd app - Manage applications","title":"Argocd app rollback"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_rollback/#argocd-app-rollback","text":"Rollback application to a previous deployed version by History ID, omitted will Rollback to the previous version argocd app rollback APPNAME [ID] [flags]","title":"argocd app rollback"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_rollback/#options","text":"-h, --help help for rollback --prune Allow deleting unexpected resources --timeout uint Time out after this many seconds","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_rollback/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_rollback/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_set/","text":"argocd app set Set application parameters argocd app set APPNAME [flags] Options --allow-empty Set allow zero live resources when sync is automated --auto-prune Set automatic pruning when sync is automated --config-management-plugin string Config management plugin name --dest-name string K8s cluster Name (e.g. minikube) --dest-namespace string K8s target namespace (overrides the namespace specified in the ksonnet app.yaml) --dest-server string K8s cluster URL (e.g. https://kubernetes.default.svc) --directory-exclude string Set glob expression used to exclude files from application source path --directory-include string Set glob expression used to include files from application source path --directory-recurse Recurse directory --env string Application environment to monitor --helm-chart string Helm Chart name --helm-pass-credentials Pass credentials to all domain --helm-set stringArray Helm set values on the command line (can be repeated to set several values: --helm-set key1=val1 --helm-set key2=val2) --helm-set-file stringArray Helm set values from respective files specified via the command line (can be repeated to set several values: --helm-set-file key1=path1 --helm-set-file key2=path2) --helm-set-string stringArray Helm set STRING values on the command line (can be repeated to set several values: --helm-set-string key1=val1 --helm-set-string key2=val2) --helm-version string Helm version -h, --help help for set --jsonnet-ext-var-code stringArray Jsonnet ext var --jsonnet-ext-var-str stringArray Jsonnet string ext var --jsonnet-libs stringArray Additional jsonnet libs (prefixed by repoRoot) --jsonnet-tla-code stringArray Jsonnet top level code arguments --jsonnet-tla-str stringArray Jsonnet top level string arguments --kustomize-common-annotation stringArray Set common labels in Kustomize --kustomize-common-label stringArray Set common labels in Kustomize --kustomize-force-common-annotation Force common annotations in Kustomize --kustomize-force-common-label Force common labels in Kustomize --kustomize-image stringArray Kustomize images (e.g. --kustomize-image node:8.15.0 --kustomize-image mysql=mariadb,alpine@sha256:24a0c4b4a4c0eb97a1aabb8e29f18e917d05abfe1b7a7c07857230879ce7d3d) --kustomize-version string Kustomize version --nameprefix string Kustomize nameprefix --namesuffix string Kustomize namesuffix -p, --parameter stringArray set a parameter override (e.g. -p guestbook=image=example/guestbook:latest) --path string Path in repository to the app directory, ignored if a file is set --plugin-env stringArray Additional plugin envs --project string Application project name --release-name string Helm release-name --repo string Repository URL, ignored if a file is set --revision string The tracking source branch, tag, commit or Helm chart version the application will sync to --revision-history-limit int How many items to keep in revision history (default 10) --self-heal Set self healing when sync is automated --sync-option Prune=false Add or remove a sync option, e.g add Prune=false. Remove using `!` prefix, e.g. `!Prune=false` --sync-policy string Set the sync policy (one of: none, automated (aliases of automated: auto, automatic)) --sync-retry-backoff-duration duration Sync retry backoff base duration. Input needs to be a duration (e.g. 2m, 1h) (default 5s) --sync-retry-backoff-factor int Factor multiplies the base duration after each failed sync retry (default 2) --sync-retry-backoff-max-duration duration Max sync retry backoff duration. Input needs to be a duration (e.g. 2m, 1h) (default 3m0s) --sync-retry-limit int Max number of allowed sync retries --validate Validation of repo and cluster (default true) --values stringArray Helm values file(s) to use --values-literal-file string Filename or URL to import as a literal Helm values block Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd app - Manage applications","title":"Argocd app set"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_set/#argocd-app-set","text":"Set application parameters argocd app set APPNAME [flags]","title":"argocd app set"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_set/#options","text":"--allow-empty Set allow zero live resources when sync is automated --auto-prune Set automatic pruning when sync is automated --config-management-plugin string Config management plugin name --dest-name string K8s cluster Name (e.g. minikube) --dest-namespace string K8s target namespace (overrides the namespace specified in the ksonnet app.yaml) --dest-server string K8s cluster URL (e.g. https://kubernetes.default.svc) --directory-exclude string Set glob expression used to exclude files from application source path --directory-include string Set glob expression used to include files from application source path --directory-recurse Recurse directory --env string Application environment to monitor --helm-chart string Helm Chart name --helm-pass-credentials Pass credentials to all domain --helm-set stringArray Helm set values on the command line (can be repeated to set several values: --helm-set key1=val1 --helm-set key2=val2) --helm-set-file stringArray Helm set values from respective files specified via the command line (can be repeated to set several values: --helm-set-file key1=path1 --helm-set-file key2=path2) --helm-set-string stringArray Helm set STRING values on the command line (can be repeated to set several values: --helm-set-string key1=val1 --helm-set-string key2=val2) --helm-version string Helm version -h, --help help for set --jsonnet-ext-var-code stringArray Jsonnet ext var --jsonnet-ext-var-str stringArray Jsonnet string ext var --jsonnet-libs stringArray Additional jsonnet libs (prefixed by repoRoot) --jsonnet-tla-code stringArray Jsonnet top level code arguments --jsonnet-tla-str stringArray Jsonnet top level string arguments --kustomize-common-annotation stringArray Set common labels in Kustomize --kustomize-common-label stringArray Set common labels in Kustomize --kustomize-force-common-annotation Force common annotations in Kustomize --kustomize-force-common-label Force common labels in Kustomize --kustomize-image stringArray Kustomize images (e.g. --kustomize-image node:8.15.0 --kustomize-image mysql=mariadb,alpine@sha256:24a0c4b4a4c0eb97a1aabb8e29f18e917d05abfe1b7a7c07857230879ce7d3d) --kustomize-version string Kustomize version --nameprefix string Kustomize nameprefix --namesuffix string Kustomize namesuffix -p, --parameter stringArray set a parameter override (e.g. -p guestbook=image=example/guestbook:latest) --path string Path in repository to the app directory, ignored if a file is set --plugin-env stringArray Additional plugin envs --project string Application project name --release-name string Helm release-name --repo string Repository URL, ignored if a file is set --revision string The tracking source branch, tag, commit or Helm chart version the application will sync to --revision-history-limit int How many items to keep in revision history (default 10) --self-heal Set self healing when sync is automated --sync-option Prune=false Add or remove a sync option, e.g add Prune=false. Remove using `!` prefix, e.g. `!Prune=false` --sync-policy string Set the sync policy (one of: none, automated (aliases of automated: auto, automatic)) --sync-retry-backoff-duration duration Sync retry backoff base duration. Input needs to be a duration (e.g. 2m, 1h) (default 5s) --sync-retry-backoff-factor int Factor multiplies the base duration after each failed sync retry (default 2) --sync-retry-backoff-max-duration duration Max sync retry backoff duration. Input needs to be a duration (e.g. 2m, 1h) (default 3m0s) --sync-retry-limit int Max number of allowed sync retries --validate Validation of repo and cluster (default true) --values stringArray Helm values file(s) to use --values-literal-file string Filename or URL to import as a literal Helm values block","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_set/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_set/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_sync/","text":"argocd app sync Sync an application to its target state argocd app sync [APPNAME... | -l selector] [flags] Examples # Sync an app argocd app sync my-app # Sync multiples apps argocd app sync my-app other-app # Sync apps by label, in this example we sync apps that are children of another app (aka app-of-apps) argocd app sync -l app.kubernetes.io/instance=my-app # Sync a specific resource # Resource should be formatted as GROUP:KIND:NAME. If no GROUP is specified then :KIND:NAME argocd app sync my-app --resource :Service:my-service argocd app sync my-app --resource argoproj.io:Rollout:my-rollout # Specify namespace if the application has resources with the same name in different namespaces argocd app sync my-app --resource argoproj.io:Rollout:my-namespace/my-rollout Options --async Do not wait for application to sync before continuing --dry-run Preview apply without affecting cluster --force Use a force apply -h, --help help for sync --info stringArray A list of key-value pairs during sync process. These infos will be persisted in app. --label stringArray Sync only specific resources with a label. This option may be specified repeatedly. --local string Path to a local directory. When this flag is present no git queries will be made --local-repo-root string Path to the repository root. Used together with --local allows setting the repository root (default \"/\") --prune Allow deleting unexpected resources --replace Use a kubectl create/replace instead apply --resource stringArray Sync only specific resources as GROUP:KIND:NAME. Fields may be blank. This option may be specified repeatedly --retry-backoff-duration duration Retry backoff base duration. Input needs to be a duration (e.g. 2m, 1h) (default 5s) --retry-backoff-factor int Factor multiplies the base duration after each failed retry (default 2) --retry-backoff-max-duration duration Max retry backoff duration. Input needs to be a duration (e.g. 2m, 1h) (default 3m0s) --retry-limit int Max number of allowed sync retries --revision string Sync to a specific revision. Preserves parameter overrides -l, --selector string Sync apps that match this label --strategy string Sync strategy (one of: apply|hook) --timeout uint Time out after this many seconds Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd app - Manage applications","title":"Argocd app sync"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_sync/#argocd-app-sync","text":"Sync an application to its target state argocd app sync [APPNAME... | -l selector] [flags]","title":"argocd app sync"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_sync/#examples","text":"# Sync an app argocd app sync my-app # Sync multiples apps argocd app sync my-app other-app # Sync apps by label, in this example we sync apps that are children of another app (aka app-of-apps) argocd app sync -l app.kubernetes.io/instance=my-app # Sync a specific resource # Resource should be formatted as GROUP:KIND:NAME. If no GROUP is specified then :KIND:NAME argocd app sync my-app --resource :Service:my-service argocd app sync my-app --resource argoproj.io:Rollout:my-rollout # Specify namespace if the application has resources with the same name in different namespaces argocd app sync my-app --resource argoproj.io:Rollout:my-namespace/my-rollout","title":"Examples"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_sync/#options","text":"--async Do not wait for application to sync before continuing --dry-run Preview apply without affecting cluster --force Use a force apply -h, --help help for sync --info stringArray A list of key-value pairs during sync process. These infos will be persisted in app. --label stringArray Sync only specific resources with a label. This option may be specified repeatedly. --local string Path to a local directory. When this flag is present no git queries will be made --local-repo-root string Path to the repository root. Used together with --local allows setting the repository root (default \"/\") --prune Allow deleting unexpected resources --replace Use a kubectl create/replace instead apply --resource stringArray Sync only specific resources as GROUP:KIND:NAME. Fields may be blank. This option may be specified repeatedly --retry-backoff-duration duration Retry backoff base duration. Input needs to be a duration (e.g. 2m, 1h) (default 5s) --retry-backoff-factor int Factor multiplies the base duration after each failed retry (default 2) --retry-backoff-max-duration duration Max retry backoff duration. Input needs to be a duration (e.g. 2m, 1h) (default 3m0s) --retry-limit int Max number of allowed sync retries --revision string Sync to a specific revision. Preserves parameter overrides -l, --selector string Sync apps that match this label --strategy string Sync strategy (one of: apply|hook) --timeout uint Time out after this many seconds","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_sync/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_sync/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_terminate-op/","text":"argocd app terminate-op Terminate running operation of an application argocd app terminate-op APPNAME [flags] Options -h, --help help for terminate-op Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd app - Manage applications","title":"Argocd app terminate op"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_terminate-op/#argocd-app-terminate-op","text":"Terminate running operation of an application argocd app terminate-op APPNAME [flags]","title":"argocd app terminate-op"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_terminate-op/#options","text":"-h, --help help for terminate-op","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_terminate-op/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_terminate-op/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_unset/","text":"argocd app unset Unset application parameters argocd app unset APPNAME parameters [flags] Examples # Unset kustomize override kustomize image argocd app unset my-app --kustomize-image=alpine # Unset kustomize override prefix argocd app unset my-app --namesuffix # Unset parameter override argocd app unset my-app -p COMPONENT=PARAM Options -h, --help help for unset --kustomize-image stringArray Kustomize images name (e.g. --kustomize-image node --kustomize-image mysql) --kustomize-version Kustomize version --nameprefix Kustomize nameprefix --namesuffix Kustomize namesuffix -p, --parameter stringArray Unset a parameter override (e.g. -p guestbook=image) --plugin-env stringArray Unset plugin env variables (e.g --plugin-env name) --values stringArray Unset one or more Helm values files --values-literal Unset literal Helm values block Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd app - Manage applications","title":"Argocd app unset"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_unset/#argocd-app-unset","text":"Unset application parameters argocd app unset APPNAME parameters [flags]","title":"argocd app unset"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_unset/#examples","text":"# Unset kustomize override kustomize image argocd app unset my-app --kustomize-image=alpine # Unset kustomize override prefix argocd app unset my-app --namesuffix # Unset parameter override argocd app unset my-app -p COMPONENT=PARAM","title":"Examples"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_unset/#options","text":"-h, --help help for unset --kustomize-image stringArray Kustomize images name (e.g. --kustomize-image node --kustomize-image mysql) --kustomize-version Kustomize version --nameprefix Kustomize nameprefix --namesuffix Kustomize namesuffix -p, --parameter stringArray Unset a parameter override (e.g. -p guestbook=image) --plugin-env stringArray Unset plugin env variables (e.g --plugin-env name) --values stringArray Unset one or more Helm values files --values-literal Unset literal Helm values block","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_unset/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_unset/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_wait/","text":"argocd app wait Wait for an application to reach a synced and healthy state argocd app wait [APPNAME.. | -l selector] [flags] Examples # Wait for an app argocd app wait my-app # Wait for multiple apps argocd app wait my-app other-app # Wait for apps by label, in this example we waiting for apps that are children of another app (aka app-of-apps) argocd app wait -l app.kubernetes.io/instance=apps Options --health Wait for health -h, --help help for wait --operation Wait for pending operations --resource stringArray Sync only specific resources as GROUP:KIND:NAME. Fields may be blank. This option may be specified repeatedly -l, --selector string Wait for apps by label --suspended Wait for suspended --sync Wait for sync --timeout uint Time out after this many seconds Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd app - Manage applications","title":"Argocd app wait"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_wait/#argocd-app-wait","text":"Wait for an application to reach a synced and healthy state argocd app wait [APPNAME.. | -l selector] [flags]","title":"argocd app wait"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_wait/#examples","text":"# Wait for an app argocd app wait my-app # Wait for multiple apps argocd app wait my-app other-app # Wait for apps by label, in this example we waiting for apps that are children of another app (aka app-of-apps) argocd app wait -l app.kubernetes.io/instance=apps","title":"Examples"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_wait/#options","text":"--health Wait for health -h, --help help for wait --operation Wait for pending operations --resource stringArray Sync only specific resources as GROUP:KIND:NAME. Fields may be blank. This option may be specified repeatedly -l, --selector string Wait for apps by label --suspended Wait for suspended --sync Wait for sync --timeout uint Time out after this many seconds","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_wait/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_app_wait/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cert/","text":"argocd cert Manage repository certificates and SSH known hosts entries argocd cert [flags] Examples # Add a TLS certificate for cd.example.com to ArgoCD cert store from a file argocd cert add-tls --from ~/mycert.pem cd.example.com # Add a TLS certificate for cd.example.com to ArgoCD via stdin cat ~/mycert.pem | argocd cert add-tls cd.example.com # Add SSH known host entries for cd.example.com to ArgoCD by scanning host ssh-keyscan cd.example.com | argocd cert add-ssh --batch # List all known TLS certificates argocd cert list --cert-type https # Remove all TLS certificates for cd.example.com argocd cert rm --cert-type https cd.example.com # Remove all certificates and SSH known host entries for cd.example.com argocd cert rm cd.example.com Options --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for cert --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd - argocd controls a Argo CD server argocd cert add-ssh - Add SSH known host entries for repository servers argocd cert add-tls - Add TLS certificate data for connecting to repository server SERVERNAME argocd cert list - List configured certificates argocd cert rm - Remove certificate of TYPE for REPOSERVER","title":"Argocd cert"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cert/#argocd-cert","text":"Manage repository certificates and SSH known hosts entries argocd cert [flags]","title":"argocd cert"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cert/#examples","text":"# Add a TLS certificate for cd.example.com to ArgoCD cert store from a file argocd cert add-tls --from ~/mycert.pem cd.example.com # Add a TLS certificate for cd.example.com to ArgoCD via stdin cat ~/mycert.pem | argocd cert add-tls cd.example.com # Add SSH known host entries for cd.example.com to ArgoCD by scanning host ssh-keyscan cd.example.com | argocd cert add-ssh --batch # List all known TLS certificates argocd cert list --cert-type https # Remove all TLS certificates for cd.example.com argocd cert rm --cert-type https cd.example.com # Remove all certificates and SSH known host entries for cd.example.com argocd cert rm cd.example.com","title":"Examples"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cert/#options","text":"--as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for cert --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cert/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cert/#see-also","text":"argocd - argocd controls a Argo CD server argocd cert add-ssh - Add SSH known host entries for repository servers argocd cert add-tls - Add TLS certificate data for connecting to repository server SERVERNAME argocd cert list - List configured certificates argocd cert rm - Remove certificate of TYPE for REPOSERVER","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cert_add-ssh/","text":"argocd cert add-ssh Add SSH known host entries for repository servers argocd cert add-ssh --batch [flags] Options --batch Perform batch processing by reading in SSH known hosts data (mandatory flag) --from string Read SSH known hosts data from file (default is to read from stdin) -h, --help help for add-ssh --upsert Replace existing SSH server public host keys if key is different in input Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd cert - Manage repository certificates and SSH known hosts entries","title":"Argocd cert add ssh"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cert_add-ssh/#argocd-cert-add-ssh","text":"Add SSH known host entries for repository servers argocd cert add-ssh --batch [flags]","title":"argocd cert add-ssh"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cert_add-ssh/#options","text":"--batch Perform batch processing by reading in SSH known hosts data (mandatory flag) --from string Read SSH known hosts data from file (default is to read from stdin) -h, --help help for add-ssh --upsert Replace existing SSH server public host keys if key is different in input","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cert_add-ssh/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cert_add-ssh/#see-also","text":"argocd cert - Manage repository certificates and SSH known hosts entries","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cert_add-tls/","text":"argocd cert add-tls Add TLS certificate data for connecting to repository server SERVERNAME argocd cert add-tls SERVERNAME [flags] Options --from string read TLS certificate data from file (default is to read from stdin) -h, --help help for add-tls --upsert Replace existing TLS certificate if certificate is different in input Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd cert - Manage repository certificates and SSH known hosts entries","title":"Argocd cert add tls"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cert_add-tls/#argocd-cert-add-tls","text":"Add TLS certificate data for connecting to repository server SERVERNAME argocd cert add-tls SERVERNAME [flags]","title":"argocd cert add-tls"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cert_add-tls/#options","text":"--from string read TLS certificate data from file (default is to read from stdin) -h, --help help for add-tls --upsert Replace existing TLS certificate if certificate is different in input","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cert_add-tls/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cert_add-tls/#see-also","text":"argocd cert - Manage repository certificates and SSH known hosts entries","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cert_list/","text":"argocd cert list List configured certificates argocd cert list [flags] Options --cert-type string only list certificates of given type, valid: 'ssh','https' -h, --help help for list --hostname-pattern string only list certificates for hosts matching given glob-pattern -o, --output string Output format. One of: json|yaml|wide (default \"wide\") --sort string set display sort order for output format wide. One of: hostname|type Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd cert - Manage repository certificates and SSH known hosts entries","title":"Argocd cert list"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cert_list/#argocd-cert-list","text":"List configured certificates argocd cert list [flags]","title":"argocd cert list"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cert_list/#options","text":"--cert-type string only list certificates of given type, valid: 'ssh','https' -h, --help help for list --hostname-pattern string only list certificates for hosts matching given glob-pattern -o, --output string Output format. One of: json|yaml|wide (default \"wide\") --sort string set display sort order for output format wide. One of: hostname|type","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cert_list/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cert_list/#see-also","text":"argocd cert - Manage repository certificates and SSH known hosts entries","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cert_rm/","text":"argocd cert rm Remove certificate of TYPE for REPOSERVER argocd cert rm REPOSERVER [flags] Options --cert-sub-type string Only remove certs of given sub-type (only for ssh) --cert-type string Only remove certs of given type (ssh, https) -h, --help help for rm Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd cert - Manage repository certificates and SSH known hosts entries","title":"Argocd cert rm"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cert_rm/#argocd-cert-rm","text":"Remove certificate of TYPE for REPOSERVER argocd cert rm REPOSERVER [flags]","title":"argocd cert rm"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cert_rm/#options","text":"--cert-sub-type string Only remove certs of given sub-type (only for ssh) --cert-type string Only remove certs of given type (ssh, https) -h, --help help for rm","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cert_rm/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cert_rm/#see-also","text":"argocd cert - Manage repository certificates and SSH known hosts entries","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cli/","text":"ArgoCD Command Reference ArgoCD command reference can be found here .","title":"ArgoCD Command Reference"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cli/#argocd-command-reference","text":"ArgoCD command reference can be found here .","title":"ArgoCD Command Reference"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster/","text":"argocd cluster Manage cluster credentials argocd cluster [flags] Examples # List all known clusters in JSON format: argocd cluster list -o json # Add a target cluster configuration to ArgoCD. The context must exist in your kubectl config: argocd cluster add example-cluster # Get specific details about a cluster in plain text (wide) format: argocd cluster get example-cluster -o wide # Remove a target cluster context from ArgoCD argocd cluster rm example-cluster Options --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for cluster --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd - argocd controls a Argo CD server argocd cluster add - argocd cluster add CONTEXT argocd cluster get - Get cluster information argocd cluster list - List configured clusters argocd cluster rm - Remove cluster credentials argocd cluster rotate-auth - argocd cluster rotate-auth SERVER","title":"Argocd cluster"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster/#argocd-cluster","text":"Manage cluster credentials argocd cluster [flags]","title":"argocd cluster"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster/#examples","text":"# List all known clusters in JSON format: argocd cluster list -o json # Add a target cluster configuration to ArgoCD. The context must exist in your kubectl config: argocd cluster add example-cluster # Get specific details about a cluster in plain text (wide) format: argocd cluster get example-cluster -o wide # Remove a target cluster context from ArgoCD argocd cluster rm example-cluster","title":"Examples"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster/#options","text":"--as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for cluster --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster/#see-also","text":"argocd - argocd controls a Argo CD server argocd cluster add - argocd cluster add CONTEXT argocd cluster get - Get cluster information argocd cluster list - List configured clusters argocd cluster rm - Remove cluster credentials argocd cluster rotate-auth - argocd cluster rotate-auth SERVER","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster_add/","text":"argocd cluster add argocd cluster add CONTEXT argocd cluster add CONTEXT [flags] Options --annotation stringArray Set metadata annotations (e.g. --annotation key=value) --aws-cluster-name string AWS Cluster name if set then aws cli eks token command will be used to access cluster --aws-role-arn string Optional AWS role arn. If set then AWS IAM Authenticator assumes a role to perform cluster operations instead of the default AWS credential provider chain. --cluster-resources Indicates if cluster level resources should be managed. The setting is used only if list of managed namespaces is not empty. --exec-command string Command to run to provide client credentials to the cluster. You may need to build a custom ArgoCD image to ensure the command is available at runtime. --exec-command-api-version string Preferred input version of the ExecInfo for the --exec-command executable --exec-command-args stringArray Arguments to supply to the --exec-command executable --exec-command-env stringToString Environment vars to set when running the --exec-command executable (default []) --exec-command-install-hint string Text shown to the user when the --exec-command executable doesn't seem to be present -h, --help help for add --in-cluster Indicates Argo CD resides inside this cluster and should connect using the internal k8s hostname (kubernetes.default.svc) --kubeconfig string use a particular kubeconfig file --label stringArray Set metadata labels (e.g. --label key=value) --name string Overwrite the cluster name --namespace stringArray List of namespaces which are allowed to manage --project string project of the cluster --service-account string System namespace service account to use for kubernetes resource management. If not set then default \"argocd-manager\" SA will be created --shard int Cluster shard number; inferred from hostname if not set (default -1) --system-namespace string Use different system namespace (default \"kube-system\") --upsert Override an existing cluster with the same name even if the spec differs -y, --yes Skip explicit confirmation Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd cluster - Manage cluster credentials","title":"Argocd cluster add"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster_add/#argocd-cluster-add","text":"argocd cluster add CONTEXT argocd cluster add CONTEXT [flags]","title":"argocd cluster add"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster_add/#options","text":"--annotation stringArray Set metadata annotations (e.g. --annotation key=value) --aws-cluster-name string AWS Cluster name if set then aws cli eks token command will be used to access cluster --aws-role-arn string Optional AWS role arn. If set then AWS IAM Authenticator assumes a role to perform cluster operations instead of the default AWS credential provider chain. --cluster-resources Indicates if cluster level resources should be managed. The setting is used only if list of managed namespaces is not empty. --exec-command string Command to run to provide client credentials to the cluster. You may need to build a custom ArgoCD image to ensure the command is available at runtime. --exec-command-api-version string Preferred input version of the ExecInfo for the --exec-command executable --exec-command-args stringArray Arguments to supply to the --exec-command executable --exec-command-env stringToString Environment vars to set when running the --exec-command executable (default []) --exec-command-install-hint string Text shown to the user when the --exec-command executable doesn't seem to be present -h, --help help for add --in-cluster Indicates Argo CD resides inside this cluster and should connect using the internal k8s hostname (kubernetes.default.svc) --kubeconfig string use a particular kubeconfig file --label stringArray Set metadata labels (e.g. --label key=value) --name string Overwrite the cluster name --namespace stringArray List of namespaces which are allowed to manage --project string project of the cluster --service-account string System namespace service account to use for kubernetes resource management. If not set then default \"argocd-manager\" SA will be created --shard int Cluster shard number; inferred from hostname if not set (default -1) --system-namespace string Use different system namespace (default \"kube-system\") --upsert Override an existing cluster with the same name even if the spec differs -y, --yes Skip explicit confirmation","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster_add/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster_add/#see-also","text":"argocd cluster - Manage cluster credentials","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster_get/","text":"argocd cluster get Get cluster information argocd cluster get SERVER/NAME [flags] Examples argocd cluster get https://12.34.567.89 argocd cluster get in-cluster Options -h, --help help for get -o, --output string Output format. One of: json|yaml|wide|server (default \"yaml\") Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd cluster - Manage cluster credentials","title":"Argocd cluster get"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster_get/#argocd-cluster-get","text":"Get cluster information argocd cluster get SERVER/NAME [flags]","title":"argocd cluster get"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster_get/#examples","text":"argocd cluster get https://12.34.567.89 argocd cluster get in-cluster","title":"Examples"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster_get/#options","text":"-h, --help help for get -o, --output string Output format. One of: json|yaml|wide|server (default \"yaml\")","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster_get/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster_get/#see-also","text":"argocd cluster - Manage cluster credentials","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster_list/","text":"argocd cluster list List configured clusters argocd cluster list [flags] Options -h, --help help for list -o, --output string Output format. One of: json|yaml|wide|server (default \"wide\") Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd cluster - Manage cluster credentials","title":"Argocd cluster list"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster_list/#argocd-cluster-list","text":"List configured clusters argocd cluster list [flags]","title":"argocd cluster list"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster_list/#options","text":"-h, --help help for list -o, --output string Output format. One of: json|yaml|wide|server (default \"wide\")","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster_list/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster_list/#see-also","text":"argocd cluster - Manage cluster credentials","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster_rm/","text":"argocd cluster rm Remove cluster credentials argocd cluster rm SERVER [flags] Examples argocd cluster rm https://12.34.567.89 Options -h, --help help for rm Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd cluster - Manage cluster credentials","title":"Argocd cluster rm"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster_rm/#argocd-cluster-rm","text":"Remove cluster credentials argocd cluster rm SERVER [flags]","title":"argocd cluster rm"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster_rm/#examples","text":"argocd cluster rm https://12.34.567.89","title":"Examples"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster_rm/#options","text":"-h, --help help for rm","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster_rm/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster_rm/#see-also","text":"argocd cluster - Manage cluster credentials","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster_rotate-auth/","text":"argocd cluster rotate-auth argocd cluster rotate-auth SERVER argocd cluster rotate-auth SERVER [flags] Examples argocd cluster rotate-auth https://12.34.567.89 Options -h, --help help for rotate-auth Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd cluster - Manage cluster credentials","title":"Argocd cluster rotate auth"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster_rotate-auth/#argocd-cluster-rotate-auth","text":"argocd cluster rotate-auth SERVER argocd cluster rotate-auth SERVER [flags]","title":"argocd cluster rotate-auth"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster_rotate-auth/#examples","text":"argocd cluster rotate-auth https://12.34.567.89","title":"Examples"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster_rotate-auth/#options","text":"-h, --help help for rotate-auth","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster_rotate-auth/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_cluster_rotate-auth/#see-also","text":"argocd cluster - Manage cluster credentials","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_completion/","text":"argocd completion output shell completion code for the specified shell (bash or zsh) Synopsis Write bash or zsh shell completion code to standard output. For bash, ensure you have bash completions installed and enabled. To access completions in your current shell, run $ source <(argocd completion bash) Alternatively, write it to a file and source in .bash_profile For zsh, output to a file in a directory referenced by the $fpath shell variable. argocd completion SHELL [flags] Options -h, --help help for completion Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd - argocd controls a Argo CD server","title":"Argocd completion"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_completion/#argocd-completion","text":"output shell completion code for the specified shell (bash or zsh)","title":"argocd completion"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_completion/#synopsis","text":"Write bash or zsh shell completion code to standard output. For bash, ensure you have bash completions installed and enabled. To access completions in your current shell, run $ source <(argocd completion bash) Alternatively, write it to a file and source in .bash_profile For zsh, output to a file in a directory referenced by the $fpath shell variable. argocd completion SHELL [flags]","title":"Synopsis"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_completion/#options","text":"-h, --help help for completion","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_completion/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_completion/#see-also","text":"argocd - argocd controls a Argo CD server","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_context/","text":"argocd context Switch between contexts argocd context [CONTEXT] [flags] Options --delete Delete the context instead of switching to it -h, --help help for context Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd - argocd controls a Argo CD server","title":"Argocd context"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_context/#argocd-context","text":"Switch between contexts argocd context [CONTEXT] [flags]","title":"argocd context"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_context/#options","text":"--delete Delete the context instead of switching to it -h, --help help for context","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_context/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_context/#see-also","text":"argocd - argocd controls a Argo CD server","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_gpg/","text":"argocd gpg Manage GPG keys used for signature verification argocd gpg [flags] Options --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for gpg --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd - argocd controls a Argo CD server argocd gpg add - Adds a GPG public key to the server's keyring argocd gpg get - Get the GPG public key with ID from the server argocd gpg list - List configured GPG public keys argocd gpg rm - Removes a GPG public key from the server's keyring","title":"Argocd gpg"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_gpg/#argocd-gpg","text":"Manage GPG keys used for signature verification argocd gpg [flags]","title":"argocd gpg"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_gpg/#options","text":"--as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for gpg --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_gpg/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_gpg/#see-also","text":"argocd - argocd controls a Argo CD server argocd gpg add - Adds a GPG public key to the server's keyring argocd gpg get - Get the GPG public key with ID from the server argocd gpg list - List configured GPG public keys argocd gpg rm - Removes a GPG public key from the server's keyring","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_gpg_add/","text":"argocd gpg add Adds a GPG public key to the server's keyring argocd gpg add [flags] Options -f, --from string Path to the file that contains the GPG public key to import -h, --help help for add Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd gpg - Manage GPG keys used for signature verification","title":"Argocd gpg add"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_gpg_add/#argocd-gpg-add","text":"Adds a GPG public key to the server's keyring argocd gpg add [flags]","title":"argocd gpg add"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_gpg_add/#options","text":"-f, --from string Path to the file that contains the GPG public key to import -h, --help help for add","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_gpg_add/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_gpg_add/#see-also","text":"argocd gpg - Manage GPG keys used for signature verification","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_gpg_get/","text":"argocd gpg get Get the GPG public key with ID from the server argocd gpg get KEYID [flags] Options -h, --help help for get -o, --output string Output format. One of: json|yaml|wide (default \"wide\") Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd gpg - Manage GPG keys used for signature verification","title":"Argocd gpg get"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_gpg_get/#argocd-gpg-get","text":"Get the GPG public key with ID from the server argocd gpg get KEYID [flags]","title":"argocd gpg get"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_gpg_get/#options","text":"-h, --help help for get -o, --output string Output format. One of: json|yaml|wide (default \"wide\")","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_gpg_get/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_gpg_get/#see-also","text":"argocd gpg - Manage GPG keys used for signature verification","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_gpg_list/","text":"argocd gpg list List configured GPG public keys argocd gpg list [flags] Options -h, --help help for list -o, --output string Output format. One of: json|yaml|wide (default \"wide\") Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd gpg - Manage GPG keys used for signature verification","title":"Argocd gpg list"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_gpg_list/#argocd-gpg-list","text":"List configured GPG public keys argocd gpg list [flags]","title":"argocd gpg list"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_gpg_list/#options","text":"-h, --help help for list -o, --output string Output format. One of: json|yaml|wide (default \"wide\")","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_gpg_list/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_gpg_list/#see-also","text":"argocd gpg - Manage GPG keys used for signature verification","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_gpg_rm/","text":"argocd gpg rm Removes a GPG public key from the server's keyring argocd gpg rm KEYID [flags] Options -h, --help help for rm Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd gpg - Manage GPG keys used for signature verification","title":"Argocd gpg rm"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_gpg_rm/#argocd-gpg-rm","text":"Removes a GPG public key from the server's keyring argocd gpg rm KEYID [flags]","title":"argocd gpg rm"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_gpg_rm/#options","text":"-h, --help help for rm","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_gpg_rm/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_gpg_rm/#see-also","text":"argocd gpg - Manage GPG keys used for signature verification","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_login/","text":"argocd login Log in to Argo CD Synopsis Log in to Argo CD argocd login SERVER [flags] Examples # Login to Argo CD using a username and password argocd login cd.argoproj.io # Login to Argo CD using SSO argocd login cd.argoproj.io --sso # Configure direct access using Kubernetes API server argocd login cd.argoproj.io --core Options -h, --help help for login --name string name to use for the context --password string the password of an account to authenticate --sso perform SSO login --sso-port int port to run local OAuth2 login application (default 8085) --username string the username of an account to authenticate Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd - argocd controls a Argo CD server","title":"Argocd login"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_login/#argocd-login","text":"Log in to Argo CD","title":"argocd login"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_login/#synopsis","text":"Log in to Argo CD argocd login SERVER [flags]","title":"Synopsis"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_login/#examples","text":"# Login to Argo CD using a username and password argocd login cd.argoproj.io # Login to Argo CD using SSO argocd login cd.argoproj.io --sso # Configure direct access using Kubernetes API server argocd login cd.argoproj.io --core","title":"Examples"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_login/#options","text":"-h, --help help for login --name string name to use for the context --password string the password of an account to authenticate --sso perform SSO login --sso-port int port to run local OAuth2 login application (default 8085) --username string the username of an account to authenticate","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_login/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_login/#see-also","text":"argocd - argocd controls a Argo CD server","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_logout/","text":"argocd logout Log out from Argo CD Synopsis Log out from Argo CD argocd logout CONTEXT [flags] Options -h, --help help for logout Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd - argocd controls a Argo CD server","title":"Argocd logout"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_logout/#argocd-logout","text":"Log out from Argo CD","title":"argocd logout"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_logout/#synopsis","text":"Log out from Argo CD argocd logout CONTEXT [flags]","title":"Synopsis"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_logout/#options","text":"-h, --help help for logout","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_logout/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_logout/#see-also","text":"argocd - argocd controls a Argo CD server","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj/","text":"argocd proj Manage projects argocd proj [flags] Options --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for proj --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd - argocd controls a Argo CD server argocd proj add-destination - Add project destination argocd proj add-orphaned-ignore - Add a resource to orphaned ignore list argocd proj add-signature-key - Add GnuPG signature key to project argocd proj add-source - Add project source repository argocd proj allow-cluster-resource - Adds a cluster-scoped API resource to the allow list and removes it from deny list argocd proj allow-namespace-resource - Removes a namespaced API resource from the deny list or add a namespaced API resource to the allow list argocd proj create - Create a project argocd proj delete - Delete project argocd proj deny-cluster-resource - Removes a cluster-scoped API resource from the allow list and adds it to deny list argocd proj deny-namespace-resource - Adds a namespaced API resource to the deny list or removes a namespaced API resource from the allow list argocd proj edit - Edit project argocd proj get - Get project details argocd proj list - List projects argocd proj remove-destination - Remove project destination argocd proj remove-orphaned-ignore - Remove a resource from orphaned ignore list argocd proj remove-signature-key - Remove GnuPG signature key from project argocd proj remove-source - Remove project source repository argocd proj role - Manage a project's roles argocd proj set - Set project parameters argocd proj windows - Manage a project's sync windows","title":"Argocd proj"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj/#argocd-proj","text":"Manage projects argocd proj [flags]","title":"argocd proj"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj/#options","text":"--as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for proj --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj/#see-also","text":"argocd - argocd controls a Argo CD server argocd proj add-destination - Add project destination argocd proj add-orphaned-ignore - Add a resource to orphaned ignore list argocd proj add-signature-key - Add GnuPG signature key to project argocd proj add-source - Add project source repository argocd proj allow-cluster-resource - Adds a cluster-scoped API resource to the allow list and removes it from deny list argocd proj allow-namespace-resource - Removes a namespaced API resource from the deny list or add a namespaced API resource to the allow list argocd proj create - Create a project argocd proj delete - Delete project argocd proj deny-cluster-resource - Removes a cluster-scoped API resource from the allow list and adds it to deny list argocd proj deny-namespace-resource - Adds a namespaced API resource to the deny list or removes a namespaced API resource from the allow list argocd proj edit - Edit project argocd proj get - Get project details argocd proj list - List projects argocd proj remove-destination - Remove project destination argocd proj remove-orphaned-ignore - Remove a resource from orphaned ignore list argocd proj remove-signature-key - Remove GnuPG signature key from project argocd proj remove-source - Remove project source repository argocd proj role - Manage a project's roles argocd proj set - Set project parameters argocd proj windows - Manage a project's sync windows","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_add-destination/","text":"argocd proj add-destination Add project destination argocd proj add-destination PROJECT SERVER/NAME NAMESPACE [flags] Options -h, --help help for add-destination --name Use name as destination instead server Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj - Manage projects","title":"Argocd proj add destination"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_add-destination/#argocd-proj-add-destination","text":"Add project destination argocd proj add-destination PROJECT SERVER/NAME NAMESPACE [flags]","title":"argocd proj add-destination"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_add-destination/#options","text":"-h, --help help for add-destination --name Use name as destination instead server","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_add-destination/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_add-destination/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_add-orphaned-ignore/","text":"argocd proj add-orphaned-ignore Add a resource to orphaned ignore list argocd proj add-orphaned-ignore PROJECT GROUP KIND [flags] Options -h, --help help for add-orphaned-ignore --name string Resource name pattern Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj - Manage projects","title":"Argocd proj add orphaned ignore"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_add-orphaned-ignore/#argocd-proj-add-orphaned-ignore","text":"Add a resource to orphaned ignore list argocd proj add-orphaned-ignore PROJECT GROUP KIND [flags]","title":"argocd proj add-orphaned-ignore"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_add-orphaned-ignore/#options","text":"-h, --help help for add-orphaned-ignore --name string Resource name pattern","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_add-orphaned-ignore/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_add-orphaned-ignore/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_add-signature-key/","text":"argocd proj add-signature-key Add GnuPG signature key to project argocd proj add-signature-key PROJECT KEY-ID [flags] Options -h, --help help for add-signature-key Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj - Manage projects","title":"Argocd proj add signature key"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_add-signature-key/#argocd-proj-add-signature-key","text":"Add GnuPG signature key to project argocd proj add-signature-key PROJECT KEY-ID [flags]","title":"argocd proj add-signature-key"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_add-signature-key/#options","text":"-h, --help help for add-signature-key","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_add-signature-key/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_add-signature-key/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_add-source/","text":"argocd proj add-source Add project source repository argocd proj add-source PROJECT URL [flags] Options -h, --help help for add-source Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj - Manage projects","title":"Argocd proj add source"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_add-source/#argocd-proj-add-source","text":"Add project source repository argocd proj add-source PROJECT URL [flags]","title":"argocd proj add-source"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_add-source/#options","text":"-h, --help help for add-source","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_add-source/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_add-source/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_allow-cluster-resource/","text":"argocd proj allow-cluster-resource Adds a cluster-scoped API resource to the allow list and removes it from deny list argocd proj allow-cluster-resource PROJECT GROUP KIND [flags] Options -h, --help help for allow-cluster-resource -l, --list string Use deny list or allow list. This can only be 'allow' or 'deny' (default \"allow\") Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj - Manage projects","title":"Argocd proj allow cluster resource"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_allow-cluster-resource/#argocd-proj-allow-cluster-resource","text":"Adds a cluster-scoped API resource to the allow list and removes it from deny list argocd proj allow-cluster-resource PROJECT GROUP KIND [flags]","title":"argocd proj allow-cluster-resource"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_allow-cluster-resource/#options","text":"-h, --help help for allow-cluster-resource -l, --list string Use deny list or allow list. This can only be 'allow' or 'deny' (default \"allow\")","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_allow-cluster-resource/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_allow-cluster-resource/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_allow-namespace-resource/","text":"argocd proj allow-namespace-resource Removes a namespaced API resource from the deny list or add a namespaced API resource to the allow list argocd proj allow-namespace-resource PROJECT GROUP KIND [flags] Options -h, --help help for allow-namespace-resource -l, --list string Use deny list or allow list. This can only be 'allow' or 'deny' (default \"deny\") Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj - Manage projects","title":"Argocd proj allow namespace resource"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_allow-namespace-resource/#argocd-proj-allow-namespace-resource","text":"Removes a namespaced API resource from the deny list or add a namespaced API resource to the allow list argocd proj allow-namespace-resource PROJECT GROUP KIND [flags]","title":"argocd proj allow-namespace-resource"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_allow-namespace-resource/#options","text":"-h, --help help for allow-namespace-resource -l, --list string Use deny list or allow list. This can only be 'allow' or 'deny' (default \"deny\")","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_allow-namespace-resource/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_allow-namespace-resource/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_create/","text":"argocd proj create Create a project argocd proj create PROJECT [flags] Options --allow-cluster-resource stringArray List of allowed cluster level resources --allow-namespaced-resource stringArray List of allowed namespaced resources --deny-cluster-resource stringArray List of denied cluster level resources --deny-namespaced-resource stringArray List of denied namespaced resources --description string Project description -d, --dest stringArray Permitted destination server and namespace (e.g. https://192.168.99.100:8443,default) -f, --file string Filename or URL to Kubernetes manifests for the project -h, --help help for create --orphaned-resources Enables orphaned resources monitoring --orphaned-resources-warn Specifies if applications should have a warning condition when orphaned resources detected --signature-keys strings GnuPG public key IDs for commit signature verification -s, --src stringArray Permitted source repository URL --upsert Allows to override a project with the same name even if supplied project spec is different from existing spec Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj - Manage projects","title":"Argocd proj create"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_create/#argocd-proj-create","text":"Create a project argocd proj create PROJECT [flags]","title":"argocd proj create"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_create/#options","text":"--allow-cluster-resource stringArray List of allowed cluster level resources --allow-namespaced-resource stringArray List of allowed namespaced resources --deny-cluster-resource stringArray List of denied cluster level resources --deny-namespaced-resource stringArray List of denied namespaced resources --description string Project description -d, --dest stringArray Permitted destination server and namespace (e.g. https://192.168.99.100:8443,default) -f, --file string Filename or URL to Kubernetes manifests for the project -h, --help help for create --orphaned-resources Enables orphaned resources monitoring --orphaned-resources-warn Specifies if applications should have a warning condition when orphaned resources detected --signature-keys strings GnuPG public key IDs for commit signature verification -s, --src stringArray Permitted source repository URL --upsert Allows to override a project with the same name even if supplied project spec is different from existing spec","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_create/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_create/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_delete/","text":"argocd proj delete Delete project argocd proj delete PROJECT [flags] Options -h, --help help for delete Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj - Manage projects","title":"Argocd proj delete"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_delete/#argocd-proj-delete","text":"Delete project argocd proj delete PROJECT [flags]","title":"argocd proj delete"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_delete/#options","text":"-h, --help help for delete","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_delete/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_delete/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_deny-cluster-resource/","text":"argocd proj deny-cluster-resource Removes a cluster-scoped API resource from the allow list and adds it to deny list argocd proj deny-cluster-resource PROJECT GROUP KIND [flags] Options -h, --help help for deny-cluster-resource -l, --list string Use deny list or allow list. This can only be 'allow' or 'deny' (default \"allow\") Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj - Manage projects","title":"Argocd proj deny cluster resource"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_deny-cluster-resource/#argocd-proj-deny-cluster-resource","text":"Removes a cluster-scoped API resource from the allow list and adds it to deny list argocd proj deny-cluster-resource PROJECT GROUP KIND [flags]","title":"argocd proj deny-cluster-resource"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_deny-cluster-resource/#options","text":"-h, --help help for deny-cluster-resource -l, --list string Use deny list or allow list. This can only be 'allow' or 'deny' (default \"allow\")","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_deny-cluster-resource/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_deny-cluster-resource/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_deny-namespace-resource/","text":"argocd proj deny-namespace-resource Adds a namespaced API resource to the deny list or removes a namespaced API resource from the allow list argocd proj deny-namespace-resource PROJECT GROUP KIND [flags] Options -h, --help help for deny-namespace-resource -l, --list string Use deny list or allow list. This can only be 'allow' or 'deny' (default \"deny\") Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj - Manage projects","title":"Argocd proj deny namespace resource"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_deny-namespace-resource/#argocd-proj-deny-namespace-resource","text":"Adds a namespaced API resource to the deny list or removes a namespaced API resource from the allow list argocd proj deny-namespace-resource PROJECT GROUP KIND [flags]","title":"argocd proj deny-namespace-resource"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_deny-namespace-resource/#options","text":"-h, --help help for deny-namespace-resource -l, --list string Use deny list or allow list. This can only be 'allow' or 'deny' (default \"deny\")","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_deny-namespace-resource/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_deny-namespace-resource/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_edit/","text":"argocd proj edit Edit project argocd proj edit PROJECT [flags] Options -h, --help help for edit Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj - Manage projects","title":"Argocd proj edit"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_edit/#argocd-proj-edit","text":"Edit project argocd proj edit PROJECT [flags]","title":"argocd proj edit"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_edit/#options","text":"-h, --help help for edit","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_edit/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_edit/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_get/","text":"argocd proj get Get project details argocd proj get PROJECT [flags] Options -h, --help help for get -o, --output string Output format. One of: json|yaml|wide (default \"wide\") Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj - Manage projects","title":"Argocd proj get"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_get/#argocd-proj-get","text":"Get project details argocd proj get PROJECT [flags]","title":"argocd proj get"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_get/#options","text":"-h, --help help for get -o, --output string Output format. One of: json|yaml|wide (default \"wide\")","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_get/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_get/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_list/","text":"argocd proj list List projects argocd proj list [flags] Options -h, --help help for list -o, --output string Output format. One of: json|yaml|wide|name (default \"wide\") Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj - Manage projects","title":"Argocd proj list"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_list/#argocd-proj-list","text":"List projects argocd proj list [flags]","title":"argocd proj list"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_list/#options","text":"-h, --help help for list -o, --output string Output format. One of: json|yaml|wide|name (default \"wide\")","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_list/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_list/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_remove-destination/","text":"argocd proj remove-destination Remove project destination argocd proj remove-destination PROJECT SERVER NAMESPACE [flags] Options -h, --help help for remove-destination Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj - Manage projects","title":"Argocd proj remove destination"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_remove-destination/#argocd-proj-remove-destination","text":"Remove project destination argocd proj remove-destination PROJECT SERVER NAMESPACE [flags]","title":"argocd proj remove-destination"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_remove-destination/#options","text":"-h, --help help for remove-destination","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_remove-destination/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_remove-destination/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_remove-orphaned-ignore/","text":"argocd proj remove-orphaned-ignore Remove a resource from orphaned ignore list argocd proj remove-orphaned-ignore PROJECT GROUP KIND NAME [flags] Options -h, --help help for remove-orphaned-ignore --name string Resource name pattern Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj - Manage projects","title":"Argocd proj remove orphaned ignore"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_remove-orphaned-ignore/#argocd-proj-remove-orphaned-ignore","text":"Remove a resource from orphaned ignore list argocd proj remove-orphaned-ignore PROJECT GROUP KIND NAME [flags]","title":"argocd proj remove-orphaned-ignore"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_remove-orphaned-ignore/#options","text":"-h, --help help for remove-orphaned-ignore --name string Resource name pattern","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_remove-orphaned-ignore/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_remove-orphaned-ignore/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_remove-signature-key/","text":"argocd proj remove-signature-key Remove GnuPG signature key from project argocd proj remove-signature-key PROJECT KEY-ID [flags] Options -h, --help help for remove-signature-key Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj - Manage projects","title":"Argocd proj remove signature key"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_remove-signature-key/#argocd-proj-remove-signature-key","text":"Remove GnuPG signature key from project argocd proj remove-signature-key PROJECT KEY-ID [flags]","title":"argocd proj remove-signature-key"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_remove-signature-key/#options","text":"-h, --help help for remove-signature-key","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_remove-signature-key/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_remove-signature-key/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_remove-source/","text":"argocd proj remove-source Remove project source repository argocd proj remove-source PROJECT URL [flags] Options -h, --help help for remove-source Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj - Manage projects","title":"Argocd proj remove source"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_remove-source/#argocd-proj-remove-source","text":"Remove project source repository argocd proj remove-source PROJECT URL [flags]","title":"argocd proj remove-source"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_remove-source/#options","text":"-h, --help help for remove-source","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_remove-source/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_remove-source/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role/","text":"argocd proj role Manage a project's roles argocd proj role [flags] Options -h, --help help for role Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj - Manage projects argocd proj role add-group - Add a group claim to a project role argocd proj role add-policy - Add a policy to a project role argocd proj role create - Create a project role argocd proj role create-token - Create a project token argocd proj role delete - Delete a project role argocd proj role delete-token - Delete a project token argocd proj role get - Get the details of a specific role argocd proj role list - List all the roles in a project argocd proj role list-tokens - List tokens for a given role. argocd proj role remove-group - Remove a group claim from a role within a project argocd proj role remove-policy - Remove a policy from a role within a project","title":"Argocd proj role"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role/#argocd-proj-role","text":"Manage a project's roles argocd proj role [flags]","title":"argocd proj role"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role/#options","text":"-h, --help help for role","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role/#see-also","text":"argocd proj - Manage projects argocd proj role add-group - Add a group claim to a project role argocd proj role add-policy - Add a policy to a project role argocd proj role create - Create a project role argocd proj role create-token - Create a project token argocd proj role delete - Delete a project role argocd proj role delete-token - Delete a project token argocd proj role get - Get the details of a specific role argocd proj role list - List all the roles in a project argocd proj role list-tokens - List tokens for a given role. argocd proj role remove-group - Remove a group claim from a role within a project argocd proj role remove-policy - Remove a policy from a role within a project","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_add-group/","text":"argocd proj role add-group Add a group claim to a project role argocd proj role add-group PROJECT ROLE-NAME GROUP-CLAIM [flags] Options -h, --help help for add-group Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj role - Manage a project's roles","title":"Argocd proj role add group"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_add-group/#argocd-proj-role-add-group","text":"Add a group claim to a project role argocd proj role add-group PROJECT ROLE-NAME GROUP-CLAIM [flags]","title":"argocd proj role add-group"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_add-group/#options","text":"-h, --help help for add-group","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_add-group/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_add-group/#see-also","text":"argocd proj role - Manage a project's roles","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_add-policy/","text":"argocd proj role add-policy Add a policy to a project role argocd proj role add-policy PROJECT ROLE-NAME [flags] Options -a, --action string Action to grant/deny permission on (e.g. get, create, list, update, delete) -h, --help help for add-policy -o, --object string Object within the project to grant/deny access. Use '*' for a wildcard. Will want access to '<project>/<object>' -p, --permission string Whether to allow or deny access to object with the action. This can only be 'allow' or 'deny' (default \"allow\") Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj role - Manage a project's roles","title":"Argocd proj role add policy"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_add-policy/#argocd-proj-role-add-policy","text":"Add a policy to a project role argocd proj role add-policy PROJECT ROLE-NAME [flags]","title":"argocd proj role add-policy"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_add-policy/#options","text":"-a, --action string Action to grant/deny permission on (e.g. get, create, list, update, delete) -h, --help help for add-policy -o, --object string Object within the project to grant/deny access. Use '*' for a wildcard. Will want access to '<project>/<object>' -p, --permission string Whether to allow or deny access to object with the action. This can only be 'allow' or 'deny' (default \"allow\")","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_add-policy/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_add-policy/#see-also","text":"argocd proj role - Manage a project's roles","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_create-token/","text":"argocd proj role create-token Create a project token argocd proj role create-token PROJECT ROLE-NAME [flags] Options -e, --expires-in string Duration before the token will expire, e.g. \"12h\", \"7d\". (Default: No expiration) -h, --help help for create-token -i, --id string Token unique identifier. (Default: Random UUID) -t, --token-only Output token only - for use in scripts. Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj role - Manage a project's roles","title":"Argocd proj role create token"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_create-token/#argocd-proj-role-create-token","text":"Create a project token argocd proj role create-token PROJECT ROLE-NAME [flags]","title":"argocd proj role create-token"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_create-token/#options","text":"-e, --expires-in string Duration before the token will expire, e.g. \"12h\", \"7d\". (Default: No expiration) -h, --help help for create-token -i, --id string Token unique identifier. (Default: Random UUID) -t, --token-only Output token only - for use in scripts.","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_create-token/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_create-token/#see-also","text":"argocd proj role - Manage a project's roles","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_create/","text":"argocd proj role create Create a project role argocd proj role create PROJECT ROLE-NAME [flags] Options --description string Project description -h, --help help for create Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj role - Manage a project's roles","title":"Argocd proj role create"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_create/#argocd-proj-role-create","text":"Create a project role argocd proj role create PROJECT ROLE-NAME [flags]","title":"argocd proj role create"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_create/#options","text":"--description string Project description -h, --help help for create","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_create/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_create/#see-also","text":"argocd proj role - Manage a project's roles","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_delete-token/","text":"argocd proj role delete-token Delete a project token argocd proj role delete-token PROJECT ROLE-NAME ISSUED-AT [flags] Options -h, --help help for delete-token Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj role - Manage a project's roles","title":"Argocd proj role delete token"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_delete-token/#argocd-proj-role-delete-token","text":"Delete a project token argocd proj role delete-token PROJECT ROLE-NAME ISSUED-AT [flags]","title":"argocd proj role delete-token"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_delete-token/#options","text":"-h, --help help for delete-token","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_delete-token/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_delete-token/#see-also","text":"argocd proj role - Manage a project's roles","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_delete/","text":"argocd proj role delete Delete a project role argocd proj role delete PROJECT ROLE-NAME [flags] Options -h, --help help for delete Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj role - Manage a project's roles","title":"Argocd proj role delete"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_delete/#argocd-proj-role-delete","text":"Delete a project role argocd proj role delete PROJECT ROLE-NAME [flags]","title":"argocd proj role delete"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_delete/#options","text":"-h, --help help for delete","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_delete/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_delete/#see-also","text":"argocd proj role - Manage a project's roles","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_get/","text":"argocd proj role get Get the details of a specific role argocd proj role get PROJECT ROLE-NAME [flags] Options -h, --help help for get Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj role - Manage a project's roles","title":"Argocd proj role get"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_get/#argocd-proj-role-get","text":"Get the details of a specific role argocd proj role get PROJECT ROLE-NAME [flags]","title":"argocd proj role get"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_get/#options","text":"-h, --help help for get","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_get/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_get/#see-also","text":"argocd proj role - Manage a project's roles","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_list-tokens/","text":"argocd proj role list-tokens List tokens for a given role. argocd proj role list-tokens PROJECT ROLE-NAME [flags] Options -h, --help help for list-tokens -u, --unixtime Print timestamps as Unix time instead of converting. Useful for piping into delete-token. Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj role - Manage a project's roles","title":"Argocd proj role list tokens"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_list-tokens/#argocd-proj-role-list-tokens","text":"List tokens for a given role. argocd proj role list-tokens PROJECT ROLE-NAME [flags]","title":"argocd proj role list-tokens"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_list-tokens/#options","text":"-h, --help help for list-tokens -u, --unixtime Print timestamps as Unix time instead of converting. Useful for piping into delete-token.","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_list-tokens/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_list-tokens/#see-also","text":"argocd proj role - Manage a project's roles","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_list/","text":"argocd proj role list List all the roles in a project argocd proj role list PROJECT [flags] Options -h, --help help for list -o, --output string Output format. One of: json|yaml|wide|name (default \"wide\") Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj role - Manage a project's roles","title":"Argocd proj role list"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_list/#argocd-proj-role-list","text":"List all the roles in a project argocd proj role list PROJECT [flags]","title":"argocd proj role list"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_list/#options","text":"-h, --help help for list -o, --output string Output format. One of: json|yaml|wide|name (default \"wide\")","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_list/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_list/#see-also","text":"argocd proj role - Manage a project's roles","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_remove-group/","text":"argocd proj role remove-group Remove a group claim from a role within a project argocd proj role remove-group PROJECT ROLE-NAME GROUP-CLAIM [flags] Options -h, --help help for remove-group Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj role - Manage a project's roles","title":"Argocd proj role remove group"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_remove-group/#argocd-proj-role-remove-group","text":"Remove a group claim from a role within a project argocd proj role remove-group PROJECT ROLE-NAME GROUP-CLAIM [flags]","title":"argocd proj role remove-group"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_remove-group/#options","text":"-h, --help help for remove-group","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_remove-group/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_remove-group/#see-also","text":"argocd proj role - Manage a project's roles","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_remove-policy/","text":"argocd proj role remove-policy Remove a policy from a role within a project argocd proj role remove-policy PROJECT ROLE-NAME [flags] Options -a, --action string Action to grant/deny permission on (e.g. get, create, list, update, delete) -h, --help help for remove-policy -o, --object string Object within the project to grant/deny access. Use '*' for a wildcard. Will want access to '<project>/<object>' -p, --permission string Whether to allow or deny access to object with the action. This can only be 'allow' or 'deny' (default \"allow\") Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj role - Manage a project's roles","title":"Argocd proj role remove policy"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_remove-policy/#argocd-proj-role-remove-policy","text":"Remove a policy from a role within a project argocd proj role remove-policy PROJECT ROLE-NAME [flags]","title":"argocd proj role remove-policy"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_remove-policy/#options","text":"-a, --action string Action to grant/deny permission on (e.g. get, create, list, update, delete) -h, --help help for remove-policy -o, --object string Object within the project to grant/deny access. Use '*' for a wildcard. Will want access to '<project>/<object>' -p, --permission string Whether to allow or deny access to object with the action. This can only be 'allow' or 'deny' (default \"allow\")","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_remove-policy/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_role_remove-policy/#see-also","text":"argocd proj role - Manage a project's roles","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_set/","text":"argocd proj set Set project parameters argocd proj set PROJECT [flags] Options --allow-cluster-resource stringArray List of allowed cluster level resources --allow-namespaced-resource stringArray List of allowed namespaced resources --deny-cluster-resource stringArray List of denied cluster level resources --deny-namespaced-resource stringArray List of denied namespaced resources --description string Project description -d, --dest stringArray Permitted destination server and namespace (e.g. https://192.168.99.100:8443,default) -h, --help help for set --orphaned-resources Enables orphaned resources monitoring --orphaned-resources-warn Specifies if applications should have a warning condition when orphaned resources detected --signature-keys strings GnuPG public key IDs for commit signature verification -s, --src stringArray Permitted source repository URL Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj - Manage projects","title":"Argocd proj set"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_set/#argocd-proj-set","text":"Set project parameters argocd proj set PROJECT [flags]","title":"argocd proj set"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_set/#options","text":"--allow-cluster-resource stringArray List of allowed cluster level resources --allow-namespaced-resource stringArray List of allowed namespaced resources --deny-cluster-resource stringArray List of denied cluster level resources --deny-namespaced-resource stringArray List of denied namespaced resources --description string Project description -d, --dest stringArray Permitted destination server and namespace (e.g. https://192.168.99.100:8443,default) -h, --help help for set --orphaned-resources Enables orphaned resources monitoring --orphaned-resources-warn Specifies if applications should have a warning condition when orphaned resources detected --signature-keys strings GnuPG public key IDs for commit signature verification -s, --src stringArray Permitted source repository URL","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_set/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_set/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows/","text":"argocd proj windows Manage a project's sync windows argocd proj windows [flags] Options -h, --help help for windows Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj - Manage projects argocd proj windows add - Add a sync window to a project argocd proj windows delete - Delete a sync window from a project. Requires ID which can be found by running \"argocd proj windows list PROJECT\" argocd proj windows disable-manual-sync - Disable manual sync for a sync window argocd proj windows enable-manual-sync - Enable manual sync for a sync window argocd proj windows list - List project sync windows argocd proj windows update - Update a project sync window","title":"Argocd proj windows"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows/#argocd-proj-windows","text":"Manage a project's sync windows argocd proj windows [flags]","title":"argocd proj windows"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows/#options","text":"-h, --help help for windows","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows/#see-also","text":"argocd proj - Manage projects argocd proj windows add - Add a sync window to a project argocd proj windows delete - Delete a sync window from a project. Requires ID which can be found by running \"argocd proj windows list PROJECT\" argocd proj windows disable-manual-sync - Disable manual sync for a sync window argocd proj windows enable-manual-sync - Enable manual sync for a sync window argocd proj windows list - List project sync windows argocd proj windows update - Update a project sync window","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows_add/","text":"argocd proj windows add Add a sync window to a project argocd proj windows add PROJECT [flags] Options --applications strings Applications that the schedule will be applied to. Comma separated, wildcards supported (e.g. --applications prod-\\*,website) --clusters strings Clusters that the schedule will be applied to. Comma separated, wildcards supported (e.g. --clusters prod,staging) --duration string Sync window duration. (e.g. --duration 1h) -h, --help help for add -k, --kind string Sync window kind, either allow or deny --manual-sync Allow manual syncs for both deny and allow windows --namespaces strings Namespaces that the schedule will be applied to. Comma separated, wildcards supported (e.g. --namespaces default,\\*-prod) --schedule string Sync window schedule in cron format. (e.g. --schedule \"0 22 * * *\") --time-zone string Time zone of the sync window (default \"UTC\") Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj windows - Manage a project's sync windows","title":"Argocd proj windows add"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows_add/#argocd-proj-windows-add","text":"Add a sync window to a project argocd proj windows add PROJECT [flags]","title":"argocd proj windows add"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows_add/#options","text":"--applications strings Applications that the schedule will be applied to. Comma separated, wildcards supported (e.g. --applications prod-\\*,website) --clusters strings Clusters that the schedule will be applied to. Comma separated, wildcards supported (e.g. --clusters prod,staging) --duration string Sync window duration. (e.g. --duration 1h) -h, --help help for add -k, --kind string Sync window kind, either allow or deny --manual-sync Allow manual syncs for both deny and allow windows --namespaces strings Namespaces that the schedule will be applied to. Comma separated, wildcards supported (e.g. --namespaces default,\\*-prod) --schedule string Sync window schedule in cron format. (e.g. --schedule \"0 22 * * *\") --time-zone string Time zone of the sync window (default \"UTC\")","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows_add/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows_add/#see-also","text":"argocd proj windows - Manage a project's sync windows","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows_delete/","text":"argocd proj windows delete Delete a sync window from a project. Requires ID which can be found by running \"argocd proj windows list PROJECT\" argocd proj windows delete PROJECT ID [flags] Options -h, --help help for delete Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj windows - Manage a project's sync windows","title":"Argocd proj windows delete"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows_delete/#argocd-proj-windows-delete","text":"Delete a sync window from a project. Requires ID which can be found by running \"argocd proj windows list PROJECT\" argocd proj windows delete PROJECT ID [flags]","title":"argocd proj windows delete"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows_delete/#options","text":"-h, --help help for delete","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows_delete/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows_delete/#see-also","text":"argocd proj windows - Manage a project's sync windows","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows_disable-manual-sync/","text":"argocd proj windows disable-manual-sync Disable manual sync for a sync window Synopsis Disable manual sync for a sync window. Requires ID which can be found by running \"argocd proj windows list PROJECT\" argocd proj windows disable-manual-sync PROJECT ID [flags] Options -h, --help help for disable-manual-sync Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj windows - Manage a project's sync windows","title":"Argocd proj windows disable manual sync"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows_disable-manual-sync/#argocd-proj-windows-disable-manual-sync","text":"Disable manual sync for a sync window","title":"argocd proj windows disable-manual-sync"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows_disable-manual-sync/#synopsis","text":"Disable manual sync for a sync window. Requires ID which can be found by running \"argocd proj windows list PROJECT\" argocd proj windows disable-manual-sync PROJECT ID [flags]","title":"Synopsis"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows_disable-manual-sync/#options","text":"-h, --help help for disable-manual-sync","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows_disable-manual-sync/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows_disable-manual-sync/#see-also","text":"argocd proj windows - Manage a project's sync windows","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows_enable-manual-sync/","text":"argocd proj windows enable-manual-sync Enable manual sync for a sync window Synopsis Enable manual sync for a sync window. Requires ID which can be found by running \"argocd proj windows list PROJECT\" argocd proj windows enable-manual-sync PROJECT ID [flags] Options -h, --help help for enable-manual-sync Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj windows - Manage a project's sync windows","title":"Argocd proj windows enable manual sync"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows_enable-manual-sync/#argocd-proj-windows-enable-manual-sync","text":"Enable manual sync for a sync window","title":"argocd proj windows enable-manual-sync"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows_enable-manual-sync/#synopsis","text":"Enable manual sync for a sync window. Requires ID which can be found by running \"argocd proj windows list PROJECT\" argocd proj windows enable-manual-sync PROJECT ID [flags]","title":"Synopsis"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows_enable-manual-sync/#options","text":"-h, --help help for enable-manual-sync","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows_enable-manual-sync/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows_enable-manual-sync/#see-also","text":"argocd proj windows - Manage a project's sync windows","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows_list/","text":"argocd proj windows list List project sync windows argocd proj windows list PROJECT [flags] Options -h, --help help for list -o, --output string Output format. One of: json|yaml|wide (default \"wide\") Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj windows - Manage a project's sync windows","title":"Argocd proj windows list"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows_list/#argocd-proj-windows-list","text":"List project sync windows argocd proj windows list PROJECT [flags]","title":"argocd proj windows list"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows_list/#options","text":"-h, --help help for list -o, --output string Output format. One of: json|yaml|wide (default \"wide\")","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows_list/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows_list/#see-also","text":"argocd proj windows - Manage a project's sync windows","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows_update/","text":"argocd proj windows update Update a project sync window Synopsis Update a project sync window. Requires ID which can be found by running \"argocd proj windows list PROJECT\" argocd proj windows update PROJECT ID [flags] Options --applications strings Applications that the schedule will be applied to. Comma separated, wildcards supported (e.g. --applications prod-\\*,website) --clusters strings Clusters that the schedule will be applied to. Comma separated, wildcards supported (e.g. --clusters prod,staging) --duration string Sync window duration. (e.g. --duration 1h) -h, --help help for update --namespaces strings Namespaces that the schedule will be applied to. Comma separated, wildcards supported (e.g. --namespaces default,\\*-prod) --schedule string Sync window schedule in cron format. (e.g. --schedule \"0 22 * * *\") --time-zone string Time zone of the sync window. (e.g. --time-zone \"America/New_York\") (default \"UTC\") Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd proj windows - Manage a project's sync windows","title":"Argocd proj windows update"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows_update/#argocd-proj-windows-update","text":"Update a project sync window","title":"argocd proj windows update"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows_update/#synopsis","text":"Update a project sync window. Requires ID which can be found by running \"argocd proj windows list PROJECT\" argocd proj windows update PROJECT ID [flags]","title":"Synopsis"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows_update/#options","text":"--applications strings Applications that the schedule will be applied to. Comma separated, wildcards supported (e.g. --applications prod-\\*,website) --clusters strings Clusters that the schedule will be applied to. Comma separated, wildcards supported (e.g. --clusters prod,staging) --duration string Sync window duration. (e.g. --duration 1h) -h, --help help for update --namespaces strings Namespaces that the schedule will be applied to. Comma separated, wildcards supported (e.g. --namespaces default,\\*-prod) --schedule string Sync window schedule in cron format. (e.g. --schedule \"0 22 * * *\") --time-zone string Time zone of the sync window. (e.g. --time-zone \"America/New_York\") (default \"UTC\")","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows_update/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_proj_windows_update/#see-also","text":"argocd proj windows - Manage a project's sync windows","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_relogin/","text":"argocd relogin Refresh an expired authenticate token Synopsis Refresh an expired authenticate token argocd relogin [flags] Options -h, --help help for relogin --password string the password of an account to authenticate --sso-port int port to run local OAuth2 login application (default 8085) Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd - argocd controls a Argo CD server","title":"Argocd relogin"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_relogin/#argocd-relogin","text":"Refresh an expired authenticate token","title":"argocd relogin"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_relogin/#synopsis","text":"Refresh an expired authenticate token argocd relogin [flags]","title":"Synopsis"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_relogin/#options","text":"-h, --help help for relogin --password string the password of an account to authenticate --sso-port int port to run local OAuth2 login application (default 8085)","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_relogin/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_relogin/#see-also","text":"argocd - argocd controls a Argo CD server","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repo/","text":"argocd repo Manage repository connection parameters argocd repo [flags] Options --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for repo --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd - argocd controls a Argo CD server argocd repo add - Add git repository connection parameters argocd repo get - Get a configured repository by URL argocd repo list - List configured repositories argocd repo rm - Remove repository credentials","title":"Argocd repo"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repo/#argocd-repo","text":"Manage repository connection parameters argocd repo [flags]","title":"argocd repo"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repo/#options","text":"--as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for repo --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repo/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repo/#see-also","text":"argocd - argocd controls a Argo CD server argocd repo add - Add git repository connection parameters argocd repo get - Get a configured repository by URL argocd repo list - List configured repositories argocd repo rm - Remove repository credentials","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repo_add/","text":"argocd repo add Add git repository connection parameters argocd repo add REPOURL [flags] Examples # Add a Git repository via SSH using a private key for authentication, ignoring the server's host key: argocd repo add git@git.example.com:repos/repo --insecure-ignore-host-key --ssh-private-key-path ~/id_rsa # Add a Git repository via SSH on a non-default port - need to use ssh:// style URLs here argocd repo add ssh://git@git.example.com:2222/repos/repo --ssh-private-key-path ~/id_rsa # Add a private Git repository via HTTPS using username/password and TLS client certificates: argocd repo add https://git.example.com/repos/repo --username git --password secret --tls-client-cert-path ~/mycert.crt --tls-client-cert-key-path ~/mycert.key # Add a private Git repository via HTTPS using username/password without verifying the server's TLS certificate argocd repo add https://git.example.com/repos/repo --username git --password secret --insecure-skip-server-verification # Add a public Helm repository named 'stable' via HTTPS argocd repo add https://charts.helm.sh/stable --type helm --name stable # Add a private Helm repository named 'stable' via HTTPS argocd repo add https://charts.helm.sh/stable --type helm --name stable --username test --password test # Add a private Helm OCI-based repository named 'stable' via HTTPS argocd repo add helm-oci-registry.cn-zhangjiakou.cr.aliyuncs.com --type helm --name stable --enable-oci --username test --password test # Add a private Git repository on GitHub.com via GitHub App argocd repo add https://git.example.com/repos/repo --github-app-id 1 --github-app-installation-id 2 --github-app-private-key-path test.private-key.pem # Add a private Git repository on GitHub Enterprise via GitHub App argocd repo add https://ghe.example.com/repos/repo --github-app-id 1 --github-app-installation-id 2 --github-app-private-key-path test.private-key.pem --github-app-enterprise-base-url https://ghe.example.com/api/v3 Options --enable-lfs enable git-lfs (Large File Support) on this repository --enable-oci enable helm-oci (Helm OCI-Based Repository) --github-app-enterprise-base-url string base url to use when using GitHub Enterprise (e.g. https://ghe.example.com/api/v3 --github-app-id int id of the GitHub Application --github-app-installation-id int installation id of the GitHub Application --github-app-private-key-path string private key of the GitHub Application -h, --help help for add --insecure-ignore-host-key disables SSH strict host key checking (deprecated, use --insecure-skip-server-verification instead) --insecure-skip-server-verification disables server certificate and host key checks --name string name of the repository, mandatory for repositories of type helm --password string password to the repository --project string project of the repository --proxy string use proxy to access repository --ssh-private-key-path string path to the private ssh key (e.g. ~/.ssh/id_rsa) --tls-client-cert-key-path string path to the TLS client cert's key path (must be PEM format) --tls-client-cert-path string path to the TLS client cert (must be PEM format) --type string type of the repository, \"git\" or \"helm\" (default \"git\") --upsert Override an existing repository with the same name even if the spec differs --username string username to the repository Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd repo - Manage repository connection parameters","title":"Argocd repo add"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repo_add/#argocd-repo-add","text":"Add git repository connection parameters argocd repo add REPOURL [flags]","title":"argocd repo add"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repo_add/#examples","text":"# Add a Git repository via SSH using a private key for authentication, ignoring the server's host key: argocd repo add git@git.example.com:repos/repo --insecure-ignore-host-key --ssh-private-key-path ~/id_rsa # Add a Git repository via SSH on a non-default port - need to use ssh:// style URLs here argocd repo add ssh://git@git.example.com:2222/repos/repo --ssh-private-key-path ~/id_rsa # Add a private Git repository via HTTPS using username/password and TLS client certificates: argocd repo add https://git.example.com/repos/repo --username git --password secret --tls-client-cert-path ~/mycert.crt --tls-client-cert-key-path ~/mycert.key # Add a private Git repository via HTTPS using username/password without verifying the server's TLS certificate argocd repo add https://git.example.com/repos/repo --username git --password secret --insecure-skip-server-verification # Add a public Helm repository named 'stable' via HTTPS argocd repo add https://charts.helm.sh/stable --type helm --name stable # Add a private Helm repository named 'stable' via HTTPS argocd repo add https://charts.helm.sh/stable --type helm --name stable --username test --password test # Add a private Helm OCI-based repository named 'stable' via HTTPS argocd repo add helm-oci-registry.cn-zhangjiakou.cr.aliyuncs.com --type helm --name stable --enable-oci --username test --password test # Add a private Git repository on GitHub.com via GitHub App argocd repo add https://git.example.com/repos/repo --github-app-id 1 --github-app-installation-id 2 --github-app-private-key-path test.private-key.pem # Add a private Git repository on GitHub Enterprise via GitHub App argocd repo add https://ghe.example.com/repos/repo --github-app-id 1 --github-app-installation-id 2 --github-app-private-key-path test.private-key.pem --github-app-enterprise-base-url https://ghe.example.com/api/v3","title":"Examples"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repo_add/#options","text":"--enable-lfs enable git-lfs (Large File Support) on this repository --enable-oci enable helm-oci (Helm OCI-Based Repository) --github-app-enterprise-base-url string base url to use when using GitHub Enterprise (e.g. https://ghe.example.com/api/v3 --github-app-id int id of the GitHub Application --github-app-installation-id int installation id of the GitHub Application --github-app-private-key-path string private key of the GitHub Application -h, --help help for add --insecure-ignore-host-key disables SSH strict host key checking (deprecated, use --insecure-skip-server-verification instead) --insecure-skip-server-verification disables server certificate and host key checks --name string name of the repository, mandatory for repositories of type helm --password string password to the repository --project string project of the repository --proxy string use proxy to access repository --ssh-private-key-path string path to the private ssh key (e.g. ~/.ssh/id_rsa) --tls-client-cert-key-path string path to the TLS client cert's key path (must be PEM format) --tls-client-cert-path string path to the TLS client cert (must be PEM format) --type string type of the repository, \"git\" or \"helm\" (default \"git\") --upsert Override an existing repository with the same name even if the spec differs --username string username to the repository","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repo_add/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repo_add/#see-also","text":"argocd repo - Manage repository connection parameters","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repo_get/","text":"argocd repo get Get a configured repository by URL argocd repo get [flags] Options -h, --help help for get -o, --output string Output format. One of: json|yaml|wide|url (default \"wide\") --refresh string Force a cache refresh on connection status Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd repo - Manage repository connection parameters","title":"Argocd repo get"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repo_get/#argocd-repo-get","text":"Get a configured repository by URL argocd repo get [flags]","title":"argocd repo get"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repo_get/#options","text":"-h, --help help for get -o, --output string Output format. One of: json|yaml|wide|url (default \"wide\") --refresh string Force a cache refresh on connection status","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repo_get/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repo_get/#see-also","text":"argocd repo - Manage repository connection parameters","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repo_list/","text":"argocd repo list List configured repositories argocd repo list [flags] Options -h, --help help for list -o, --output string Output format. One of: json|yaml|wide|url (default \"wide\") --refresh string Force a cache refresh on connection status Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd repo - Manage repository connection parameters","title":"Argocd repo list"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repo_list/#argocd-repo-list","text":"List configured repositories argocd repo list [flags]","title":"argocd repo list"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repo_list/#options","text":"-h, --help help for list -o, --output string Output format. One of: json|yaml|wide|url (default \"wide\") --refresh string Force a cache refresh on connection status","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repo_list/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repo_list/#see-also","text":"argocd repo - Manage repository connection parameters","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repo_rm/","text":"argocd repo rm Remove repository credentials argocd repo rm REPO [flags] Options -h, --help help for rm Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd repo - Manage repository connection parameters","title":"Argocd repo rm"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repo_rm/#argocd-repo-rm","text":"Remove repository credentials argocd repo rm REPO [flags]","title":"argocd repo rm"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repo_rm/#options","text":"-h, --help help for rm","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repo_rm/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repo_rm/#see-also","text":"argocd repo - Manage repository connection parameters","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repocreds/","text":"argocd repocreds Manage repository connection parameters argocd repocreds [flags] Options --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for repocreds --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd - argocd controls a Argo CD server argocd repocreds add - Add git repository connection parameters argocd repocreds list - List configured repository credentials argocd repocreds rm - Remove repository credentials","title":"Argocd repocreds"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repocreds/#argocd-repocreds","text":"Manage repository connection parameters argocd repocreds [flags]","title":"argocd repocreds"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repocreds/#options","text":"--as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for repocreds --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repocreds/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repocreds/#see-also","text":"argocd - argocd controls a Argo CD server argocd repocreds add - Add git repository connection parameters argocd repocreds list - List configured repository credentials argocd repocreds rm - Remove repository credentials","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repocreds_add/","text":"argocd repocreds add Add git repository connection parameters argocd repocreds add REPOURL [flags] Examples # Add credentials with user/pass authentication to use for all repositories under https://git.example.com/repos argocd repocreds add https://git.example.com/repos/ --username git --password secret # Add credentials with SSH private key authentication to use for all repositories under ssh://git@git.example.com/repos argocd repocreds add ssh://git@git.example.com/repos/ --ssh-private-key-path ~/.ssh/id_rsa # Add credentials with GitHub App authentication to use for all repositories under https://github.com/repos argocd repocreds add https://github.com/repos/ --github-app-id 1 --github-app-installation-id 2 --github-app-private-key-path test.private-key.pem # Add credentials with GitHub App authentication to use for all repositories under https://ghe.example.com/repos argocd repocreds add https://ghe.example.com/repos/ --github-app-id 1 --github-app-installation-id 2 --github-app-private-key-path test.private-key.pem --github-app-enterprise-base-url https://ghe.example.com/api/v3 # Add credentials with helm oci registry so that these oci registry urls do not need to be added as repos individually. argocd repocreds add localhost:5000/myrepo --enable-oci --type helm Options --enable-oci Specifies whether helm-oci support should be enabled for this repo --github-app-enterprise-base-url string base url to use when using GitHub Enterprise (e.g. https://ghe.example.com/api/v3 --github-app-id int id of the GitHub Application --github-app-installation-id int installation id of the GitHub Application --github-app-private-key-path string private key of the GitHub Application -h, --help help for add --password string password to the repository --ssh-private-key-path string path to the private ssh key (e.g. ~/.ssh/id_rsa) --tls-client-cert-key-path string path to the TLS client cert's key path (must be PEM format) --tls-client-cert-path string path to the TLS client cert (must be PEM format) --type string type of the repository, \"git\" or \"helm\" (default \"git\") --upsert Override an existing repository with the same name even if the spec differs --username string username to the repository Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd repocreds - Manage repository connection parameters","title":"Argocd repocreds add"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repocreds_add/#argocd-repocreds-add","text":"Add git repository connection parameters argocd repocreds add REPOURL [flags]","title":"argocd repocreds add"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repocreds_add/#examples","text":"# Add credentials with user/pass authentication to use for all repositories under https://git.example.com/repos argocd repocreds add https://git.example.com/repos/ --username git --password secret # Add credentials with SSH private key authentication to use for all repositories under ssh://git@git.example.com/repos argocd repocreds add ssh://git@git.example.com/repos/ --ssh-private-key-path ~/.ssh/id_rsa # Add credentials with GitHub App authentication to use for all repositories under https://github.com/repos argocd repocreds add https://github.com/repos/ --github-app-id 1 --github-app-installation-id 2 --github-app-private-key-path test.private-key.pem # Add credentials with GitHub App authentication to use for all repositories under https://ghe.example.com/repos argocd repocreds add https://ghe.example.com/repos/ --github-app-id 1 --github-app-installation-id 2 --github-app-private-key-path test.private-key.pem --github-app-enterprise-base-url https://ghe.example.com/api/v3 # Add credentials with helm oci registry so that these oci registry urls do not need to be added as repos individually. argocd repocreds add localhost:5000/myrepo --enable-oci --type helm","title":"Examples"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repocreds_add/#options","text":"--enable-oci Specifies whether helm-oci support should be enabled for this repo --github-app-enterprise-base-url string base url to use when using GitHub Enterprise (e.g. https://ghe.example.com/api/v3 --github-app-id int id of the GitHub Application --github-app-installation-id int installation id of the GitHub Application --github-app-private-key-path string private key of the GitHub Application -h, --help help for add --password string password to the repository --ssh-private-key-path string path to the private ssh key (e.g. ~/.ssh/id_rsa) --tls-client-cert-key-path string path to the TLS client cert's key path (must be PEM format) --tls-client-cert-path string path to the TLS client cert (must be PEM format) --type string type of the repository, \"git\" or \"helm\" (default \"git\") --upsert Override an existing repository with the same name even if the spec differs --username string username to the repository","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repocreds_add/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repocreds_add/#see-also","text":"argocd repocreds - Manage repository connection parameters","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repocreds_list/","text":"argocd repocreds list List configured repository credentials argocd repocreds list [flags] Options -h, --help help for list -o, --output string Output format. One of: json|yaml|wide|url (default \"wide\") Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd repocreds - Manage repository connection parameters","title":"Argocd repocreds list"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repocreds_list/#argocd-repocreds-list","text":"List configured repository credentials argocd repocreds list [flags]","title":"argocd repocreds list"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repocreds_list/#options","text":"-h, --help help for list -o, --output string Output format. One of: json|yaml|wide|url (default \"wide\")","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repocreds_list/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repocreds_list/#see-also","text":"argocd repocreds - Manage repository connection parameters","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repocreds_rm/","text":"argocd repocreds rm Remove repository credentials argocd repocreds rm CREDSURL [flags] Options -h, --help help for rm Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd repocreds - Manage repository connection parameters","title":"Argocd repocreds rm"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repocreds_rm/#argocd-repocreds-rm","text":"Remove repository credentials argocd repocreds rm CREDSURL [flags]","title":"argocd repocreds rm"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repocreds_rm/#options","text":"-h, --help help for rm","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repocreds_rm/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_repocreds_rm/#see-also","text":"argocd repocreds - Manage repository connection parameters","title":"SEE ALSO"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_version/","text":"argocd version Print version information argocd version [flags] Examples # Print the full version of client and server to stdout argocd version # Print only full version of the client - no connection to server will be made argocd version --client # Print the full version of client and server in JSON format argocd version -o json # Print only client and server core version strings in YAML format argocd version --short -o yaml Options --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client client version only (no server required) --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for version --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request -o, --output string Output format. One of: json|yaml|wide|short (default \"wide\") --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --short print just the version number --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server Options inherited from parent commands --auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file SEE ALSO argocd - argocd controls a Argo CD server","title":"Argocd version"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_version/#argocd-version","text":"Print version information argocd version [flags]","title":"argocd version"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_version/#examples","text":"# Print the full version of client and server to stdout argocd version # Print only full version of the client - no connection to server will be made argocd version --client # Print the full version of client and server in JSON format argocd version -o json # Print only client and server core version strings in YAML format argocd version --short -o yaml","title":"Examples"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_version/#options","text":"--as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client client version only (no server required) --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for version --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request -o, --output string Output format. One of: json|yaml|wide|short (default \"wide\") --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --short print just the version number --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_version/#options-inherited-from-parent-commands","text":"--auth-token string Authentication token --client-crt string Client certificate file --client-crt-key string Client certificate key file --config string Path to Argo CD config (default \"/home/user/.argocd/config\") --core If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server --grpc-web Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. --grpc-web-root-path string Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root. -H, --header strings Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers) --http-retry-max int Maximum number of retries to establish http connection to Argo CD server --insecure Skip server certificate and domain verification --logformat string Set the logging format. One of: text|json (default \"text\") --loglevel string Set the logging level. One of: debug|info|warn|error (default \"info\") --plaintext Disable TLS --port-forward Connect to a random argocd-server port using port forwarding --port-forward-namespace string Namespace name which should be used for port forwarding --server string Argo CD server address --server-crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"Postgresql%20Notlar%C4%B1/commands/argocd_version/#see-also","text":"argocd - argocd controls a Argo CD server","title":"SEE ALSO"}]}